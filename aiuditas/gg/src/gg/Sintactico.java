
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Mar 30 22:47:32 CST 2018
//----------------------------------------------------

package gg;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.Iterator;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Mar 30 22:47:32 CST 2018
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\272\000\002\002\004\000\002\123\002\000\002\002" +
    "\006\000\002\002\005\000\002\002\004\000\002\003\010" +
    "\000\002\003\002\000\002\071\005\000\002\071\003\000" +
    "\002\071\003\000\002\071\002\000\002\124\002\000\002" +
    "\125\002\000\002\004\014\000\002\004\002\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\002\000\002\007\017\000\002\126\002\000" +
    "\002\007\016\000\002\007\006\000\002\007\002\000\002" +
    "\127\002\000\002\073\006\000\002\073\006\000\002\073" +
    "\004\000\002\073\005\000\002\032\004\000\002\032\005" +
    "\000\002\032\010\000\002\032\004\000\002\032\005\000" +
    "\002\032\002\000\002\074\004\000\002\074\004\000\002" +
    "\074\004\000\002\074\004\000\002\074\004\000\002\074" +
    "\004\000\002\074\003\000\002\074\002\000\002\100\004" +
    "\000\002\100\004\000\002\100\004\000\002\100\004\000" +
    "\002\100\004\000\002\100\004\000\002\100\004\000\002" +
    "\100\004\000\002\100\004\000\002\100\004\000\002\100" +
    "\004\000\002\100\004\000\002\130\002\000\002\022\007" +
    "\000\002\022\004\000\002\022\007\000\002\022\002\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\045\012\000\002\075" +
    "\006\000\002\075\011\000\002\075\002\000\002\046\017" +
    "\000\002\063\004\000\002\063\004\000\002\063\003\000" +
    "\002\063\003\000\002\047\012\000\002\050\013\000\002" +
    "\051\011\000\002\064\013\000\002\064\010\000\002\064" +
    "\002\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\003\000\002\036\002\000\002" +
    "\076\003\000\002\076\003\000\002\076\002\000\002\021" +
    "\005\000\002\021\006\000\002\021\007\000\002\021\002" +
    "\000\002\072\005\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\131\002\000\002\132\002\000\002\102" +
    "\011\000\002\133\002\000\002\134\002\000\002\102\011" +
    "\000\002\102\002\000\002\135\002\000\002\136\002\000" +
    "\002\103\011\000\002\103\002\000\002\105\004\000\002" +
    "\105\010\000\002\105\010\000\002\105\010\000\002\105" +
    "\010\000\002\105\010\000\002\105\010\000\002\105\010" +
    "\000\002\105\010\000\002\105\004\000\002\105\004\000" +
    "\002\105\010\000\002\105\010\000\002\105\010\000\002" +
    "\105\010\000\002\105\005\000\002\105\002\000\002\106" +
    "\007\000\002\106\007\000\002\106\007\000\002\106\007" +
    "\000\002\106\002\000\002\107\003\000\002\107\003\000" +
    "\002\107\003\000\002\107\003\000\002\107\003\000\002" +
    "\107\003\000\002\107\003\000\002\107\002\000\002\110" +
    "\003\000\002\110\003\000\002\110\003\000\002\110\002" +
    "\000\002\111\002\000\002\120\003\000\002\120\003\000" +
    "\002\120\003\000\002\120\003\000\002\120\003\000\002" +
    "\120\003\000\002\104\003\000\002\104\003\000\002\104" +
    "\003\000\002\104\003\000\002\104\003\000\002\104\003" +
    "\000\002\104\005\000\002\104\002\000\002\112\006\000" +
    "\002\112\002\000\002\113\004\000\002\113\004\000\002" +
    "\113\004\000\002\113\004\000\002\113\004\000\002\113" +
    "\004\000\002\113\004\000\002\113\004\000\002\113\004" +
    "\000\002\113\004\000\002\113\004\000\002\113\004\000" +
    "\002\113\006\000\002\113\002\000\002\122\010\000\002" +
    "\122\012\000\002\122\010\000\002\122\010\000\002\122" +
    "\010\000\002\122\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01c4\000\024\002\ufffb\012\ufffb\013\ufffb\112\004\113" +
    "\ufffb\114\007\120\ufffb\121\ufffb\140\005\001\002\000\004" +
    "\246\u01be\001\002\000\010\141\000\142\000\144\000\001" +
    "\002\000\004\002\u0107\001\002\000\016\114\uff48\134\351" +
    "\135\347\136\350\137\345\237\346\001\002\000\016\002" +
    "\ufff3\012\015\013\012\113\uffee\120\011\121\013\001\002" +
    "\000\022\006\ufff0\007\ufff0\015\ufff0\016\ufff0\017\ufff0\113" +
    "\ufff0\130\ufff0\246\ufff0\001\002\000\022\006\ufff2\007\ufff2" +
    "\015\ufff2\016\ufff2\017\ufff2\113\ufff2\130\ufff2\246\ufff2\001" +
    "\002\000\022\006\uffef\007\uffef\015\uffef\016\uffef\017\uffef" +
    "\113\uffef\130\uffef\246\uffef\001\002\000\004\113\017\001" +
    "\002\000\022\006\ufff1\007\ufff1\015\ufff1\016\ufff1\017\ufff1" +
    "\113\ufff1\130\ufff1\246\ufff1\001\002\000\004\002\ufffd\001" +
    "\002\000\004\246\020\001\002\000\004\114\021\001\002" +
    "\000\032\006\uffee\007\uffee\012\023\013\012\015\uffee\016" +
    "\uffee\017\uffee\115\uffe9\120\011\121\013\130\uffee\246\uffee" +
    "\001\002\000\020\006\152\007\153\015\155\016\154\017" +
    "\157\130\151\246\156\001\002\000\022\006\ufff1\007\ufff1" +
    "\014\032\015\ufff1\016\ufff1\017\ufff1\130\ufff1\246\ufff1\001" +
    "\002\000\004\115\025\001\002\000\020\002\ufff6\012\ufff6" +
    "\013\ufff6\112\ufff6\113\ufff6\120\ufff6\121\ufff6\001\002\000" +
    "\020\002\ufffb\012\ufffb\013\ufffb\112\004\113\ufffb\120\ufffb" +
    "\121\ufffb\001\002\000\016\002\ufff5\012\ufff5\013\ufff5\113" +
    "\ufff5\120\ufff5\121\ufff5\001\002\000\016\002\ufff3\012\015" +
    "\013\012\113\uffee\120\011\121\013\001\002\000\004\002" +
    "\ufff4\001\002\000\004\116\033\001\002\000\004\076\034" +
    "\001\002\000\004\050\035\001\002\000\004\007\036\001" +
    "\002\000\004\240\037\001\002\000\004\241\040\001\002" +
    "\000\004\246\041\001\002\000\004\051\042\001\002\000" +
    "\044\006\uffee\007\uffee\012\015\013\012\015\uffee\016\uffee" +
    "\017\uffee\023\057\026\054\027\056\033\051\115\uffc5\120" +
    "\011\121\013\123\052\130\uffee\246\uffee\001\002\000\050" +
    "\006\uffc2\007\uffc2\012\uffc2\013\uffc2\015\uffc2\016\uffc2\017" +
    "\uffc2\023\uffc2\026\uffc2\027\uffc2\033\uffc2\075\uffc2\115\uffc2" +
    "\120\uffc2\121\uffc2\122\uffc2\123\uffc2\130\uffc2\246\uffc2\001" +
    "\002\000\050\006\uffee\007\uffee\012\015\013\012\015\uffee" +
    "\016\uffee\017\uffee\023\057\026\054\027\056\033\051\075" +
    "\uffc5\115\uffc5\120\011\121\013\122\uffc5\123\052\130\uffee" +
    "\246\uffee\001\002\000\020\006\152\007\153\015\155\016" +
    "\154\017\157\130\151\246\316\001\002\000\050\006\uffc3" +
    "\007\uffc3\012\uffc3\013\uffc3\015\uffc3\016\uffc3\017\uffc3\023" +
    "\uffc3\026\uffc3\027\uffc3\033\uffc3\075\uffc3\115\uffc3\120\uffc3" +
    "\121\uffc3\122\uffc3\123\uffc3\130\uffc3\246\uffc3\001\002\000" +
    "\004\115\314\001\002\000\050\006\uffc1\007\uffc1\012\uffc1" +
    "\013\uffc1\015\uffc1\016\uffc1\017\uffc1\023\uffc1\026\uffc1\027" +
    "\uffc1\033\uffc1\075\uffc1\115\uffc1\120\uffc1\121\uffc1\122\uffc1" +
    "\123\uffc1\130\uffc1\246\uffc1\001\002\000\004\114\304\001" +
    "\002\000\004\050\247\001\002\000\050\006\uffc4\007\uffc4" +
    "\012\uffc4\013\uffc4\015\uffc4\016\uffc4\017\uffc4\023\uffc4\026" +
    "\uffc4\027\uffc4\033\uffc4\075\uffc4\115\uffc4\120\uffc4\121\uffc4" +
    "\122\uffc4\123\uffc4\130\uffc4\246\uffc4\001\002\000\004\050" +
    "\240\001\002\000\050\006\uffc0\007\uffc0\012\uffc0\013\uffc0" +
    "\015\uffc0\016\uffc0\017\uffc0\023\uffc0\026\uffc0\027\uffc0\033" +
    "\uffc0\075\uffc0\115\uffc0\120\uffc0\121\uffc0\122\uffc0\123\uffc0" +
    "\130\uffc0\246\uffc0\001\002\000\004\050\147\001\002\000" +
    "\004\050\060\001\002\000\050\040\101\041\066\042\061" +
    "\043\075\045\073\051\uffd6\052\077\053\070\054\076\055" +
    "\072\056\102\110\103\111\100\242\074\243\065\244\062" +
    "\245\071\246\104\247\067\001\002\000\052\040\101\041" +
    "\066\042\061\043\075\045\073\046\uffd6\051\uffd6\052\077" +
    "\053\070\054\076\055\072\056\102\110\103\111\100\242" +
    "\074\243\065\244\062\245\071\246\104\247\067\001\002" +
    "\000\052\040\101\041\066\042\061\043\075\045\073\046" +
    "\uffd6\051\uffd6\052\077\053\070\054\076\055\072\056\102" +
    "\110\103\111\100\242\074\243\065\244\062\245\071\246" +
    "\104\247\067\001\002\000\006\046\uffd7\051\uffd7\001\002" +
    "\000\004\051\125\001\002\000\052\040\101\041\066\042" +
    "\061\043\075\045\073\046\uffd6\051\uffd6\052\077\053\070" +
    "\054\076\055\072\056\102\110\103\111\100\242\074\243" +
    "\065\244\062\245\071\246\104\247\067\001\002\000\052" +
    "\040\101\041\066\042\061\043\075\045\073\046\uffd6\051" +
    "\uffd6\052\077\053\070\054\076\055\072\056\102\110\103" +
    "\111\100\242\074\243\065\244\062\245\071\246\104\247" +
    "\067\001\002\000\052\040\101\041\066\042\061\043\075" +
    "\045\073\046\uffd6\051\uffd6\052\077\053\070\054\076\055" +
    "\072\056\102\110\103\111\100\242\074\243\065\244\062" +
    "\245\071\246\104\247\067\001\002\000\052\040\101\041" +
    "\066\042\061\043\075\045\073\046\uffd6\051\uffd6\052\077" +
    "\053\070\054\076\055\072\056\102\110\103\111\100\242" +
    "\074\243\065\244\062\245\071\246\104\247\067\001\002" +
    "\000\052\040\101\041\066\042\061\043\075\045\073\046" +
    "\uffd6\051\uffd6\052\077\053\070\054\076\055\072\056\102" +
    "\110\103\111\100\242\074\243\065\244\062\245\071\246" +
    "\104\247\067\001\002\000\052\040\101\041\066\042\061" +
    "\043\075\045\073\046\uffd6\051\uffd6\052\077\053\070\054" +
    "\076\055\072\056\102\110\103\111\100\242\074\243\065" +
    "\244\062\245\071\246\104\247\067\001\002\000\052\040" +
    "\101\041\066\042\061\043\075\045\073\046\uffd6\051\uffd6" +
    "\052\077\053\070\054\076\055\072\056\102\110\103\111" +
    "\100\242\074\243\065\244\062\245\071\246\104\247\067" +
    "\001\002\000\052\040\101\041\066\042\061\043\075\045" +
    "\073\046\uffd6\051\uffd6\052\077\053\070\054\076\055\072" +
    "\056\102\110\103\111\100\242\074\243\065\244\062\245" +
    "\071\246\104\247\067\001\002\000\052\040\101\041\066" +
    "\042\061\043\075\045\073\046\uffd6\051\uffd6\052\077\053" +
    "\070\054\076\055\072\056\102\110\103\111\100\242\074" +
    "\243\065\244\062\245\071\246\104\247\067\001\002\000" +
    "\052\040\101\041\066\042\061\043\075\045\073\046\uffd6" +
    "\051\uffd6\052\077\053\070\054\076\055\072\056\102\110" +
    "\103\111\100\242\074\243\065\244\062\245\071\246\104" +
    "\247\067\001\002\000\052\040\101\041\066\042\061\043" +
    "\075\045\073\046\uffd6\051\uffd6\052\077\053\070\054\076" +
    "\055\072\056\102\110\103\111\100\242\074\243\065\244" +
    "\062\245\071\246\104\247\067\001\002\000\052\040\101" +
    "\041\066\042\061\043\075\045\073\046\uffd6\051\uffd6\052" +
    "\077\053\070\054\076\055\072\056\102\110\103\111\100" +
    "\242\074\243\065\244\062\245\071\246\104\247\067\001" +
    "\002\000\052\040\101\041\066\042\061\043\075\045\073" +
    "\046\uffd6\051\uffd6\052\077\053\070\054\076\055\072\056" +
    "\102\110\103\111\100\242\074\243\065\244\062\245\071" +
    "\246\104\247\067\001\002\000\052\040\101\041\066\042" +
    "\061\043\075\045\073\046\uffd6\051\uffd6\052\077\053\070" +
    "\054\076\055\072\056\102\110\103\111\100\242\074\243" +
    "\065\244\062\245\071\246\104\247\067\001\002\000\052" +
    "\040\101\041\066\042\061\043\075\045\073\046\uffd6\051" +
    "\uffd6\052\077\053\070\054\076\055\072\056\102\110\103" +
    "\111\100\242\074\243\065\244\062\245\071\246\104\247" +
    "\067\001\002\000\052\040\101\041\066\042\061\043\075" +
    "\045\073\046\uffd6\051\uffd6\052\077\053\070\054\076\055" +
    "\072\056\102\110\103\111\100\242\074\243\065\244\062" +
    "\245\071\246\104\247\067\001\002\000\006\046\uffdd\051" +
    "\uffdd\001\002\000\006\046\uffcb\051\uffcb\001\002\000\006" +
    "\046\uffd1\051\uffd1\001\002\000\006\046\uffd0\051\uffd0\001" +
    "\002\000\006\046\uffcc\051\uffcc\001\002\000\006\046\uffd5" +
    "\051\uffd5\001\002\000\006\046\uffd3\051\uffd3\001\002\000" +
    "\006\046\uffcd\051\uffcd\001\002\000\006\046\uffdc\051\uffdc" +
    "\001\002\000\006\046\uffca\051\uffca\001\002\000\006\046" +
    "\uffd2\051\uffd2\001\002\000\006\046\uffd9\051\uffd9\001\002" +
    "\000\006\046\uffd4\051\uffd4\001\002\000\006\046\uffd8\051" +
    "\uffd8\001\002\000\006\046\uffcf\051\uffcf\001\002\000\006" +
    "\046\uffdb\051\uffdb\001\002\000\004\114\126\001\002\000" +
    "\044\006\uffee\007\uffee\012\015\013\012\015\uffee\016\uffee" +
    "\017\uffee\023\057\026\054\027\056\033\051\115\uffc5\120" +
    "\011\121\013\123\052\130\uffee\246\uffee\001\002\000\004" +
    "\115\130\001\002\000\054\006\uffbc\007\uffbc\012\uffbc\013" +
    "\uffbc\015\uffbc\016\uffbc\017\uffbc\023\uffbc\025\132\026\uffbc" +
    "\027\uffbc\033\uffbc\075\uffbc\100\133\115\uffbc\120\uffbc\121" +
    "\uffbc\122\uffbc\123\uffbc\130\uffbc\246\uffbc\001\002\000\050" +
    "\006\uffbf\007\uffbf\012\uffbf\013\uffbf\015\uffbf\016\uffbf\017" +
    "\uffbf\023\uffbf\026\uffbf\027\uffbf\033\uffbf\075\uffbf\115\uffbf" +
    "\120\uffbf\121\uffbf\122\uffbf\123\uffbf\130\uffbf\246\uffbf\001" +
    "\002\000\004\114\142\001\002\000\004\050\134\001\002" +
    "\000\004\051\135\001\002\000\004\114\136\001\002\000" +
    "\044\006\uffee\007\uffee\012\015\013\012\015\uffee\016\uffee" +
    "\017\uffee\023\057\026\054\027\056\033\051\115\uffc5\120" +
    "\011\121\013\123\052\130\uffee\246\uffee\001\002\000\004" +
    "\115\140\001\002\000\054\006\uffbc\007\uffbc\012\uffbc\013" +
    "\uffbc\015\uffbc\016\uffbc\017\uffbc\023\uffbc\025\132\026\uffbc" +
    "\027\uffbc\033\uffbc\075\uffbc\100\133\115\uffbc\120\uffbc\121" +
    "\uffbc\122\uffbc\123\uffbc\130\uffbc\246\uffbc\001\002\000\050" +
    "\006\uffbd\007\uffbd\012\uffbd\013\uffbd\015\uffbd\016\uffbd\017" +
    "\uffbd\023\uffbd\026\uffbd\027\uffbd\033\uffbd\075\uffbd\115\uffbd" +
    "\120\uffbd\121\uffbd\122\uffbd\123\uffbd\130\uffbd\246\uffbd\001" +
    "\002\000\044\006\uffee\007\uffee\012\015\013\012\015\uffee" +
    "\016\uffee\017\uffee\023\057\026\054\027\056\033\051\115" +
    "\uffc5\120\011\121\013\123\052\130\uffee\246\uffee\001\002" +
    "\000\004\115\144\001\002\000\050\006\uffbe\007\uffbe\012" +
    "\uffbe\013\uffbe\015\uffbe\016\uffbe\017\uffbe\023\uffbe\026\uffbe" +
    "\027\uffbe\033\uffbe\075\uffbe\115\uffbe\120\uffbe\121\uffbe\122" +
    "\uffbe\123\uffbe\130\uffbe\246\uffbe\001\002\000\006\046\uffda" +
    "\051\uffda\001\002\000\006\046\uffce\051\uffce\001\002\000" +
    "\030\006\uffee\007\uffee\012\015\013\012\015\uffee\016\uffee" +
    "\017\uffee\120\011\121\013\130\uffee\246\uffee\001\002\000" +
    "\020\006\152\007\153\015\155\016\154\017\157\130\151" +
    "\246\156\001\002\000\006\240\uff9a\246\uff9a\001\002\000" +
    "\006\240\uff9f\246\uff9f\001\002\000\006\240\uff9d\246\uff9d" +
    "\001\002\000\006\240\uff9c\246\uff9c\001\002\000\006\240" +
    "\uff9e\246\uff9e\001\002\000\012\045\167\046\uffde\047\236" +
    "\246\166\001\002\000\006\240\uff9b\246\uff9b\001\002\000" +
    "\004\046\215\001\002\000\004\246\162\001\002\000\012" +
    "\045\uffe8\046\uffe8\047\163\246\uffe8\001\002\000\010\045" +
    "\167\046\uffde\246\166\001\002\000\010\045\167\046\uffde" +
    "\246\166\001\002\000\004\046\uffe7\001\002\000\012\045" +
    "\167\046\uffde\047\212\246\166\001\002\000\052\040\101" +
    "\041\066\042\061\043\075\045\073\046\uffd6\052\077\053" +
    "\070\054\076\055\072\056\102\110\103\111\100\117\171" +
    "\242\074\243\065\244\062\245\071\246\104\247\067\001" +
    "\002\000\004\046\uffe3\001\002\000\004\246\172\001\002" +
    "\000\006\046\uffe2\050\173\001\002\000\022\006\152\007" +
    "\153\015\155\016\154\017\157\047\174\051\uffa1\130\151" +
    "\001\002\000\016\006\152\007\153\015\155\016\154\017" +
    "\157\130\151\001\002\000\006\240\201\246\200\001\002" +
    "\000\004\051\177\001\002\000\004\046\uffe1\001\002\000" +
    "\022\006\152\007\153\015\155\016\154\017\157\047\174" +
    "\051\uffa1\130\151\001\002\000\004\241\202\001\002\000" +
    "\004\246\203\001\002\000\022\006\152\007\153\015\155" +
    "\016\154\017\157\047\174\051\uffa1\130\151\001\002\000" +
    "\004\051\uffa2\001\002\000\004\051\uffa4\001\002\000\004" +
    "\246\207\001\002\000\022\006\152\007\153\015\155\016" +
    "\154\017\157\047\174\051\uffa1\130\151\001\002\000\004" +
    "\051\uffa3\001\002\000\004\046\uffe0\001\002\000\010\045" +
    "\167\046\uffde\246\166\001\002\000\004\046\uffdf\001\002" +
    "\000\004\046\uffe6\001\002\000\050\040\101\041\066\042" +
    "\061\043\075\045\073\046\uffd6\052\077\053\070\054\076" +
    "\055\072\056\102\110\103\111\100\242\074\243\065\244" +
    "\062\245\071\246\104\247\067\001\002\000\004\046\217" +
    "\001\002\000\010\126\221\127\220\246\222\001\002\000" +
    "\004\051\uffb7\001\002\000\004\051\uffb8\001\002\000\006" +
    "\126\234\127\233\001\002\000\004\051\224\001\002\000" +
    "\004\114\225\001\002\000\050\006\uffee\007\uffee\012\015" +
    "\013\012\015\uffee\016\uffee\017\uffee\023\057\026\054\027" +
    "\056\033\051\075\uffc5\115\uffc5\120\011\121\013\122\uffc5" +
    "\123\052\130\uffee\246\uffee\001\002\000\010\075\231\115" +
    "\uffa5\122\227\001\002\000\004\115\uffa7\001\002\000\004" +
    "\115\232\001\002\000\004\115\uffa6\001\002\000\050\006" +
    "\uffbb\007\uffbb\012\uffbb\013\uffbb\015\uffbb\016\uffbb\017\uffbb" +
    "\023\uffbb\026\uffbb\027\uffbb\033\uffbb\075\uffbb\115\uffbb\120" +
    "\uffbb\121\uffbb\122\uffbb\123\uffbb\130\uffbb\246\uffbb\001\002" +
    "\000\004\051\uffb9\001\002\000\004\051\uffba\001\002\000" +
    "\004\046\uffe5\001\002\000\010\045\167\046\uffde\246\166" +
    "\001\002\000\004\046\uffe4\001\002\000\050\040\101\041" +
    "\066\042\061\043\075\045\073\051\uffd6\052\077\053\070" +
    "\054\076\055\072\056\102\110\103\111\100\242\074\243" +
    "\065\244\062\245\071\246\104\247\067\001\002\000\004" +
    "\051\242\001\002\000\004\114\243\001\002\000\050\006" +
    "\uffee\007\uffee\012\015\013\012\015\uffee\016\uffee\017\uffee" +
    "\023\057\026\054\027\056\033\051\075\uffc5\115\uffc5\120" +
    "\011\121\013\122\uffc5\123\052\130\uffee\246\uffee\001\002" +
    "\000\010\075\231\115\uffa5\122\227\001\002\000\004\115" +
    "\246\001\002\000\050\006\uffb6\007\uffb6\012\uffb6\013\uffb6" +
    "\015\uffb6\016\uffb6\017\uffb6\023\uffb6\026\uffb6\027\uffb6\033" +
    "\uffb6\075\uffb6\115\uffb6\120\uffb6\121\uffb6\122\uffb6\123\uffb6" +
    "\130\uffb6\246\uffb6\001\002\000\050\040\101\041\066\042" +
    "\061\043\075\045\073\051\uffd6\052\077\053\070\054\076" +
    "\055\072\056\102\110\103\111\100\242\074\243\065\244" +
    "\062\245\071\246\104\247\067\001\002\000\004\051\251" +
    "\001\002\000\004\114\252\001\002\000\010\036\253\115" +
    "\uffb1\125\255\001\002\000\004\132\264\001\002\000\004" +
    "\115\263\001\002\000\004\124\256\001\002\000\044\006" +
    "\uffee\007\uffee\012\015\013\012\015\uffee\016\uffee\017\uffee" +
    "\023\057\026\054\027\056\033\051\120\011\121\013\122" +
    "\uffc5\123\052\130\uffee\246\uffee\001\002\000\004\122\260" +
    "\001\002\000\004\046\261\001\002\000\010\036\253\115" +
    "\uffb1\125\255\001\002\000\004\115\uffb2\001\002\000\050" +
    "\006\uffb4\007\uffb4\012\uffb4\013\uffb4\015\uffb4\016\uffb4\017" +
    "\uffb4\023\uffb4\026\uffb4\027\uffb4\033\uffb4\075\uffb4\115\uffb4" +
    "\120\uffb4\121\uffb4\122\uffb4\123\uffb4\130\uffb4\246\uffb4\001" +
    "\002\000\024\073\275\132\uffa8\242\274\243\272\244\270" +
    "\245\267\246\271\247\273\250\266\001\002\000\004\132" +
    "\276\001\002\000\004\132\uffa9\001\002\000\004\132\uffad" +
    "\001\002\000\004\132\uffae\001\002\000\004\132\uffac\001" +
    "\002\000\004\132\uffaf\001\002\000\004\132\uffab\001\002" +
    "\000\004\132\uffb0\001\002\000\004\132\uffaa\001\002\000" +
    "\004\124\277\001\002\000\044\006\uffee\007\uffee\012\015" +
    "\013\012\015\uffee\016\uffee\017\uffee\023\057\026\054\027" +
    "\056\033\051\120\011\121\013\122\uffc5\123\052\130\uffee" +
    "\246\uffee\001\002\000\004\122\301\001\002\000\004\046" +
    "\302\001\002\000\010\036\253\115\uffb1\125\255\001\002" +
    "\000\004\115\uffb3\001\002\000\044\006\uffee\007\uffee\012" +
    "\015\013\012\015\uffee\016\uffee\017\uffee\023\057\026\054" +
    "\027\056\033\051\115\uffc5\120\011\121\013\123\052\130" +
    "\uffee\246\uffee\001\002\000\004\115\306\001\002\000\004" +
    "\026\307\001\002\000\004\050\310\001\002\000\050\040" +
    "\101\041\066\042\061\043\075\045\073\051\uffd6\052\077" +
    "\053\070\054\076\055\072\056\102\110\103\111\100\242" +
    "\074\243\065\244\062\245\071\246\104\247\067\001\002" +
    "\000\004\051\312\001\002\000\004\046\313\001\002\000" +
    "\050\006\uffb5\007\uffb5\012\uffb5\013\uffb5\015\uffb5\016\uffb5" +
    "\017\uffb5\023\uffb5\026\uffb5\027\uffb5\033\uffb5\075\uffb5\115" +
    "\uffb5\120\uffb5\121\uffb5\122\uffb5\123\uffb5\130\uffb5\246\uffb5" +
    "\001\002\000\032\006\uffee\007\uffee\012\023\013\012\015" +
    "\uffee\016\uffee\017\uffee\115\uffe9\120\011\121\013\130\uffee" +
    "\246\uffee\001\002\000\004\115\uffed\001\002\000\014\045" +
    "\167\046\uffde\047\236\050\323\246\166\001\002\000\004" +
    "\046\320\001\002\000\050\006\uffc9\007\uffc9\012\uffc9\013" +
    "\uffc9\015\uffc9\016\uffc9\017\uffc9\023\uffc9\026\uffc9\027\uffc9" +
    "\033\uffc9\075\uffc9\115\uffc9\120\uffc9\121\uffc9\122\uffc9\123" +
    "\uffc9\130\uffc9\246\uffc9\001\002\000\050\006\uffee\007\uffee" +
    "\012\015\013\012\015\uffee\016\uffee\017\uffee\023\057\026" +
    "\054\027\056\033\051\075\uffc5\115\uffc5\120\011\121\013" +
    "\122\uffc5\123\052\130\uffee\246\uffee\001\002\000\010\075" +
    "\uffc8\115\uffc8\122\uffc8\001\002\000\004\051\324\001\002" +
    "\000\004\046\325\001\002\000\010\075\uffc6\115\uffc6\122" +
    "\uffc6\001\002\000\010\075\uffc7\115\uffc7\122\uffc7\001\002" +
    "\000\004\046\343\001\002\000\004\246\331\001\002\000" +
    "\014\045\uffe8\046\uffe8\047\163\050\332\246\uffe8\001\002" +
    "\000\022\006\152\007\153\015\155\016\154\017\157\047" +
    "\174\051\uffa1\130\151\001\002\000\004\051\334\001\002" +
    "\000\004\114\uffec\001\002\000\004\114\336\001\002\000" +
    "\050\006\uffee\007\uffee\012\015\013\012\015\uffee\016\uffee" +
    "\017\uffee\023\057\026\054\027\056\033\051\075\uffc5\115" +
    "\uffc5\120\011\121\013\122\uffc5\123\052\130\uffee\246\uffee" +
    "\001\002\000\010\075\231\115\uffa5\122\227\001\002\000" +
    "\004\115\341\001\002\000\032\006\uffee\007\uffee\012\023" +
    "\013\012\015\uffee\016\uffee\017\uffee\115\uffe9\120\011\121" +
    "\013\130\uffee\246\uffee\001\002\000\004\115\uffeb\001\002" +
    "\000\032\006\uffee\007\uffee\012\023\013\012\015\uffee\016" +
    "\uffee\017\uffee\115\uffe9\120\011\121\013\130\uffee\246\uffee" +
    "\001\002\000\004\115\uffea\001\002\000\004\124\u0102\001" +
    "\002\000\004\124\375\001\002\000\004\124\370\001\002" +
    "\000\004\124\363\001\002\000\004\124\354\001\002\000" +
    "\004\114\353\001\002\000\004\002\ufffe\001\002\000\004" +
    "\240\355\001\002\000\004\114\356\001\002\000\004\115" +
    "\357\001\002\000\004\241\360\001\002\000\004\047\361" +
    "\001\002\000\016\114\uff48\134\351\135\347\136\350\137" +
    "\345\237\346\001\002\000\004\114\uff4c\001\002\000\004" +
    "\240\364\001\002\000\004\241\365\001\002\000\004\047" +
    "\366\001\002\000\016\114\uff48\134\351\135\347\136\350" +
    "\137\345\237\346\001\002\000\004\114\uff4a\001\002\000" +
    "\004\240\371\001\002\000\004\241\372\001\002\000\004" +
    "\047\373\001\002\000\016\114\uff48\134\351\135\347\136" +
    "\350\137\345\237\346\001\002\000\004\114\uff4b\001\002" +
    "\000\004\240\376\001\002\000\004\241\377\001\002\000" +
    "\004\047\u0100\001\002\000\016\114\uff48\134\351\135\347" +
    "\136\350\137\345\237\346\001\002\000\004\114\uff4d\001" +
    "\002\000\004\240\u0103\001\002\000\004\241\u0104\001\002" +
    "\000\004\047\u0105\001\002\000\016\114\uff48\134\351\135" +
    "\347\136\350\137\345\237\346\001\002\000\004\114\uff49" +
    "\001\002\000\004\002\001\001\002\000\010\141\uff93\142" +
    "\u0109\144\u010b\001\002\000\004\042\u01a8\001\002\000\004" +
    "\141\u01a7\001\002\000\004\042\u010c\001\002\000\044\145" +
    "\uff96\146\uff96\150\uff96\152\uff96\154\uff96\156\uff96\160\uff96" +
    "\164\uff96\166\uff96\170\uff96\172\uff96\174\uff96\176\uff96\200" +
    "\uff96\202\uff96\226\uff96\246\uff96\001\002\000\044\145\uff7e" +
    "\146\u0119\150\u0118\152\u0117\154\u0116\156\u0115\160\u0113\164" +
    "\u011c\166\u010e\170\u0111\172\u011a\174\u0110\176\u010f\200\u011d" +
    "\202\u011b\226\u0114\246\u0112\001\002\000\014\042\uff79\204" +
    "\u0124\220\u0123\221\u0127\225\u0125\001\002\000\014\042\uff79" +
    "\204\u0124\220\u0123\221\u0127\225\u0125\001\002\000\014\042" +
    "\uff79\204\u0124\220\u0123\221\u0127\225\u0125\001\002\000\014" +
    "\042\uff79\204\u0124\220\u0123\221\u0127\225\u0125\001\002\000" +
    "\074\145\uff7e\146\u0119\147\uff7e\150\u0118\151\uff7e\152\u0117" +
    "\153\uff7e\154\u0116\155\uff7e\156\u0115\157\uff7e\160\u0113\161" +
    "\uff7e\164\u011c\165\uff7e\166\u010e\167\uff7e\170\u0111\171\uff7e" +
    "\172\u011a\173\uff7e\174\u0110\175\uff7e\176\u010f\177\uff7e\200" +
    "\u011d\202\u011b\226\u0114\246\u0112\001\002\000\014\042\uff79" +
    "\204\u0124\220\u0123\221\u0127\225\u0125\001\002\000\020\006" +
    "\u016c\007\u0167\015\u0168\016\u0165\017\u0169\236\uff5c\246\u016a" +
    "\001\002\000\014\042\uff79\204\u0124\220\u0123\221\u0127\225" +
    "\u0125\001\002\000\014\042\uff79\204\u0124\220\u0123\221\u0127" +
    "\225\u0125\001\002\000\014\042\uff79\204\u0124\220\u0123\221" +
    "\u0127\225\u0125\001\002\000\014\042\uff79\204\u0124\220\u0123" +
    "\221\u0127\225\u0125\001\002\000\014\042\uff79\204\u0124\220" +
    "\u0123\221\u0127\225\u0125\001\002\000\014\042\uff79\204\u0124" +
    "\220\u0123\221\u0127\225\u0125\001\002\000\074\145\uff7e\146" +
    "\u0119\147\uff7e\150\u0118\151\uff7e\152\u0117\153\uff7e\154\u0116" +
    "\155\uff7e\156\u0115\157\uff7e\160\u0113\161\uff7e\164\u011c\165" +
    "\uff7e\166\u010e\167\uff7e\170\u0111\171\uff7e\172\u011a\173\uff7e" +
    "\174\u0110\175\uff7e\176\u010f\177\uff7e\200\u011d\202\u011b\226" +
    "\u0114\246\u0112\001\002\000\014\042\uff79\204\u0124\220\u0123" +
    "\221\u0127\225\u0125\001\002\000\074\145\uff7e\146\u0119\147" +
    "\uff7e\150\u0118\151\uff7e\152\u0117\153\uff7e\154\u0116\155\uff7e" +
    "\156\u0115\157\uff7e\160\u0113\161\uff7e\164\u011c\165\uff7e\166" +
    "\u010e\167\uff7e\170\u0111\171\uff7e\172\u011a\173\uff7e\174\u0110" +
    "\175\uff7e\176\u010f\177\uff7e\200\u011d\202\u011b\226\u0114\246" +
    "\u0112\001\002\000\004\145\u011f\001\002\000\012\141\uff95" +
    "\142\uff95\143\uff95\144\uff95\001\002\000\012\141\uff93\142" +
    "\u0109\143\uff93\144\u010b\001\002\000\006\141\uff94\143\uff94" +
    "\001\002\000\034\145\uff85\147\uff85\151\uff85\153\uff85\155" +
    "\uff85\157\uff85\161\uff85\165\uff85\167\uff85\171\uff85\173\uff85" +
    "\175\uff85\177\uff85\001\002\000\004\045\u0142\001\002\000" +
    "\004\045\u0137\001\002\000\004\045\u0133\001\002\000\004" +
    "\042\u012f\001\002\000\004\045\u0128\001\002\000\004\206" +
    "\u0129\001\002\000\012\206\uff6d\222\u012b\223\u012a\224\u012c" +
    "\001\002\000\004\206\uff6f\001\002\000\004\206\uff70\001" +
    "\002\000\004\206\uff6e\001\002\000\004\206\u012e\001\002" +
    "\000\004\042\uff7b\001\002\000\044\146\u0119\150\u0118\152" +
    "\u0117\154\u0116\156\u0115\160\u0113\164\u011c\165\uff7e\166\u010e" +
    "\170\u0111\172\u011a\174\u0110\176\u010f\200\u011d\202\u011b\226" +
    "\u0114\246\u0112\001\002\000\004\165\u0131\001\002\000\074" +
    "\145\uff7e\146\u0119\147\uff7e\150\u0118\151\uff7e\152\u0117\153" +
    "\uff7e\154\u0116\155\uff7e\156\u0115\157\uff7e\160\u0113\161\uff7e" +
    "\164\u011c\165\uff7e\166\u010e\167\uff7e\170\u0111\171\uff7e\172" +
    "\u011a\173\uff7e\174\u0110\175\uff7e\176\u010f\177\uff7e\200\u011d" +
    "\202\u011b\226\u0114\246\u0112\001\002\000\034\145\uff83\147" +
    "\uff83\151\uff83\153\uff83\155\uff83\157\uff83\161\uff83\165\uff83" +
    "\167\uff83\171\uff83\173\uff83\175\uff83\177\uff83\001\002\000" +
    "\004\206\u0134\001\002\000\004\206\uff6c\001\002\000\004" +
    "\206\u0136\001\002\000\004\042\uff7a\001\002\000\004\206" +
    "\u0138\001\002\000\022\206\uff71\211\u013f\212\u0140\213\u013e" +
    "\214\u013b\215\u0139\216\u013c\217\u013d\001\002\000\004\206" +
    "\uff74\001\002\000\004\206\u0141\001\002\000\004\206\uff75" +
    "\001\002\000\004\206\uff73\001\002\000\004\206\uff72\001" +
    "\002\000\004\206\uff76\001\002\000\004\206\uff78\001\002" +
    "\000\004\206\uff77\001\002\000\004\042\uff7d\001\002\000" +
    "\004\206\u0143\001\002\000\022\206\uff71\211\u013f\212\u0140" +
    "\213\u013e\214\u013b\215\u0139\216\u013c\217\u013d\001\002\000" +
    "\004\206\u0145\001\002\000\004\042\uff7c\001\002\000\034" +
    "\145\uff84\147\uff84\151\uff84\153\uff84\155\uff84\157\uff84\161" +
    "\uff84\165\uff84\167\uff84\171\uff84\173\uff84\175\uff84\177\uff84" +
    "\001\002\000\004\042\u0148\001\002\000\044\146\u0119\150" +
    "\u0118\152\u0117\154\u0116\156\u0115\160\u0113\164\u011c\166\u010e" +
    "\170\u0111\172\u011a\173\uff7e\174\u0110\176\u010f\200\u011d\202" +
    "\u011b\226\u0114\246\u0112\001\002\000\004\173\u014a\001\002" +
    "\000\074\145\uff7e\146\u0119\147\uff7e\150\u0118\151\uff7e\152" +
    "\u0117\153\uff7e\154\u0116\155\uff7e\156\u0115\157\uff7e\160\u0113" +
    "\161\uff7e\164\u011c\165\uff7e\166\u010e\167\uff7e\170\u0111\171" +
    "\uff7e\172\u011a\173\uff7e\174\u0110\175\uff7e\176\u010f\177\uff7e" +
    "\200\u011d\202\u011b\226\u0114\246\u0112\001\002\000\034\145" +
    "\uff82\147\uff82\151\uff82\153\uff82\155\uff82\157\uff82\161\uff82" +
    "\165\uff82\167\uff82\171\uff82\173\uff82\175\uff82\177\uff82\001" +
    "\002\000\004\042\u014d\001\002\000\044\146\u0119\147\uff7e" +
    "\150\u0118\152\u0117\154\u0116\156\u0115\160\u0113\164\u011c\166" +
    "\u010e\170\u0111\172\u011a\174\u0110\176\u010f\200\u011d\202\u011b" +
    "\226\u0114\246\u0112\001\002\000\004\147\u014f\001\002\000" +
    "\074\145\uff7e\146\u0119\147\uff7e\150\u0118\151\uff7e\152\u0117" +
    "\153\uff7e\154\u0116\155\uff7e\156\u0115\157\uff7e\160\u0113\161" +
    "\uff7e\164\u011c\165\uff7e\166\u010e\167\uff7e\170\u0111\171\uff7e" +
    "\172\u011a\173\uff7e\174\u0110\175\uff7e\176\u010f\177\uff7e\200" +
    "\u011d\202\u011b\226\u0114\246\u0112\001\002\000\034\145\uff8d" +
    "\147\uff8d\151\uff8d\153\uff8d\155\uff8d\157\uff8d\161\uff8d\165" +
    "\uff8d\167\uff8d\171\uff8d\173\uff8d\175\uff8d\177\uff8d\001\002" +
    "\000\004\042\u0152\001\002\000\044\146\u0119\150\u0118\151" +
    "\uff7e\152\u0117\154\u0116\156\u0115\160\u0113\164\u011c\166\u010e" +
    "\170\u0111\172\u011a\174\u0110\176\u010f\200\u011d\202\u011b\226" +
    "\u0114\246\u0112\001\002\000\004\151\u0154\001\002\000\074" +
    "\145\uff7e\146\u0119\147\uff7e\150\u0118\151\uff7e\152\u0117\153" +
    "\uff7e\154\u0116\155\uff7e\156\u0115\157\uff7e\160\u0113\161\uff7e" +
    "\164\u011c\165\uff7e\166\u010e\167\uff7e\170\u0111\171\uff7e\172" +
    "\u011a\173\uff7e\174\u0110\175\uff7e\176\u010f\177\uff7e\200\u011d" +
    "\202\u011b\226\u0114\246\u0112\001\002\000\034\145\uff8c\147" +
    "\uff8c\151\uff8c\153\uff8c\155\uff8c\157\uff8c\161\uff8c\165\uff8c" +
    "\167\uff8c\171\uff8c\173\uff8c\175\uff8c\177\uff8c\001\002\000" +
    "\004\042\u0157\001\002\000\044\146\u0119\150\u0118\152\u0117" +
    "\153\uff7e\154\u0116\156\u0115\160\u0113\164\u011c\166\u010e\170" +
    "\u0111\172\u011a\174\u0110\176\u010f\200\u011d\202\u011b\226\u0114" +
    "\246\u0112\001\002\000\004\153\u0159\001\002\000\074\145" +
    "\uff7e\146\u0119\147\uff7e\150\u0118\151\uff7e\152\u0117\153\uff7e" +
    "\154\u0116\155\uff7e\156\u0115\157\uff7e\160\u0113\161\uff7e\164" +
    "\u011c\165\uff7e\166\u010e\167\uff7e\170\u0111\171\uff7e\172\u011a" +
    "\173\uff7e\174\u0110\175\uff7e\176\u010f\177\uff7e\200\u011d\202" +
    "\u011b\226\u0114\246\u0112\001\002\000\034\145\uff8b\147\uff8b" +
    "\151\uff8b\153\uff8b\155\uff8b\157\uff8b\161\uff8b\165\uff8b\167" +
    "\uff8b\171\uff8b\173\uff8b\175\uff8b\177\uff8b\001\002\000\004" +
    "\042\u015c\001\002\000\044\146\u0119\150\u0118\152\u0117\154" +
    "\u0116\155\uff7e\156\u0115\160\u0113\164\u011c\166\u010e\170\u0111" +
    "\172\u011a\174\u0110\176\u010f\200\u011d\202\u011b\226\u0114\246" +
    "\u0112\001\002\000\004\155\u015e\001\002\000\074\145\uff7e" +
    "\146\u0119\147\uff7e\150\u0118\151\uff7e\152\u0117\153\uff7e\154" +
    "\u0116\155\uff7e\156\u0115\157\uff7e\160\u0113\161\uff7e\164\u011c" +
    "\165\uff7e\166\u010e\167\uff7e\170\u0111\171\uff7e\172\u011a\173" +
    "\uff7e\174\u0110\175\uff7e\176\u010f\177\uff7e\200\u011d\202\u011b" +
    "\226\u0114\246\u0112\001\002\000\034\145\uff8a\147\uff8a\151" +
    "\uff8a\153\uff8a\155\uff8a\157\uff8a\161\uff8a\165\uff8a\167\uff8a" +
    "\171\uff8a\173\uff8a\175\uff8a\177\uff8a\001\002\000\004\042" +
    "\u0161\001\002\000\044\146\u0119\150\u0118\152\u0117\154\u0116" +
    "\156\u0115\157\uff7e\160\u0113\164\u011c\166\u010e\170\u0111\172" +
    "\u011a\174\u0110\176\u010f\200\u011d\202\u011b\226\u0114\246\u0112" +
    "\001\002\000\004\157\u0163\001\002\000\074\145\uff7e\146" +
    "\u0119\147\uff7e\150\u0118\151\uff7e\152\u0117\153\uff7e\154\u0116" +
    "\155\uff7e\156\u0115\157\uff7e\160\u0113\161\uff7e\164\u011c\165" +
    "\uff7e\166\u010e\167\uff7e\170\u0111\171\uff7e\172\u011a\173\uff7e" +
    "\174\u0110\175\uff7e\176\u010f\177\uff7e\200\u011d\202\u011b\226" +
    "\u0114\246\u0112\001\002\000\034\145\uff89\147\uff89\151\uff89" +
    "\153\uff89\155\uff89\157\uff89\161\uff89\165\uff89\167\uff89\171" +
    "\uff89\173\uff89\175\uff89\177\uff89\001\002\000\004\246\uff68" +
    "\001\002\000\004\236\u018c\001\002\000\004\246\uff69\001" +
    "\002\000\004\246\uff6a\001\002\000\004\246\uff67\001\002" +
    "\000\004\246\uff66\001\002\000\004\246\u016d\001\002\000" +
    "\004\246\uff6b\001\002\000\036\045\u017b\046\uff4e\050\u016f" +
    "\052\u017a\053\u0176\054\u0171\055\u016e\056\u0179\242\u0178\243" +
    "\u0173\244\u0172\245\u0170\246\u0174\247\u0177\001\002\000\040" +
    "\045\u017b\046\uff4e\050\u016f\051\uff4e\052\u017a\053\u0176\054" +
    "\u0171\055\u016e\056\u0179\242\u0178\243\u0173\244\u0172\245\u0170" +
    "\246\u0174\247\u0177\001\002\000\036\045\u017b\050\u016f\051" +
    "\uff4e\052\u017a\053\u0176\054\u0171\055\u016e\056\u0179\242\u0178" +
    "\243\u0173\244\u0172\245\u0170\246\u0174\247\u0177\001\002\000" +
    "\040\045\u017b\046\uff4e\050\u016f\051\uff4e\052\u017a\053\u0176" +
    "\054\u0171\055\u016e\056\u0179\242\u0178\243\u0173\244\u0172\245" +
    "\u0170\246\u0174\247\u0177\001\002\000\040\045\u017b\046\uff4e" +
    "\050\u016f\051\uff4e\052\u017a\053\u0176\054\u0171\055\u016e\056" +
    "\u0179\242\u0178\243\u0173\244\u0172\245\u0170\246\u0174\247\u0177" +
    "\001\002\000\040\045\u017b\046\uff4e\050\u016f\051\uff4e\052" +
    "\u017a\053\u0176\054\u0171\055\u016e\056\u0179\242\u0178\243\u0173" +
    "\244\u0172\245\u0170\246\u0174\247\u0177\001\002\000\040\045" +
    "\u017b\046\uff4e\050\u016f\051\uff4e\052\u017a\053\u0176\054\u0171" +
    "\055\u016e\056\u0179\242\u0178\243\u0173\244\u0172\245\u0170\246" +
    "\u0174\247\u0177\001\002\000\040\045\u017b\046\uff4e\050\u016f" +
    "\051\uff4e\052\u017a\053\u0176\054\u0171\055\u016e\056\u0179\242" +
    "\u0178\243\u0173\244\u0172\245\u0170\246\u0174\247\u0177\001\002" +
    "\000\004\046\u0182\001\002\000\040\045\u017b\046\uff4e\050" +
    "\u016f\051\uff4e\052\u017a\053\u0176\054\u0171\055\u016e\056\u0179" +
    "\242\u0178\243\u0173\244\u0172\245\u0170\246\u0174\247\u0177\001" +
    "\002\000\040\045\u017b\046\uff4e\050\u016f\051\uff4e\052\u017a" +
    "\053\u0176\054\u0171\055\u016e\056\u0179\242\u0178\243\u0173\244" +
    "\u0172\245\u0170\246\u0174\247\u0177\001\002\000\040\045\u017b" +
    "\046\uff4e\050\u016f\051\uff4e\052\u017a\053\u0176\054\u0171\055" +
    "\u016e\056\u0179\242\u0178\243\u0173\244\u0172\245\u0170\246\u0174" +
    "\247\u0177\001\002\000\040\045\u017b\046\uff4e\050\u016f\051" +
    "\uff4e\052\u017a\053\u0176\054\u0171\055\u016e\056\u0179\242\u0178" +
    "\243\u0173\244\u0172\245\u0170\246\u0174\247\u0177\001\002\000" +
    "\040\045\u017b\046\uff4e\050\u016f\051\uff4e\052\u017a\053\u0176" +
    "\054\u0171\055\u016e\056\u0179\242\u0178\243\u0173\244\u0172\245" +
    "\u0170\246\u0174\247\u0177\001\002\000\040\045\u017b\046\uff4e" +
    "\050\u016f\051\uff4e\052\u017a\053\u0176\054\u0171\055\u016e\056" +
    "\u0179\242\u0178\243\u0173\244\u0172\245\u0170\246\u0174\247\u0177" +
    "\001\002\000\006\046\uff5b\051\uff5b\001\002\000\006\046" +
    "\uff54\051\uff54\001\002\000\006\046\uff50\051\uff50\001\002" +
    "\000\006\046\uff5a\051\uff5a\001\002\000\006\046\uff56\051" +
    "\uff56\001\002\000\006\046\uff53\051\uff53\001\002\000\004" +
    "\236\uff5d\001\002\000\006\046\uff55\051\uff55\001\002\000" +
    "\006\046\uff59\051\uff59\001\002\000\006\046\uff58\051\uff58" +
    "\001\002\000\006\046\uff52\051\uff52\001\002\000\006\046" +
    "\uff57\051\uff57\001\002\000\004\051\u0189\001\002\000\040" +
    "\045\u017b\046\uff4e\050\u016f\051\uff4e\052\u017a\053\u0176\054" +
    "\u0171\055\u016e\056\u0179\242\u0178\243\u0173\244\u0172\245\u0170" +
    "\246\u0174\247\u0177\001\002\000\006\046\uff4f\051\uff4f\001" +
    "\002\000\006\046\uff51\051\uff51\001\002\000\034\145\uff7f" +
    "\147\uff7f\151\uff7f\153\uff7f\155\uff7f\157\uff7f\161\uff7f\165" +
    "\uff7f\167\uff7f\171\uff7f\173\uff7f\175\uff7f\177\uff7f\001\002" +
    "\000\004\042\u018e\001\002\000\044\146\u0119\150\u0118\152" +
    "\u0117\154\u0116\156\u0115\160\u0113\161\uff7e\164\u011c\166\u010e" +
    "\170\u0111\172\u011a\174\u0110\176\u010f\200\u011d\202\u011b\226" +
    "\u0114\246\u0112\001\002\000\004\161\u0190\001\002\000\074" +
    "\145\uff7e\146\u0119\147\uff7e\150\u0118\151\uff7e\152\u0117\153" +
    "\uff7e\154\u0116\155\uff7e\156\u0115\157\uff7e\160\u0113\161\uff7e" +
    "\164\u011c\165\uff7e\166\u010e\167\uff7e\170\u0111\171\uff7e\172" +
    "\u011a\173\uff7e\174\u0110\175\uff7e\176\u010f\177\uff7e\200\u011d" +
    "\202\u011b\226\u0114\246\u0112\001\002\000\034\145\uff88\147" +
    "\uff88\151\uff88\153\uff88\155\uff88\157\uff88\161\uff88\165\uff88" +
    "\167\uff88\171\uff88\173\uff88\175\uff88\177\uff88\001\002\000" +
    "\034\145\uff8e\147\uff8e\151\uff8e\153\uff8e\155\uff8e\157\uff8e" +
    "\161\uff8e\165\uff8e\167\uff8e\171\uff8e\173\uff8e\175\uff8e\177" +
    "\uff8e\001\002\000\004\042\u0194\001\002\000\044\146\u0119" +
    "\150\u0118\152\u0117\154\u0116\156\u0115\160\u0113\164\u011c\166" +
    "\u010e\170\u0111\171\uff7e\172\u011a\174\u0110\176\u010f\200\u011d" +
    "\202\u011b\226\u0114\246\u0112\001\002\000\004\171\u0196\001" +
    "\002\000\074\145\uff7e\146\u0119\147\uff7e\150\u0118\151\uff7e" +
    "\152\u0117\153\uff7e\154\u0116\155\uff7e\156\u0115\157\uff7e\160" +
    "\u0113\161\uff7e\164\u011c\165\uff7e\166\u010e\167\uff7e\170\u0111" +
    "\171\uff7e\172\u011a\173\uff7e\174\u0110\175\uff7e\176\u010f\177" +
    "\uff7e\200\u011d\202\u011b\226\u0114\246\u0112\001\002\000\034" +
    "\145\uff80\147\uff80\151\uff80\153\uff80\155\uff80\157\uff80\161" +
    "\uff80\165\uff80\167\uff80\171\uff80\173\uff80\175\uff80\177\uff80" +
    "\001\002\000\004\042\u0199\001\002\000\044\146\u0119\150" +
    "\u0118\152\u0117\154\u0116\156\u0115\160\u0113\164\u011c\166\u010e" +
    "\170\u0111\172\u011a\174\u0110\175\uff7e\176\u010f\200\u011d\202" +
    "\u011b\226\u0114\246\u0112\001\002\000\004\175\u019b\001\002" +
    "\000\074\145\uff7e\146\u0119\147\uff7e\150\u0118\151\uff7e\152" +
    "\u0117\153\uff7e\154\u0116\155\uff7e\156\u0115\157\uff7e\160\u0113" +
    "\161\uff7e\164\u011c\165\uff7e\166\u010e\167\uff7e\170\u0111\171" +
    "\uff7e\172\u011a\173\uff7e\174\u0110\175\uff7e\176\u010f\177\uff7e" +
    "\200\u011d\202\u011b\226\u0114\246\u0112\001\002\000\034\145" +
    "\uff86\147\uff86\151\uff86\153\uff86\155\uff86\157\uff86\161\uff86" +
    "\165\uff86\167\uff86\171\uff86\173\uff86\175\uff86\177\uff86\001" +
    "\002\000\004\042\u019e\001\002\000\044\146\u0119\150\u0118" +
    "\152\u0117\154\u0116\156\u0115\160\u0113\164\u011c\166\u010e\170" +
    "\u0111\172\u011a\174\u0110\176\u010f\177\uff7e\200\u011d\202\u011b" +
    "\226\u0114\246\u0112\001\002\000\004\177\u01a0\001\002\000" +
    "\074\145\uff7e\146\u0119\147\uff7e\150\u0118\151\uff7e\152\u0117" +
    "\153\uff7e\154\u0116\155\uff7e\156\u0115\157\uff7e\160\u0113\161" +
    "\uff7e\164\u011c\165\uff7e\166\u010e\167\uff7e\170\u0111\171\uff7e" +
    "\172\u011a\173\uff7e\174\u0110\175\uff7e\176\u010f\177\uff7e\200" +
    "\u011d\202\u011b\226\u0114\246\u0112\001\002\000\034\145\uff87" +
    "\147\uff87\151\uff87\153\uff87\155\uff87\157\uff87\161\uff87\165" +
    "\uff87\167\uff87\171\uff87\173\uff87\175\uff87\177\uff87\001\002" +
    "\000\004\042\u01a3\001\002\000\044\146\u0119\150\u0118\152" +
    "\u0117\154\u0116\156\u0115\160\u0113\164\u011c\166\u010e\167\uff7e" +
    "\170\u0111\172\u011a\174\u0110\176\u010f\200\u011d\202\u011b\226" +
    "\u0114\246\u0112\001\002\000\004\167\u01a5\001\002\000\074" +
    "\145\uff7e\146\u0119\147\uff7e\150\u0118\151\uff7e\152\u0117\153" +
    "\uff7e\154\u0116\155\uff7e\156\u0115\157\uff7e\160\u0113\161\uff7e" +
    "\164\u011c\165\uff7e\166\u010e\167\uff7e\170\u0111\171\uff7e\172" +
    "\u011a\173\uff7e\174\u0110\175\uff7e\176\u010f\177\uff7e\200\u011d" +
    "\202\u011b\226\u0114\246\u0112\001\002\000\034\145\uff81\147" +
    "\uff81\151\uff81\153\uff81\155\uff81\157\uff81\161\uff81\165\uff81" +
    "\167\uff81\171\uff81\173\uff81\175\uff81\177\uff81\001\002\000" +
    "\004\002\uffff\001\002\000\006\143\uff99\162\uff99\001\002" +
    "\000\006\143\uff8f\162\u01ab\001\002\000\004\143\u01bb\001" +
    "\002\000\004\042\u01ac\001\002\000\022\163\uff92\226\uff92" +
    "\242\uff92\243\uff92\244\uff92\245\uff92\246\uff92\247\uff92\001" +
    "\002\000\022\163\uff5e\226\u01ae\242\u01b1\243\u01af\244\u01b0" +
    "\245\u01b2\246\u01b3\247\u01b5\001\002\000\020\006\u016c\007" +
    "\u0167\015\u0168\016\u0165\017\u0169\236\uff5c\246\u016a\001\002" +
    "\000\004\163\uff63\001\002\000\004\163\uff62\001\002\000" +
    "\004\163\uff64\001\002\000\004\163\uff61\001\002\000\004" +
    "\163\uff65\001\002\000\004\163\u01b6\001\002\000\004\163" +
    "\uff60\001\002\000\010\142\uff91\143\uff91\144\uff91\001\002" +
    "\000\010\142\u0109\143\uff93\144\u010b\001\002\000\004\143" +
    "\uff90\001\002\000\004\236\u01ba\001\002\000\004\163\uff5f" +
    "\001\002\000\012\141\uff98\142\uff98\143\uff98\144\uff98\001" +
    "\002\000\012\141\uff93\142\u0109\143\uff93\144\u010b\001\002" +
    "\000\006\141\uff97\143\uff97\001\002\000\004\231\u01bf\001" +
    "\002\000\010\046\ufff7\054\u01c1\246\u01c0\001\002\000\006" +
    "\046\ufff9\231\u01c5\001\002\000\004\046\ufff8\001\002\000" +
    "\004\046\u01c3\001\002\000\020\002\ufffb\012\ufffb\013\ufffb" +
    "\112\004\113\ufffb\120\ufffb\121\ufffb\001\002\000\016\002" +
    "\ufffc\012\ufffc\013\ufffc\113\ufffc\120\ufffc\121\ufffc\001\002" +
    "\000\010\046\ufff7\054\u01c1\246\u01c0\001\002\000\004\046" +
    "\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01c4\000\006\002\005\003\007\001\001\000\002\001" +
    "\001\000\004\123\u0107\001\001\000\002\001\001\000\004" +
    "\122\351\001\001\000\006\004\015\005\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\021\007\023\001\001" +
    "\000\006\015\327\073\326\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\124\025\001\001\000\004\003\026" +
    "\001\001\000\004\125\027\001\001\000\006\004\030\005" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\005\044\022\046\024\043\045\052\046\045\047" +
    "\042\050\047\051\054\001\001\000\002\001\001\000\022" +
    "\005\044\022\325\024\043\045\052\046\045\047\042\050" +
    "\047\051\054\001\001\000\006\015\160\073\316\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\074\063\100\062\001\001\000\006\074\145" +
    "\100\062\001\001\000\006\074\144\100\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\074\123\100\062" +
    "\001\001\000\006\074\122\100\062\001\001\000\006\074" +
    "\121\100\062\001\001\000\006\074\120\100\062\001\001" +
    "\000\006\074\117\100\062\001\001\000\006\074\116\100" +
    "\062\001\001\000\006\074\115\100\062\001\001\000\006" +
    "\074\114\100\062\001\001\000\006\074\113\100\062\001" +
    "\001\000\006\074\112\100\062\001\001\000\006\074\111" +
    "\100\062\001\001\000\006\074\110\100\062\001\001\000" +
    "\006\074\107\100\062\001\001\000\006\074\106\100\062" +
    "\001\001\000\006\074\105\100\062\001\001\000\006\074" +
    "\104\100\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\005\044\022" +
    "\126\024\043\045\052\046\045\047\042\050\047\051\054" +
    "\001\001\000\002\001\001\000\004\075\130\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\005\044\022\136\024" +
    "\043\045\052\046\045\047\042\050\047\051\054\001\001" +
    "\000\002\001\001\000\004\075\140\001\001\000\002\001" +
    "\001\000\022\005\044\022\142\024\043\045\052\046\045" +
    "\047\042\050\047\051\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\147\001\001\000\006\015\160\073\157\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\234\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\127\163\001\001\000\004\032\213\001\001\000\004\032" +
    "\164\001\001\000\002\001\001\000\004\032\210\001\001" +
    "\000\006\074\167\100\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\174\021\175" +
    "\001\001\000\004\015\205\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\174\021\204" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\015" +
    "\174\021\203\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\174\021\207\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\212\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\074\215\100" +
    "\062\001\001\000\002\001\001\000\004\063\222\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\005\044\022\225" +
    "\024\043\045\052\046\045\047\042\050\047\051\054\001" +
    "\001\000\004\076\227\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\236" +
    "\001\001\000\002\001\001\000\006\074\240\100\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\005\044" +
    "\022\243\024\043\045\052\046\045\047\042\050\047\051" +
    "\054\001\001\000\004\076\244\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\074\247\100\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\064\253\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\005\044\022\256\024\043\045\052\046\045\047\042" +
    "\050\047\051\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\064\261\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\264\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\005\044" +
    "\022\277\024\043\045\052\046\045\047\042\050\047\051" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\064\302\001\001\000\002\001\001\000\022\005\044\022" +
    "\304\024\043\045\052\046\045\047\042\050\047\051\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\074\310\100\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\021\007" +
    "\314\001\001\000\002\001\001\000\004\032\234\001\001" +
    "\000\002\001\001\000\004\130\320\001\001\000\022\005" +
    "\044\022\321\024\043\045\052\046\045\047\042\050\047" +
    "\051\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\127\163\001\001\000" +
    "\006\015\174\021\332\001\001\000\002\001\001\000\004" +
    "\126\334\001\001\000\002\001\001\000\022\005\044\022" +
    "\336\024\043\045\052\046\045\047\042\050\047\051\054" +
    "\001\001\000\004\076\337\001\001\000\002\001\001\000" +
    "\006\005\021\007\341\001\001\000\002\001\001\000\006" +
    "\005\021\007\343\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\122\361\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\122\366\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\122\373\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\122\u0100\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\122\u0105\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\102\u0109\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\133\u010c" +
    "\001\001\000\004\105\u011d\001\001\000\004\106\u01a1\001" +
    "\001\000\004\106\u019c\001\001\000\004\106\u0197\001\001" +
    "\000\004\106\u0192\001\001\000\004\105\u0191\001\001\000" +
    "\004\106\u018c\001\001\000\006\112\u0165\120\u016a\001\001" +
    "\000\004\106\u015f\001\001\000\004\106\u015a\001\001\000" +
    "\004\106\u0155\001\001\000\004\106\u0150\001\001\000\004" +
    "\106\u014b\001\001\000\004\106\u0146\001\001\000\004\105" +
    "\u0145\001\001\000\004\106\u0125\001\001\000\004\105\u0121" +
    "\001\001\000\002\001\001\000\004\134\u011f\001\001\000" +
    "\004\102\u0120\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\110\u012c\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\105\u012f\001\001\000\002\001\001\000\004\105\u0131\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\111\u0134" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\107\u0139\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\107\u0143\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\105\u0148\001\001\000\002\001" +
    "\001\000\004\105\u014a\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\105\u014d\001\001\000\002\001\001\000" +
    "\004\105\u014f\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\105\u0152\001\001\000\002\001\001\000\004\105" +
    "\u0154\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\105\u0157\001\001\000\002\001\001\000\004\105\u0159\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\105\u015c" +
    "\001\001\000\002\001\001\000\004\105\u015e\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\105\u0161\001\001" +
    "\000\002\001\001\000\004\105\u0163\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\113\u0174\001\001" +
    "\000\004\113\u018a\001\001\000\004\113\u0187\001\001\000" +
    "\004\113\u0186\001\001\000\004\113\u0185\001\001\000\004" +
    "\113\u0184\001\001\000\004\113\u0183\001\001\000\004\113" +
    "\u0182\001\001\000\002\001\001\000\004\113\u0180\001\001" +
    "\000\004\113\u017f\001\001\000\004\113\u017e\001\001\000" +
    "\004\113\u017d\001\001\000\004\113\u017c\001\001\000\004" +
    "\113\u017b\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\113\u0189\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\105\u018e\001\001\000\002\001\001\000\004\105" +
    "\u0190\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\105\u0194\001\001\000\002\001\001\000" +
    "\004\105\u0196\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\105\u0199\001\001\000\002\001\001\000\004\105" +
    "\u019b\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\105\u019e\001\001\000\002\001\001\000\004\105\u01a0\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\105\u01a3" +
    "\001\001\000\002\001\001\000\004\105\u01a5\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\131\u01a8\001\001" +
    "\000\004\103\u01a9\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\135\u01ac\001\001\000\004\104\u01b3\001\001" +
    "\000\006\112\u01b8\120\u016a\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\136" +
    "\u01b6\001\001\000\004\102\u01b7\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\132\u01bb\001" +
    "\001\000\004\102\u01bc\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\071\u01c1\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\u01c3\001\001" +
    "\000\002\001\001\000\004\071\u01c5\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




public String ggg(){
return action_obj.salida;
}

public String ggg2(){
return action_obj.b;
}

public String rrr(){
return action_obj.error;
}

/**Metodo al que se llama automáticamente ante algún error sintactico.*/
public void syntax_error(Symbol s){
    System.err.println("Error en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "
    +s.value + " no reconocido." );
    }

/**Metodo al que se llama en el momento en que ya no es posible una recuperación de
errores.*/
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
    System.err.println("Error en la Línea " + (s.right+1)+ "Columna "+(s.left+1)+". Identificador " +
    s.value + " no reconocido.");    
    }

/*public Nodo getRaiz(){
    return action_obj.raiz;
}*/

public ArrayList imp(){
    CUP$Sintactico$actions csa = new CUP$Sintactico$actions(this);
    ArrayList txt = new ArrayList(csa.al);
    return txt;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {


    //Nodo raiz=null;
    ArrayList al = new ArrayList();
    gg.server Interfaz = new gg.server();

public String salida = "{ \n \n";
public String error ="";
public double a=0;
public int p=0;
public String b="";
public String c="";
public String d="";
public int lectura=0;
ArrayList<String> relax = new ArrayList<String>();
ArrayList<String> relax2 = new ArrayList<String>();
ArrayList<String> relax3 = new ArrayList<String>();
Iterator<String> rela=relax.iterator();
int ja=1;
int jaa=1;
int jaaa=1;
public int y=0;
String copa, copa2;
double pc,pc1,pv,pv1,pm,pm1 =0;
double tc,tv,tm=0;

  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // REPO ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("REPO",80, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // REPO ::= jcome dosp llamaA llamaC coma REPO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("REPO",80, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // REPO ::= jmeto dosp llamaA llamaC coma REPO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("REPO",80, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // REPO ::= jvara dosp llamaA llamaC coma REPO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("REPO",80, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // REPO ::= jclas dosp llamaA parentA parentC llamaC coma REPO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("REPO",80, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // REPO ::= scoree dosp llamaA llamaC coma REPO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("REPO",80, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // ASIGVAR ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGVAR",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // ASIGVAR ::= parentesisA ASIGVAR parentesisC ASIGVAR 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGVAR",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // ASIGVAR ::= mod ASIGVAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGVAR",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // ASIGVAR ::= div ASIGVAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGVAR",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // ASIGVAR ::= mul ASIGVAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGVAR",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // ASIGVAR ::= menos ASIGVAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGVAR",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // ASIGVAR ::= mas ASIGVAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGVAR",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // ASIGVAR ::= iden ASIGVAR 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String ids = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGVAR",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // ASIGVAR ::= caracter ASIGVAR 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGVAR",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // ASIGVAR ::= bool ASIGVAR 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGVAR",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // ASIGVAR ::= cadena ASIGVAR 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGVAR",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // ASIGVAR ::= decimal ASIGVAR 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGVAR",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // ASIGVAR ::= entero ASIGVAR 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGVAR",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // ASIGVAR ::= igual ASIGVAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGVAR",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // CUERPORE ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPORE",72, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // CUERPORE ::= TIPOHR iden ASIGVAR puntoComa 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String ids = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPORE",72, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // EXP ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",66, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // EXP ::= reportt CUERPORE freportt 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",66, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // EXP ::= caracter 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",66, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // EXP ::= bool 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",66, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // EXP ::= cadena 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",66, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // EXP ::= decimal 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",66, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // EXP ::= entero 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",66, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // EXP ::= iden 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String ids = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=ids;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",66, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // TIPOHR ::= iden 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String ids = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOHR",78, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // TIPOHR ::= resDouble 
            {
              Object RESULT =null;
		int douleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int douright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String dou = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOHR",78, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // TIPOHR ::= resChar 
            {
              Object RESULT =null;
		int chaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int charight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String cha = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOHR",78, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // TIPOHR ::= resString 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOHR",78, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // TIPOHR ::= resBoolean 
            {
              Object RESULT =null;
		int bolleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bolright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String bol = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOHR",78, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // TIPOHR ::= resInteger 
            {
              Object RESULT =null;
		int inttleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int inttright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String intt = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOHR",78, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // TIPOH ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOH",71, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // LADO ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LADO",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // LADO ::= centrado 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LADO",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // LADO ::= derecha 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LADO",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // LADO ::= izquierda 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LADO",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // COLOR ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLOR",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // COLOR ::= morado 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLOR",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // COLOR ::= anaranjado 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLOR",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // COLOR ::= gris 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLOR",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // COLOR ::= verde 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLOR",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // COLOR ::= azul 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLOR",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // COLOR ::= amarillo 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLOR",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // COLOR ::= rojo 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLOR",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // ATRIBUTOS ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // ATRIBUTOS ::= font igual comih TIPOH comih 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // ATRIBUTOS ::= align igual comih LADO comih 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ATRIBUTOS ::= textcolor igual comih COLOR comih 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ATRIBUTOS ::= color igual comih COLOR comih 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // CCBODY ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CCBODY",67, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // CCBODY ::= reportt CUERPORE freportt 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CCBODY",67, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // CCBODY ::= td ATRIBUTOS mayorq CCBODY ftd CCBODY 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CCBODY",67, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // CCBODY ::= th ATRIBUTOS mayorq CCBODY fth CCBODY 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CCBODY",67, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // CCBODY ::= tr ATRIBUTOS mayorq CCBODY ftr CCBODY 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CCBODY",67, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // CCBODY ::= table ATRIBUTOS mayorq CCBODY ftable CCBODY 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CCBODY",67, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // CCBODY ::= hr CCBODY 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CCBODY",67, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // CCBODY ::= br CCBODY 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CCBODY",67, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // CCBODY ::= divh ATRIBUTOS mayorq CCBODY fdivh CCBODY 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CCBODY",67, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // CCBODY ::= p ATRIBUTOS mayorq CCBODY fp CCBODY 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CCBODY",67, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CCBODY ::= h6 ATRIBUTOS mayorq CCBODY fh6 CCBODY 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CCBODY",67, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CCBODY ::= h5 ATRIBUTOS mayorq CCBODY fh5 CCBODY 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CCBODY",67, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CCBODY ::= h4 ATRIBUTOS mayorq CCBODY fh4 CCBODY 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CCBODY",67, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CCBODY ::= h3 ATRIBUTOS mayorq CCBODY fh3 CCBODY 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CCBODY",67, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CCBODY ::= h2 ATRIBUTOS mayorq CCBODY fh2 CCBODY 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CCBODY",67, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CCBODY ::= h1 ATRIBUTOS mayorq CCBODY fh1 CCBODY 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CCBODY",67, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // CCBODY ::= iden CCBODY 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String ids = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		System.out.println(""+ ids);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CCBODY",67, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CCHEAD ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CCHEAD",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // CCHEAD ::= title mayorq NT$10 EXP ftitle NT$11 CUERPOH 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CCHEAD",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NT$11 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
System.out.println("fin title "+ex);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$11",92, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // NT$10 ::= 
            {
              Object RESULT =null;
System.out.println("inicio title");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$10",91, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // CUERPOH ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOH",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // CUERPOH ::= bodyy mayorq NT$8 CCBODY fbody NT$9 CUERPOH 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOH",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
System.out.println("fin body");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$9",90, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // NT$8 ::= 
            {
              Object RESULT =null;
System.out.println("inicio body");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$8",89, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CUERPOH ::= head mayorq NT$6 CCHEAD fhead NT$7 CUERPOH 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOH",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
System.out.println("fin head");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$7",88, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // NT$6 ::= 
            {
              Object RESULT =null;
System.out.println("inicio head");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$6",87, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // TIPO ::= resObject 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // TIPO ::= resDouble 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // TIPO ::= resChar 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // TIPO ::= resString 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // TIPO ::= resBoolean 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // TIPO ::= resInteger 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // LISTAID ::= iden coma LISTAID 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String ids = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=ids+","+id1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAID",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // PARAMETROS ::= 
            {
              Object RESULT =null;
		p=0;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // PARAMETROS ::= TIPO llamaA llamaC iden PARAMETROS 
            {
              Object RESULT =null;
		p++;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // PARAMETROS ::= coma TIPO iden PARAMETROS 
            {
              Object RESULT =null;
		p++;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // PARAMETROS ::= TIPO iden PARAMETROS 
            {
              Object RESULT =null;
		p++;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // PARA ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARA",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // PARA ::= retu 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARA",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // PARA ::= resbreak 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARA",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // VALOR ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // VALOR ::= palabra 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // VALOR ::= comi 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // VALOR ::= caracter 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // VALOR ::= iden 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // VALOR ::= bool 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // VALOR ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // VALOR ::= decimal 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // VALOR ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CASES ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASES",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CASES ::= resdefault dosp CUERPOMETODO resbreak puntoComa CASES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASES",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CASES ::= resCase comina VALOR comina dosp CUERPOMETODO resbreak puntoComa CASES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASES",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SWITCH ::= resswitch parentesisA EXP2 parentesisC parentA CASES parentC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DOWHILE ::= resDo parentA CUERPOMETODO parentC resWhile parentesisA EXP2 parentesisC puntoComa 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DOWHILE",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // WHILE ::= resWhile parentesisA EXP2 parentesisC parentA CUERPOMETODO PARA parentC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WHILE",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // INCREMENTO ::= menmen 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INCREMENTO",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // INCREMENTO ::= masmas 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INCREMENTO",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // INCREMENTO ::= iden menmen 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INCREMENTO",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // INCREMENTO ::= iden masmas 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INCREMENTO",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // FOR ::= resFor parentesisA VISIBILIDAD DECLARARATRI puntoComa EXP2 puntoComa INCREMENTO parentesisC parentA CUERPOMETODO PARA parentC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CIF ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CIF",59, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CIF ::= elseif parentesisA parentesisC parentA CUERPOMETODO parentC CIF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CIF",59, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CIF ::= resElse parentA CUERPOMETODO parentC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CIF",59, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // IF ::= resIf parentesisA EXP2 parentesisC parentA CUERPOMETODO parentC CIF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SENTENCIAS ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SENTENCIAS ::= DOWHILE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SENTENCIAS ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SENTENCIAS ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SENTENCIAS ::= IF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CUERPOMETODO ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOMETODO",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CUERPOMETODO ::= VISIBILIDAD iden parentesisA parentesisC puntoComa 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOMETODO",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CUERPOMETODO ::= SENTENCIAS CUERPOMETODO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOMETODO",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CUERPOMETODO ::= VISIBILIDAD DECLARARATRI puntoComa NT$5 CUERPOMETODO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOMETODO",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$5 ::= 
            {
              Object RESULT =null;
System.out.println("seclaracion");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$5",86, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXP3 ::= igual EXP2 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP3",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXP3 ::= igualigual EXP2 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP3",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXP3 ::= diferente EXP2 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP3",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXP3 ::= mayorIgual EXP2 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP3",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXP3 ::= mayorq EXP2 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP3",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXP3 ::= menorIgual EXP2 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP3",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXP3 ::= menorq EXP2 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP3",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXP3 ::= mod EXP2 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP3",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXP3 ::= div EXP2 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP3",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXP3 ::= mul EXP2 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP3",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXP3 ::= menos EXP2 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP3",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXP3 ::= mas EXP2 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP3",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXP2 ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP2",58, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXP2 ::= EXP3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP2",58, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXP2 ::= caracter EXP2 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP2",58, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXP2 ::= bool EXP2 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP2",58, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXP2 ::= cadena EXP2 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP2",58, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXP2 ::= decimal EXP2 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP2",58, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXP2 ::= entero EXP2 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP2",58, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXP2 ::= iden EXP2 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String ids = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=ids;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP2",58, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ASIGNACION ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ASIGNACION ::= iden coma ASIGNACION 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String ids = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int idlleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idlright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object idl = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=ids+","+idl;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ASIGNACION ::= iden ASIGNACION 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String ids = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=ids;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ASIGNACION ::= igual neww iden parentesisA PARAMETROS parentesisC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ASIGNACION ::= igual neww iden 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ASIGNACION ::= igual EXP2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARARATRI ::= iden coma ASIGNACION 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String ids = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARARATRI",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARARATRI ::= iden ASIGNACION 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARARATRI",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARARATRI ::= TIPO iden coma ASIGNACION 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String ids = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARARATRI",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARARATRI ::= TIPO iden NT$4 ASIGNACION 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARARATRI",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$4 ::= 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
pv++;relax2.add(""+id+""+tip);copa=""+id+""+tip;  for(int w=0;w<relax2.size();w++){copa2=relax2.get(w);System.out.println("entra a for decalracion "+w+" "+ copa+ " contenido "+copa2);if(copa.equals(copa2)){ if(jaa==1){  jaa=2; } else if(jaa==2){c+=("{Nombre:\""+ id +"\", Tipo:\""+ tip +"\"} \n"); pv1++;}  }else{System.out.println("error en ");}}jaa=1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$4",85, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CUERPOCLASE ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOCLASE",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CUERPOCLASE ::= VISIBILIDAD DECLARARATRI puntoComa CUERPOCLASE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOCLASE",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CUERPOCLASE ::= VISIBILIDAD TIPO iden parentesisA PARAMETROS parentesisC NT$3 parentA CUERPOMETODO PARA parentC CUERPOCLASE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)).right;
		String ids = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOCLASE",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$3 ::= 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String ids = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
pm++;relax3.add(""+ids+""+tip+""+p);copa=""+ids+""+tip+""+p; for(int m=0;m<relax3.size();m++){copa2=relax3.get(m);if(copa.equals(copa2)){ if(jaaa==1){  jaaa=2; } else if(jaaa==2){d+=("{Nombre:\""+ ids +"\", Tipo:\""+ tip +"\",Parametros:\""+ p +"\"} \n"); pm1++;}  }else{System.out.println("error en ");}}jaaa=1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$3",84, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CUERPOCLASE ::= resPublic resStatic voide main parentesisA resString llamaA llamaC iden parentesisC CUERPOMETODO parentC CUERPOCLASE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOCLASE",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VISIBILIDAD ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VISIBILIDAD ::= resfinal 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VISIBILIDAD ::= resProtected 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VISIBILIDAD ::= resPublic 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VISIBILIDAD ::= resPrivate 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CLASE ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASE",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CLASE ::= VISIBILIDAD clase iden parentA CUERPOCLASE parentC NT$1 IMPORTTT NT$2 CLASE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).right;
		String ids = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASE",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String ids = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
y++;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$2",83, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$1 ::= 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String ids = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
pc++;relax.add(""+ids);copa=ids; for(int x=0;x<relax.size();x++){copa2=relax.get(x);System.out.println("entra a for "+x+" "+ copa+ " contenido "+copa2);if(copa.equals(copa2)){ if(ja==1){  ja=2; System.out.println("primera face");} else if(ja==2){b+=("Nombre:\""+ ids+"\", "); pc1++; System.out.println("---------------------"+relax.get(x)); }  }else{System.out.println("else primera face");}}ja=1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",82, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // RESTOIMP ::= 
            {
              Object RESULT =null;
		System.out.println("nada");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RESTOIMP",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // RESTOIMP ::= mul 
            {
              Object RESULT =null;
		System.out.println("import *");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RESTOIMP",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // RESTOIMP ::= iden 
            {
              Object RESULT =null;
		System.out.println("import id");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RESTOIMP",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // RESTOIMP ::= iden puntor RESTOIMP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RESTOIMP",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IMPORTTT ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPORTTT",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IMPORTTT ::= importt iden puntor RESTOIMP puntoComa IMPORTTT 
            {
              Object RESULT =null;
		int impleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int impright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String imp = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String ids = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPORTTT",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= IMPORTTT CLASE 
            {
              Object RESULT =null;
		salida+=("Clases:[ {"+ b +"} ], \n \n"); tc=(pc1/(pc*0.25));salida+=("Variables:[ "+c+"], \n"); tv=(pv1/(pv*0.25));salida+=("Metodos:[ "+d+"], \n");tm=(pm1/(pm*0.25));a=tc+tv+tm;salida+=("\n score: [ "+ a +" ] }");relax.clear();//relax.get(0);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= parentA REPO parentA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= htmll NT$0 CUERPOH fhtml 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		System.out.println("fin html");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
System.out.println("inicio html");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",81, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

