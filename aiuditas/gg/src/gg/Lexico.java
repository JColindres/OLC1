/* The following code was generated by JFlex 1.6.1 */

package gg;
import java_cup.runtime.Symbol;

//------------------------------------------------------------------------


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/gg/Scanner.jflex</tt>
 */
public class Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMENTARIO = 2;
  public static final int htmml = 4;
  public static final int repor = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  0,  0,  0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\104\1\7\1\105\1\104\1\2\22\0\1\45\1\60\1\6"+
    "\1\1\1\101\1\53\1\70\1\12\1\63\1\64\1\52\1\50\1\62"+
    "\1\51\1\5\1\3\1\4\1\25\1\72\1\73\1\74\1\75\1\76"+
    "\3\4\1\67\1\61\1\55\1\56\1\57\2\0\1\17\1\31\1\33"+
    "\1\16\1\14\1\21\1\36\1\41\1\27\1\32\1\47\1\22\1\30"+
    "\1\35\1\20\1\40\1\100\1\15\1\24\1\34\1\37\1\13\1\42"+
    "\1\43\1\44\1\77\1\102\1\0\1\103\1\54\1\11\1\0\1\17"+
    "\1\31\1\33\1\16\1\14\1\21\1\36\1\41\1\27\1\32\1\47"+
    "\1\22\1\30\1\35\1\20\1\40\1\100\1\15\1\24\1\34\1\37"+
    "\1\13\1\42\1\43\1\44\1\77\1\65\1\71\1\66\7\0\1\105"+
    "\113\0\1\10\37\0\1\10\76\0\2\26\115\0\1\23\u1ea8\0\1\105"+
    "\1\105\u0100\0\1\46\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\1\2\2\1\3\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\10\10\1\2\1\10\1\2\12\10\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\3\2"+
    "\1\33\1\34\5\35\1\36\26\35\1\15\3\35\2\3"+
    "\1\37\1\40\1\0\2\41\1\0\11\10\1\42\1\0"+
    "\2\10\2\43\6\10\1\0\3\10\5\0\5\10\1\44"+
    "\1\45\3\0\1\44\1\45\20\10\1\46\10\10\1\47"+
    "\1\50\5\0\1\51\1\0\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\3\1\0\1\62\1\63"+
    "\2\10\1\0\1\10\1\0\1\10\1\64\1\0\1\10"+
    "\1\0\6\10\1\0\1\65\1\10\1\65\1\0\6\10"+
    "\1\66\1\10\1\0\4\10\6\0\1\67\1\0\6\10"+
    "\1\67\1\10\1\0\1\70\1\0\1\10\1\70\2\10"+
    "\1\0\10\10\1\0\7\10\1\71\1\10\1\72\1\0"+
    "\3\10\1\0\2\10\1\0\1\10\6\0\1\73\2\0"+
    "\1\74\1\75\2\0\1\76\1\0\1\77\1\100\1\0"+
    "\1\101\1\102\1\103\1\104\1\105\1\3\1\0\1\10"+
    "\1\0\1\10\2\106\2\107\1\0\2\110\2\0\3\10"+
    "\1\111\3\10\1\0\1\10\1\0\3\10\1\112\1\10"+
    "\1\0\1\10\1\113\1\0\2\10\1\114\1\115\2\0"+
    "\1\116\2\0\1\117\1\0\2\10\1\116\2\10\1\117"+
    "\1\10\2\0\3\10\2\120\7\10\2\121\1\10\1\0"+
    "\1\10\1\0\1\10\1\122\1\10\1\123\1\124\2\125"+
    "\1\0\2\10\2\0\3\10\1\0\1\10\10\0\1\126"+
    "\11\0\1\127\6\0\1\3\1\130\1\10\1\0\1\10"+
    "\1\0\1\10\4\0\1\131\1\0\1\131\5\10\1\0"+
    "\1\10\2\132\1\0\3\10\2\133\2\134\1\10\1\0"+
    "\1\135\3\0\1\10\1\135\3\10\2\0\5\10\1\0"+
    "\1\10\2\136\1\10\1\137\2\10\1\0\1\10\1\0"+
    "\1\140\1\10\1\140\1\10\2\141\1\10\1\0\1\142"+
    "\1\10\1\142\1\0\1\10\2\143\1\0\1\144\1\0"+
    "\1\145\1\146\2\0\1\147\1\0\1\150\1\151\1\0"+
    "\1\152\1\153\1\154\1\155\1\156\1\157\3\0\1\160"+
    "\1\0\1\10\1\0\1\10\2\161\2\0\1\162\1\0"+
    "\2\163\1\164\2\10\1\165\1\0\1\10\1\0\2\10"+
    "\1\166\1\0\1\10\1\167\1\170\1\171\1\172\1\167"+
    "\1\170\1\171\1\172\1\173\1\0\1\173\2\10\1\174"+
    "\1\175\1\0\4\10\1\0\1\10\2\176\2\10\1\0"+
    "\1\10\2\177\1\200\5\0\1\201\1\202\1\203\1\204"+
    "\1\10\1\0\1\10\1\0\1\205\1\0\1\206\1\207"+
    "\2\210\1\0\2\10\1\0\1\10\1\0\1\10\2\211"+
    "\1\0\1\10\1\212\2\10\1\0\3\10\2\213\1\214"+
    "\2\0\1\215\1\216\1\0\1\10\2\0\2\217\1\10"+
    "\2\220\1\0\1\10\1\0\1\10\1\221\1\10\1\0"+
    "\2\10\1\222\1\223\2\224\2\0\1\10\2\225\1\0"+
    "\1\10\1\0\1\10\2\0\1\226\1\227\1\0\1\230"+
    "\1\231\1\0\1\10\1\0\1\10\3\0\2\232\2\233"+
    "\2\0\1\234\10\0\1\235\1\0\1\236";

  private static int [] zzUnpackAction() {
    int [] result = new int[663];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\u0118\0\u015e\0\u01a4\0\214"+
    "\0\u01ea\0\u0230\0\214\0\u0276\0\u02bc\0\u0302\0\u0348\0\u038e"+
    "\0\u03d4\0\u041a\0\u0460\0\u04a6\0\u04ec\0\u0532\0\u0578\0\u05be"+
    "\0\u0604\0\u064a\0\u0690\0\u06d6\0\u071c\0\u0762\0\u07a8\0\u07ee"+
    "\0\u0834\0\u087a\0\u08c0\0\214\0\214\0\214\0\u0906\0\u094c"+
    "\0\u0992\0\u09d8\0\214\0\214\0\214\0\214\0\214\0\214"+
    "\0\214\0\u0a1e\0\u0a64\0\u0aaa\0\214\0\214\0\214\0\322"+
    "\0\u0118\0\u01a4\0\u01ea\0\u0118\0\u0230\0\u02bc\0\u0302\0\u0348"+
    "\0\u038e\0\u03d4\0\u041a\0\u0460\0\u04a6\0\u04ec\0\u0532\0\u0578"+
    "\0\u05be\0\u0604\0\u064a\0\u0690\0\u06d6\0\u071c\0\u0762\0\u07a8"+
    "\0\u07ee\0\u0834\0\u0af0\0\u0a1e\0\u0a64\0\u0aaa\0\u0b36\0\u0b7c"+
    "\0\214\0\u0bc2\0\u0c08\0\u0c4e\0\214\0\u0c94\0\u0cda\0\u0d20"+
    "\0\u0d66\0\u0dac\0\u0df2\0\u0e38\0\u0e7e\0\u0ec4\0\u0f0a\0\u0f50"+
    "\0\u0f96\0\u0fdc\0\u1022\0\214\0\u0230\0\u1068\0\u10ae\0\u10f4"+
    "\0\u113a\0\u1180\0\u11c6\0\u120c\0\u1252\0\u1298\0\u12de\0\u1324"+
    "\0\u136a\0\u13b0\0\u13f6\0\u143c\0\u1482\0\u14c8\0\u150e\0\u1554"+
    "\0\u159a\0\214\0\214\0\u15e0\0\u1626\0\u166c\0\u0230\0\u0230"+
    "\0\u16b2\0\u16f8\0\u173e\0\u1784\0\u17ca\0\u1810\0\u1856\0\u189c"+
    "\0\u18e2\0\u1928\0\u196e\0\u19b4\0\u19fa\0\u1a40\0\u1a86\0\u1acc"+
    "\0\u0230\0\u1b12\0\u1b58\0\u1b9e\0\u1be4\0\u1c2a\0\u1c70\0\u1cb6"+
    "\0\u1cfc\0\214\0\214\0\u1d42\0\u1d88\0\u1dce\0\u1e14\0\u1e5a"+
    "\0\214\0\u1ea0\0\214\0\214\0\214\0\214\0\214\0\214"+
    "\0\214\0\214\0\u1ee6\0\u1f2c\0\u0c4e\0\214\0\u1f72\0\u1fb8"+
    "\0\u1ffe\0\u2044\0\u208a\0\u20d0\0\u2116\0\u215c\0\u21a2\0\u21e8"+
    "\0\u222e\0\u2274\0\u22ba\0\u2300\0\u2346\0\u238c\0\u23d2\0\214"+
    "\0\u2418\0\u0230\0\u245e\0\u24a4\0\u24ea\0\u2530\0\u2576\0\u25bc"+
    "\0\u2602\0\u0230\0\u2648\0\u268e\0\u26d4\0\u271a\0\u2760\0\u27a6"+
    "\0\u27ec\0\u2832\0\u2878\0\u28be\0\u2904\0\u294a\0\214\0\u2990"+
    "\0\u29d6\0\u2a1c\0\u2a62\0\u2aa8\0\u2aee\0\u2b34\0\u0230\0\u2b7a"+
    "\0\u2bc0\0\214\0\u2c06\0\u2c4c\0\u0230\0\u2c92\0\u2cd8\0\u2d1e"+
    "\0\u2d64\0\u2daa\0\u2df0\0\u2e36\0\u2e7c\0\u2ec2\0\u2f08\0\u2f4e"+
    "\0\u2f94\0\u2fda\0\u3020\0\u3066\0\u30ac\0\u30f2\0\u3138\0\u317e"+
    "\0\u0230\0\u31c4\0\u0230\0\u320a\0\u3250\0\u3296\0\u32dc\0\u3322"+
    "\0\u3368\0\u33ae\0\u33f4\0\u343a\0\u3480\0\u34c6\0\u350c\0\u3552"+
    "\0\u3598\0\u35de\0\214\0\u3624\0\u366a\0\214\0\214\0\u36b0"+
    "\0\u36f6\0\214\0\u373c\0\214\0\214\0\u3782\0\214\0\214"+
    "\0\214\0\214\0\214\0\u37c8\0\u380e\0\u3854\0\u389a\0\u38e0"+
    "\0\214\0\u0230\0\u3926\0\u396c\0\u39b2\0\214\0\u0230\0\u39f8"+
    "\0\u3a3e\0\u3a84\0\u3aca\0\u3b10\0\u0230\0\u3b56\0\u3b9c\0\u3be2"+
    "\0\u3c28\0\u3c6e\0\u3cb4\0\u3cfa\0\u3d40\0\u3d86\0\u0230\0\u3dcc"+
    "\0\u3e12\0\u3e58\0\u0230\0\u3e9e\0\u3ee4\0\u3f2a\0\u0230\0\u0230"+
    "\0\u3f70\0\u3fb6\0\214\0\u3ffc\0\u4042\0\214\0\u4088\0\u40ce"+
    "\0\u4114\0\u0230\0\u415a\0\u41a0\0\u0230\0\u41e6\0\u422c\0\u4272"+
    "\0\u42b8\0\u42fe\0\u4344\0\214\0\u0230\0\u438a\0\u43d0\0\u4416"+
    "\0\u445c\0\u44a2\0\u44e8\0\u452e\0\214\0\u0230\0\u4574\0\u45ba"+
    "\0\u4600\0\u4646\0\u468c\0\u0230\0\u46d2\0\u0230\0\u0230\0\214"+
    "\0\u0230\0\u4718\0\u475e\0\u47a4\0\u47ea\0\u4830\0\u4876\0\u48bc"+
    "\0\u4902\0\u4948\0\u498e\0\u49d4\0\u4a1a\0\u4a60\0\u4aa6\0\u4aec"+
    "\0\u4b32\0\u4b78\0\u4bbe\0\214\0\u4c04\0\u4c4a\0\u4c90\0\u4cd6"+
    "\0\u4d1c\0\u4d62\0\u4da8\0\u4dee\0\u4e34\0\214\0\u4e7a\0\u4ec0"+
    "\0\u4f06\0\u4f4c\0\u4f92\0\u4fd8\0\214\0\u0230\0\u501e\0\u5064"+
    "\0\u50aa\0\u50f0\0\u5136\0\u517c\0\u51c2\0\u5208\0\u524e\0\214"+
    "\0\u5294\0\u0230\0\u52da\0\u5320\0\u5366\0\u53ac\0\u53f2\0\u5438"+
    "\0\u547e\0\214\0\u0230\0\u54c4\0\u550a\0\u5550\0\u5596\0\214"+
    "\0\u0230\0\214\0\u0230\0\u55dc\0\u5622\0\214\0\u5668\0\u56ae"+
    "\0\u56f4\0\u573a\0\u0230\0\u5780\0\u57c6\0\u580c\0\u5852\0\u5898"+
    "\0\u58de\0\u5924\0\u596a\0\u59b0\0\u59f6\0\u5a3c\0\u5a82\0\214"+
    "\0\u0230\0\u5ac8\0\u0230\0\u5b0e\0\u5b54\0\u5b9a\0\u5be0\0\u5c26"+
    "\0\214\0\u5c6c\0\u0230\0\u5cb2\0\214\0\u0230\0\u5cf8\0\u5d3e"+
    "\0\214\0\u5d84\0\u0230\0\u5dca\0\u5e10\0\214\0\u0230\0\u5e56"+
    "\0\214\0\u5e9c\0\214\0\214\0\u5ee2\0\u5f28\0\214\0\u5f6e"+
    "\0\214\0\214\0\u5fb4\0\214\0\214\0\214\0\214\0\214"+
    "\0\214\0\u5ffa\0\u6040\0\u6086\0\214\0\u60cc\0\u6112\0\u6158"+
    "\0\u619e\0\214\0\u0230\0\u61e4\0\u622a\0\214\0\u6270\0\214"+
    "\0\u0230\0\u0230\0\u62b6\0\u62fc\0\u0230\0\u6342\0\u6388\0\u63ce"+
    "\0\u6414\0\u645a\0\u0230\0\u64a0\0\u64e6\0\214\0\214\0\214"+
    "\0\214\0\u0230\0\u0230\0\u0230\0\u0230\0\214\0\u652c\0\u0230"+
    "\0\u6572\0\u65b8\0\u0230\0\u0230\0\u65fe\0\u6644\0\u668a\0\u66d0"+
    "\0\u6716\0\u675c\0\u67a2\0\214\0\u0230\0\u67e8\0\u682e\0\u6874"+
    "\0\u68ba\0\214\0\u0230\0\214\0\u6900\0\u6946\0\u698c\0\u69d2"+
    "\0\u6a18\0\214\0\214\0\214\0\214\0\u6a5e\0\u6aa4\0\u6aea"+
    "\0\u6b30\0\214\0\u6b76\0\u0230\0\u0230\0\214\0\u0230\0\u6bbc"+
    "\0\u6c02\0\u6c48\0\u6c8e\0\u6cd4\0\u6d1a\0\u6d60\0\214\0\u0230"+
    "\0\u6da6\0\u6dec\0\u0230\0\u6e32\0\u6e78\0\u6ebe\0\u6f04\0\u6f4a"+
    "\0\u6f90\0\214\0\u0230\0\214\0\u6fd6\0\u701c\0\214\0\214"+
    "\0\u7062\0\u70a8\0\u70ee\0\u7134\0\214\0\u0230\0\u717a\0\214"+
    "\0\u0230\0\u71c0\0\u7206\0\u724c\0\u7292\0\u0230\0\u72d8\0\u731e"+
    "\0\u7364\0\u73aa\0\214\0\214\0\214\0\u0230\0\u73f0\0\u7436"+
    "\0\u747c\0\214\0\u0230\0\u74c2\0\u7508\0\u754e\0\u7594\0\u75da"+
    "\0\u7620\0\u0230\0\u0230\0\u7666\0\214\0\u0230\0\u76ac\0\u76f2"+
    "\0\u7738\0\u777e\0\u77c4\0\u780a\0\u7850\0\214\0\u0230\0\214"+
    "\0\u0230\0\u7896\0\u78dc\0\214\0\u7922\0\u7968\0\u79ae\0\u79f4"+
    "\0\u7a3a\0\u7a80\0\u7ac6\0\u7b0c\0\214\0\u7b52\0\214";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[663];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\5"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\7\1\27\1\30"+
    "\1\31\1\32\1\12\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\12\1\41\2\12\1\5\1\3\1\12\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\5\7\2\12\1\64\1\65\1\66\1\5\1\0"+
    "\1\67\1\70\1\71\1\6\1\72\1\67\1\73\1\74"+
    "\1\75\1\13\1\14\1\76\1\77\1\100\1\101\1\102"+
    "\1\103\1\104\1\105\1\106\1\107\1\72\1\110\1\111"+
    "\1\112\1\113\1\75\1\114\1\115\1\116\1\117\1\120"+
    "\1\121\1\75\1\122\2\75\1\71\1\67\1\75\1\42"+
    "\1\43\1\123\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\124"+
    "\1\125\5\72\2\75\1\126\2\67\1\71\1\67\106\0"+
    "\2\127\1\0\1\130\3\127\1\0\76\127\2\0\1\5"+
    "\4\0\1\5\35\0\1\5\36\0\1\5\53\0\1\131"+
    "\37\0\1\7\1\132\17\0\1\7\44\0\5\7\7\0"+
    "\6\133\1\134\1\135\76\133\4\0\1\12\3\0\2\12"+
    "\1\0\10\12\1\0\2\12\1\0\16\12\2\0\1\12"+
    "\22\0\7\12\5\0\106\136\4\0\1\12\3\0\2\12"+
    "\1\0\1\12\1\137\2\12\1\140\1\141\2\12\1\0"+
    "\2\12\1\0\16\12\2\0\1\12\22\0\7\12\11\0"+
    "\1\12\3\0\2\12\1\0\7\12\1\142\1\0\2\12"+
    "\1\0\6\12\1\143\5\12\1\144\1\12\2\0\1\12"+
    "\22\0\7\12\11\0\1\12\3\0\2\12\1\0\1\12"+
    "\1\145\3\12\1\146\2\12\1\0\2\12\1\0\16\12"+
    "\2\0\1\12\22\0\7\12\11\0\1\12\3\0\2\12"+
    "\1\0\1\12\1\147\3\12\1\150\2\12\1\0\2\12"+
    "\1\151\1\152\15\12\2\0\1\12\22\0\7\12\11\0"+
    "\1\12\3\0\2\12\1\0\7\12\1\153\1\154\1\155"+
    "\1\12\1\0\1\12\1\156\4\12\1\157\7\12\2\0"+
    "\1\12\22\0\5\12\1\160\1\12\11\0\1\12\3\0"+
    "\2\12\1\0\10\12\1\0\2\12\1\0\2\12\1\161"+
    "\13\12\2\0\1\12\22\0\7\12\11\0\1\12\3\0"+
    "\2\12\1\0\4\12\1\162\1\163\2\12\1\0\2\12"+
    "\1\164\1\165\7\12\1\166\5\12\2\0\1\12\22\0"+
    "\7\12\11\0\1\12\3\0\2\12\1\0\5\12\1\167"+
    "\2\12\1\0\2\12\1\0\16\12\2\0\1\12\22\0"+
    "\7\12\21\0\1\170\16\0\1\171\1\172\2\0\1\173"+
    "\2\0\1\174\47\0\1\12\3\0\2\12\1\0\1\12"+
    "\1\175\6\12\1\0\2\12\1\0\4\12\1\176\1\177"+
    "\2\12\1\200\2\12\1\201\2\12\2\0\1\12\22\0"+
    "\7\12\23\0\1\202\2\0\1\203\6\0\1\204\4\0"+
    "\1\205\41\0\1\206\12\0\1\12\3\0\2\12\1\0"+
    "\3\12\1\207\2\12\1\210\1\12\1\0\2\12\1\0"+
    "\1\12\1\211\4\12\1\212\7\12\2\0\1\12\22\0"+
    "\5\12\1\213\1\12\11\0\1\12\3\0\2\12\1\0"+
    "\1\12\1\214\2\12\1\215\1\216\2\12\1\0\2\12"+
    "\1\0\10\12\1\217\5\12\2\0\1\12\22\0\7\12"+
    "\11\0\1\12\3\0\2\12\1\0\2\12\1\220\2\12"+
    "\1\221\2\12\1\0\2\12\1\0\15\12\1\222\2\0"+
    "\1\12\22\0\7\12\11\0\1\12\3\0\2\12\1\0"+
    "\1\12\1\223\2\12\1\224\1\225\1\12\1\226\1\0"+
    "\2\12\1\0\12\12\1\227\3\12\2\0\1\12\22\0"+
    "\7\12\11\0\1\12\3\0\2\12\1\0\1\12\1\230"+
    "\3\12\1\231\2\12\1\0\2\12\1\0\12\12\1\232"+
    "\3\12\2\0\1\12\22\0\7\12\11\0\1\12\3\0"+
    "\2\12\1\0\1\12\1\233\6\12\1\0\2\12\1\0"+
    "\10\12\1\234\5\12\2\0\1\12\22\0\7\12\11\0"+
    "\1\12\3\0\2\12\1\0\2\12\1\235\5\12\1\0"+
    "\2\12\1\0\16\12\2\0\1\12\22\0\7\12\11\0"+
    "\1\12\3\0\2\12\1\0\10\12\1\0\2\12\1\0"+
    "\6\12\1\236\7\12\2\0\1\12\22\0\7\12\11\0"+
    "\1\12\3\0\2\12\1\0\2\12\1\237\5\12\1\0"+
    "\2\12\1\0\10\12\1\240\5\12\2\0\1\12\22\0"+
    "\7\12\11\0\1\12\3\0\2\12\1\0\10\12\1\0"+
    "\2\12\1\0\12\12\1\241\3\12\2\0\1\12\22\0"+
    "\7\12\55\0\1\242\106\0\1\243\37\0\1\244\12\0"+
    "\1\245\12\0\1\246\1\0\1\247\1\250\3\0\1\251"+
    "\1\252\14\0\1\253\105\0\1\254\105\0\1\255\105\0"+
    "\1\256\117\0\1\257\106\0\1\260\115\0\1\261\7\0"+
    "\1\262\102\0\2\127\1\0\4\127\1\0\76\127\2\263"+
    "\1\264\1\127\3\263\1\264\76\263\4\0\1\132\20\0"+
    "\1\132\44\0\5\132\7\0\6\133\2\135\76\133\6\0"+
    "\1\265\111\0\1\266\77\0\1\12\3\0\2\12\1\0"+
    "\2\12\1\267\5\12\1\0\2\12\1\0\16\12\2\0"+
    "\1\12\22\0\7\12\11\0\1\12\3\0\2\12\1\0"+
    "\2\12\1\270\5\12\1\0\2\12\1\0\16\12\2\0"+
    "\1\12\22\0\7\12\11\0\1\12\3\0\2\12\1\0"+
    "\10\12\1\0\2\12\1\271\1\272\15\12\2\0\1\12"+
    "\22\0\7\12\11\0\1\12\3\0\2\12\1\0\10\12"+
    "\1\273\1\274\1\12\1\0\16\12\2\0\1\12\22\0"+
    "\7\12\11\0\1\12\3\0\2\12\1\0\3\12\1\275"+
    "\4\12\1\0\2\12\1\0\16\12\2\0\1\12\22\0"+
    "\7\12\11\0\1\12\3\0\2\12\1\0\10\12\1\0"+
    "\2\12\1\276\1\277\15\12\2\0\1\12\22\0\7\12"+
    "\11\0\1\12\3\0\2\12\1\0\10\12\1\300\1\301"+
    "\1\12\1\0\5\12\1\302\10\12\2\0\1\12\22\0"+
    "\7\12\11\0\1\12\3\0\2\12\1\0\10\12\1\0"+
    "\2\12\1\0\3\12\1\303\12\12\2\0\1\12\22\0"+
    "\7\12\11\0\1\12\3\0\2\12\1\0\2\12\1\304"+
    "\3\12\1\305\1\12\1\0\2\12\1\0\16\12\2\0"+
    "\1\12\22\0\7\12\11\0\1\12\3\0\2\12\1\0"+
    "\10\12\1\0\2\12\1\0\10\12\1\306\5\12\2\0"+
    "\1\12\22\0\7\12\20\0\1\307\14\0\1\310\61\0"+
    "\1\12\3\0\2\12\1\0\1\311\7\12\1\0\2\12"+
    "\1\0\1\12\1\312\14\12\2\0\1\12\22\0\7\12"+
    "\11\0\1\12\3\0\2\12\1\0\10\12\1\0\2\12"+
    "\1\313\1\314\15\12\2\0\1\12\22\0\7\12\11\0"+
    "\1\12\3\0\2\12\1\0\4\12\1\315\3\12\1\0"+
    "\2\12\1\0\16\12\2\0\1\12\22\0\7\12\11\0"+
    "\1\12\3\0\2\12\1\0\4\12\1\316\3\12\1\0"+
    "\2\12\1\0\16\12\2\0\1\12\22\0\7\12\11\0"+
    "\1\12\3\0\2\12\1\0\10\12\1\0\2\12\1\0"+
    "\10\12\1\317\5\12\2\0\1\12\22\0\7\12\11\0"+
    "\1\12\3\0\2\12\1\0\10\12\1\0\2\12\1\0"+
    "\3\12\1\320\12\12\2\0\1\12\22\0\7\12\11\0"+
    "\1\12\3\0\2\12\1\0\7\12\1\321\1\0\2\12"+
    "\1\0\16\12\2\0\1\12\22\0\7\12\11\0\1\12"+
    "\3\0\2\12\1\0\2\12\1\322\5\12\1\0\2\12"+
    "\1\0\6\12\1\323\7\12\2\0\1\12\22\0\7\12"+
    "\42\0\1\324\54\0\1\12\3\0\2\12\1\0\10\12"+
    "\1\0\2\12\1\0\6\12\1\325\7\12\2\0\1\12"+
    "\22\0\7\12\11\0\1\12\3\0\2\12\1\0\10\12"+
    "\1\0\2\12\1\0\6\12\1\326\7\12\2\0\1\12"+
    "\22\0\7\12\11\0\1\12\3\0\2\12\1\0\5\12"+
    "\1\327\2\12\1\0\2\12\1\0\6\12\1\330\7\12"+
    "\2\0\1\12\22\0\7\12\27\0\1\331\103\0\1\332"+
    "\101\0\1\333\1\334\1\0\1\335\116\0\1\336\1\337"+
    "\102\0\2\340\62\0\1\12\3\0\2\12\1\0\7\12"+
    "\1\341\1\0\2\12\1\0\16\12\2\0\1\12\22\0"+
    "\7\12\11\0\1\12\3\0\2\12\1\0\5\12\1\342"+
    "\2\12\1\0\2\12\1\0\16\12\2\0\1\12\22\0"+
    "\7\12\11\0\1\12\3\0\2\12\1\0\1\12\1\343"+
    "\1\344\1\12\1\345\3\12\1\0\2\12\1\0\16\12"+
    "\2\0\1\12\22\0\7\12\11\0\1\12\3\0\2\12"+
    "\1\0\10\12\1\0\2\12\1\0\1\12\1\346\1\347"+
    "\13\12\2\0\1\12\22\0\7\12\11\0\1\12\3\0"+
    "\2\12\1\0\10\12\1\0\2\12\1\340\1\350\15\12"+
    "\2\0\1\12\22\0\7\12\45\0\1\351\101\0\1\352"+
    "\151\0\1\353\11\0\1\12\3\0\2\12\1\0\10\12"+
    "\1\0\2\12\1\0\11\12\1\354\4\12\2\0\1\12"+
    "\22\0\7\12\11\0\1\12\3\0\2\12\1\0\10\12"+
    "\1\0\2\12\1\0\5\12\1\355\10\12\2\0\1\12"+
    "\22\0\7\12\11\0\1\12\3\0\2\12\1\0\10\12"+
    "\1\0\2\12\1\0\16\12\2\0\1\12\22\0\6\12"+
    "\1\356\11\0\1\12\3\0\2\12\1\0\10\12\1\0"+
    "\2\12\1\0\5\12\1\357\10\12\2\0\1\12\22\0"+
    "\7\12\11\0\1\12\3\0\2\12\1\0\10\12\1\0"+
    "\2\12\1\360\1\361\15\12\2\0\1\12\22\0\7\12"+
    "\11\0\1\12\3\0\2\12\1\0\2\12\1\362\1\363"+
    "\4\12\1\0\2\12\1\0\16\12\2\0\1\12\22\0"+
    "\7\12\11\0\1\12\3\0\2\12\1\0\7\12\1\364"+
    "\1\0\2\12\1\0\16\12\2\0\1\12\22\0\7\12"+
    "\11\0\1\12\3\0\2\12\1\0\1\12\1\365\6\12"+
    "\1\0\2\12\1\0\16\12\2\0\1\12\22\0\7\12"+
    "\11\0\1\12\3\0\2\12\1\0\5\12\1\366\2\12"+
    "\1\0\2\12\1\0\16\12\2\0\1\12\22\0\7\12"+
    "\11\0\1\12\3\0\2\12\1\0\1\367\7\12\1\0"+
    "\2\12\1\0\16\12\2\0\1\12\22\0\7\12\11\0"+
    "\1\12\3\0\2\12\1\0\10\12\1\0\2\12\1\0"+
    "\6\12\1\370\7\12\2\0\1\12\22\0\7\12\11\0"+
    "\1\12\3\0\2\12\1\0\10\12\1\371\1\372\1\12"+
    "\1\0\16\12\2\0\1\12\22\0\7\12\11\0\1\12"+
    "\3\0\2\12\1\0\10\12\1\0\2\12\1\0\1\12"+
    "\1\373\4\12\1\374\7\12\2\0\1\12\22\0\7\12"+
    "\11\0\1\12\3\0\2\12\1\0\4\12\1\375\3\12"+
    "\1\0\2\12\1\0\16\12\2\0\1\12\22\0\7\12"+
    "\11\0\1\12\3\0\2\12\1\0\4\12\1\376\3\12"+
    "\1\0\2\12\1\0\16\12\2\0\1\12\22\0\7\12"+
    "\11\0\1\12\3\0\2\12\1\0\10\12\1\0\2\12"+
    "\1\0\14\12\1\377\1\12\2\0\1\12\22\0\7\12"+
    "\11\0\1\12\3\0\2\12\1\0\1\12\1\u0100\6\12"+
    "\1\0\2\12\1\0\16\12\2\0\1\12\22\0\7\12"+
    "\11\0\1\12\3\0\2\12\1\0\10\12\1\0\2\12"+
    "\1\0\13\12\1\u0101\1\u0102\1\12\2\0\1\12\22\0"+
    "\7\12\11\0\1\12\3\0\2\12\1\0\10\12\1\0"+
    "\2\12\1\0\1\12\1\u0103\14\12\2\0\1\12\22\0"+
    "\7\12\11\0\1\12\3\0\2\12\1\0\10\12\1\0"+
    "\2\12\1\u0104\1\u0105\15\12\2\0\1\12\22\0\7\12"+
    "\11\0\1\12\3\0\2\12\1\0\10\12\1\0\2\12"+
    "\1\0\5\12\1\u0106\10\12\2\0\1\12\22\0\7\12"+
    "\11\0\1\12\3\0\2\12\1\0\5\12\1\u0107\2\12"+
    "\1\0\2\12\1\u0108\1\u0109\15\12\2\0\1\12\22\0"+
    "\7\12\11\0\1\12\3\0\2\12\1\0\10\12\1\0"+
    "\2\12\1\0\2\12\1\u010a\13\12\2\0\1\12\22\0"+
    "\7\12\11\0\1\12\3\0\2\12\1\0\10\12\1\0"+
    "\2\12\1\u010b\1\u010c\15\12\2\0\1\12\22\0\7\12"+
    "\23\0\1\u010d\12\0\1\u010e\2\0\1\u010f\3\0\1\u0110"+
    "\1\u0111\72\0\2\u0112\73\0\1\u0113\2\0\1\u0114\105\0"+
    "\1\u0115\102\0\1\u0116\1\u0117\1\u0118\6\0\2\u0119\11\0"+
    "\1\u011a\60\0\1\u011b\1\u011c\7\0\1\u011d\6\0\1\u011e"+
    "\35\0\1\u011f\1\u0120\1\u0121\1\u0122\1\u0123\7\0\2\263"+
    "\1\264\1\u0124\3\263\1\264\76\263\3\264\1\u0125\102\264"+
    "\4\0\1\12\3\0\2\12\1\0\3\12\1\u0126\4\12"+
    "\1\0\2\12\1\0\16\12\2\0\1\12\22\0\7\12"+
    "\11\0\1\12\3\0\2\12\1\0\10\12\1\0\2\12"+
    "\1\u0127\1\u0128\15\12\2\0\1\12\22\0\7\12\23\0"+
    "\1\u0129\73\0\1\12\3\0\2\12\1\0\3\12\1\u012a"+
    "\4\12\1\0\2\12\1\0\16\12\2\0\1\12\22\0"+
    "\7\12\21\0\1\u012b\75\0\1\12\3\0\2\12\1\0"+
    "\1\12\1\u012c\6\12\1\0\2\12\1\0\16\12\2\0"+
    "\1\12\22\0\7\12\11\0\1\12\3\0\2\12\1\0"+
    "\10\12\1\0\2\12\1\0\16\12\1\u012d\1\0\1\12"+
    "\22\0\7\12\41\0\1\u012e\55\0\1\12\3\0\2\12"+
    "\1\0\10\12\1\0\2\12\1\0\5\12\1\u012f\10\12"+
    "\2\0\1\12\22\0\7\12\41\0\1\u0130\2\0\1\u0131"+
    "\52\0\1\12\3\0\2\12\1\0\10\12\1\0\2\12"+
    "\1\0\5\12\1\u0132\2\12\1\u0133\5\12\2\0\1\12"+
    "\22\0\7\12\11\0\1\12\3\0\2\12\1\0\10\12"+
    "\1\0\2\12\1\0\10\12\1\u0134\5\12\2\0\1\12"+
    "\22\0\7\12\11\0\1\12\3\0\2\12\1\0\5\12"+
    "\1\u0135\2\12\1\0\2\12\1\0\16\12\2\0\1\12"+
    "\22\0\7\12\11\0\1\12\3\0\2\12\1\0\1\12"+
    "\1\u0136\6\12\1\0\2\12\1\0\16\12\2\0\1\12"+
    "\22\0\7\12\11\0\1\12\3\0\2\12\1\0\4\12"+
    "\1\u0137\3\12\1\0\2\12\1\0\16\12\2\0\1\12"+
    "\22\0\7\12\11\0\1\12\3\0\2\12\1\0\10\12"+
    "\1\0\2\12\1\0\2\12\1\u0138\13\12\2\0\1\12"+
    "\22\0\7\12\33\0\2\u0139\62\0\1\12\3\0\2\12"+
    "\1\0\10\12\1\0\2\12\1\u0139\1\u013a\15\12\2\0"+
    "\1\12\22\0\7\12\43\0\1\u013b\53\0\1\12\3\0"+
    "\2\12\1\0\10\12\1\0\2\12\1\0\7\12\1\u013c"+
    "\6\12\2\0\1\12\22\0\7\12\11\0\1\12\3\0"+
    "\2\12\1\0\2\12\1\u013d\5\12\1\0\2\12\1\0"+
    "\16\12\2\0\1\12\22\0\7\12\11\0\1\12\3\0"+
    "\2\12\1\0\2\12\1\u013e\5\12\1\0\2\12\1\0"+
    "\16\12\2\0\1\12\22\0\7\12\11\0\1\12\3\0"+
    "\2\12\1\0\7\12\1\u013f\1\0\2\12\1\0\16\12"+
    "\2\0\1\12\22\0\7\12\11\0\1\12\3\0\2\12"+
    "\1\0\1\12\1\u0140\6\12\1\0\2\12\1\0\16\12"+
    "\2\0\1\12\22\0\7\12\11\0\1\12\3\0\2\12"+
    "\1\0\10\12\1\u0141\1\u0142\1\12\1\0\16\12\2\0"+
    "\1\12\22\0\7\12\11\0\1\12\3\0\2\12\1\0"+
    "\10\12\1\0\2\12\1\0\5\12\1\u0143\10\12\2\0"+
    "\1\12\22\0\7\12\24\0\1\u0144\72\0\1\12\3\0"+
    "\2\12\1\0\4\12\1\u0145\3\12\1\0\2\12\1\0"+
    "\16\12\2\0\1\12\22\0\7\12\11\0\1\12\3\0"+
    "\2\12\1\0\10\12\1\0\2\12\1\0\4\12\1\u0146"+
    "\11\12\2\0\1\12\22\0\7\12\11\0\1\12\3\0"+
    "\2\12\1\0\10\12\1\0\2\12\1\0\11\12\1\u0147"+
    "\4\12\2\0\1\12\22\0\7\12\11\0\1\12\3\0"+
    "\2\12\1\0\10\12\1\0\2\12\1\0\7\12\1\u0148"+
    "\6\12\2\0\1\12\22\0\7\12\21\0\1\u0149\106\0"+
    "\1\u014a\130\0\1\u014b\73\0\2\u014c\112\0\1\u014d\70\0"+
    "\1\u014e\122\0\1\u014f\55\0\1\12\3\0\2\12\1\0"+
    "\1\12\1\u0150\6\12\1\0\2\12\1\0\16\12\2\0"+
    "\1\12\22\0\7\12\11\0\1\12\3\0\2\12\1\0"+
    "\2\12\1\u0151\5\12\1\0\2\12\1\0\16\12\2\0"+
    "\1\12\22\0\7\12\11\0\1\12\3\0\2\12\1\0"+
    "\10\12\1\0\2\12\1\0\11\12\1\u0152\4\12\2\0"+
    "\1\12\22\0\7\12\11\0\1\12\3\0\2\12\1\0"+
    "\10\12\1\0\2\12\1\u014c\1\u0153\15\12\2\0\1\12"+
    "\22\0\7\12\11\0\1\12\3\0\2\12\1\0\10\12"+
    "\1\0\2\12\1\0\5\12\1\u0154\10\12\2\0\1\12"+
    "\22\0\7\12\11\0\1\12\3\0\2\12\1\0\4\12"+
    "\1\u0155\3\12\1\0\2\12\1\0\16\12\2\0\1\12"+
    "\22\0\7\12\11\0\1\12\3\0\2\12\1\0\10\12"+
    "\1\0\2\12\1\0\5\12\1\u0156\10\12\2\0\1\12"+
    "\22\0\7\12\25\0\1\u0157\124\0\1\u0158\52\0\1\12"+
    "\3\0\2\12\1\0\5\12\1\u0159\2\12\1\0\2\12"+
    "\1\0\16\12\2\0\1\12\22\0\7\12\11\0\1\12"+
    "\3\0\2\12\1\0\10\12\1\0\2\12\1\0\10\12"+
    "\1\u015a\5\12\2\0\1\12\22\0\7\12\11\0\1\12"+
    "\3\0\2\12\1\0\5\12\1\u015b\2\12\1\0\2\12"+
    "\1\0\16\12\2\0\1\12\22\0\7\12\42\0\1\u015c"+
    "\54\0\1\12\3\0\2\12\1\0\10\12\1\0\2\12"+
    "\1\0\6\12\1\u015d\7\12\2\0\1\12\22\0\7\12"+
    "\11\0\1\12\3\0\2\12\1\0\4\12\1\u015e\3\12"+
    "\1\0\2\12\1\0\16\12\2\0\1\12\22\0\7\12"+
    "\11\0\1\12\3\0\2\12\1\0\10\12\1\0\2\12"+
    "\1\0\10\12\1\u015f\5\12\2\0\1\12\22\0\7\12"+
    "\11\0\1\12\3\0\2\12\1\0\10\12\1\0\2\12"+
    "\1\0\5\12\1\u0160\10\12\2\0\1\12\22\0\7\12"+
    "\11\0\1\12\3\0\2\12\1\0\4\12\1\u0161\3\12"+
    "\1\0\2\12\1\0\16\12\2\0\1\12\22\0\7\12"+
    "\11\0\1\12\3\0\2\12\1\0\7\12\1\u0162\1\0"+
    "\2\12\1\0\16\12\2\0\1\12\22\0\7\12\11\0"+
    "\1\12\3\0\2\12\1\0\4\12\1\u0163\3\12\1\0"+
    "\2\12\1\0\16\12\2\0\1\12\22\0\7\12\11\0"+
    "\1\12\3\0\2\12\1\0\10\12\1\0\2\12\1\0"+
    "\5\12\1\u0164\10\12\2\0\1\12\22\0\7\12\21\0"+
    "\1\u0165\75\0\1\12\3\0\2\12\1\0\1\12\1\u0166"+
    "\6\12\1\0\2\12\1\0\16\12\2\0\1\12\22\0"+
    "\7\12\11\0\1\12\3\0\2\12\1\0\1\12\1\u0167"+
    "\6\12\1\0\2\12\1\0\16\12\2\0\1\12\22\0"+
    "\7\12\11\0\1\12\3\0\2\12\1\0\10\12\1\u0168"+
    "\1\u0169\1\12\1\0\16\12\2\0\1\12\22\0\7\12"+
    "\11\0\1\12\3\0\2\12\1\0\10\12\1\u016a\1\u016b"+
    "\1\12\1\0\16\12\2\0\1\12\22\0\7\12\11\0"+
    "\1\12\3\0\2\12\1\0\2\12\1\u016c\5\12\1\0"+
    "\2\12\1\0\16\12\2\0\1\12\22\0\7\12\11\0"+
    "\1\12\3\0\2\12\1\0\10\12\1\0\2\12\1\0"+
    "\5\12\1\u016d\10\12\2\0\1\12\22\0\7\12\11\0"+
    "\1\12\3\0\2\12\1\0\10\12\1\0\2\12\1\0"+
    "\6\12\1\u016e\7\12\2\0\1\12\22\0\7\12\11\0"+
    "\1\12\3\0\2\12\1\0\10\12\1\0\2\12\1\0"+
    "\5\12\1\u016f\10\12\2\0\1\12\22\0\7\12\30\0"+
    "\2\u0170\65\0\1\12\3\0\2\12\1\0\10\12\1\u0170"+
    "\1\u0171\1\12\1\0\16\12\2\0\1\12\22\0\7\12"+
    "\11\0\1\12\3\0\2\12\1\0\10\12\1\0\2\12"+
    "\1\u0172\1\u0173\15\12\2\0\1\12\22\0\7\12\11\0"+
    "\1\12\3\0\2\12\1\0\10\12\1\0\2\12\1\0"+
    "\5\12\1\u0174\10\12\2\0\1\12\22\0\7\12\20\0"+
    "\1\u0175\21\0\1\u0176\54\0\1\12\3\0\2\12\1\0"+
    "\1\u0177\7\12\1\0\2\12\1\0\6\12\1\u0178\7\12"+
    "\2\0\1\12\22\0\7\12\11\0\1\12\3\0\2\12"+
    "\1\0\7\12\1\u0179\1\0\2\12\1\0\16\12\2\0"+
    "\1\12\22\0\7\12\27\0\1\u017a\67\0\1\12\3\0"+
    "\2\12\1\0\7\12\1\u017b\1\0\2\12\1\0\16\12"+
    "\2\0\1\12\22\0\7\12\33\0\2\u017c\73\0\1\u017d"+
    "\2\0\1\u017e\102\0\1\u017f\1\u0180\1\u0181\6\0\2\u0182"+
    "\11\0\1\u0183\123\0\1\u0184\42\0\1\u0185\1\u0186\7\0"+
    "\1\u0187\6\0\1\u0188\35\0\1\u0189\1\u018a\1\u018b\1\u018c"+
    "\1\u018d\22\0\1\u018e\110\0\1\u018f\111\0\1\u0190\114\0"+
    "\1\u0191\110\0\1\u0192\70\0\1\u0193\116\0\1\u0194\55\0"+
    "\1\263\1\127\1\264\1\u0124\3\263\1\264\76\263\1\264"+
    "\1\u0195\1\264\1\u0125\102\264\4\0\1\12\3\0\2\12"+
    "\1\0\1\12\1\u0196\2\12\1\u0197\3\12\1\0\2\12"+
    "\1\0\16\12\2\0\1\12\22\0\7\12\24\0\1\u0198"+
    "\72\0\1\12\3\0\2\12\1\0\4\12\1\u0199\3\12"+
    "\1\0\2\12\1\0\16\12\2\0\1\12\22\0\7\12"+
    "\33\0\2\u019a\62\0\1\12\3\0\2\12\1\0\10\12"+
    "\1\0\2\12\1\u019a\1\u019b\15\12\2\0\1\12\22\0"+
    "\7\12\26\0\1\u019c\1\0\2\u019d\1\0\2\u019e\1\u019f"+
    "\74\0\1\u01a0\110\0\1\u01a1\67\0\1\12\3\0\2\12"+
    "\1\0\4\12\1\u01a2\3\12\1\0\2\12\1\0\16\12"+
    "\2\0\1\12\22\0\7\12\11\0\1\12\3\0\2\12"+
    "\1\0\7\12\1\u01a3\1\0\2\12\1\0\16\12\2\0"+
    "\1\12\22\0\7\12\11\0\1\12\3\0\2\12\1\0"+
    "\2\12\1\u01a4\5\12\1\0\2\12\1\0\16\12\2\0"+
    "\1\12\22\0\7\12\11\0\1\12\3\0\2\12\1\0"+
    "\10\12\1\0\2\12\1\0\4\12\1\u01a5\11\12\2\0"+
    "\1\12\22\0\7\12\11\0\1\12\3\0\2\12\1\0"+
    "\10\12\1\0\2\12\1\0\10\12\1\u01a6\5\12\2\0"+
    "\1\12\22\0\7\12\11\0\1\12\3\0\2\12\1\0"+
    "\7\12\1\u01a7\1\0\2\12\1\0\16\12\2\0\1\12"+
    "\22\0\7\12\23\0\1\u01a8\73\0\1\12\3\0\2\12"+
    "\1\0\3\12\1\u01a9\4\12\1\0\2\12\1\0\16\12"+
    "\2\0\1\12\22\0\7\12\42\0\1\u01aa\54\0\1\12"+
    "\3\0\2\12\1\0\10\12\1\0\2\12\1\0\6\12"+
    "\1\u01ab\7\12\2\0\1\12\22\0\7\12\11\0\1\12"+
    "\3\0\2\12\1\0\10\12\1\0\2\12\1\u01ac\1\u01ad"+
    "\15\12\2\0\1\12\22\0\7\12\11\0\1\12\3\0"+
    "\2\12\1\0\4\12\1\u01ae\3\12\1\0\2\12\1\0"+
    "\16\12\2\0\1\12\22\0\7\12\11\0\1\12\3\0"+
    "\2\12\1\0\10\12\1\0\2\12\1\0\4\12\1\u01af"+
    "\11\12\2\0\1\12\22\0\7\12\25\0\1\u01b0\71\0"+
    "\1\12\3\0\2\12\1\0\5\12\1\u01b1\2\12\1\0"+
    "\2\12\1\0\16\12\2\0\1\12\22\0\7\12\27\0"+
    "\1\u01b2\67\0\1\12\3\0\2\12\1\0\7\12\1\u01b3"+
    "\1\0\2\12\1\0\16\12\2\0\1\12\22\0\7\12"+
    "\11\0\1\12\3\0\2\12\1\0\10\12\1\0\2\12"+
    "\1\0\5\12\1\u01b4\10\12\2\0\1\12\22\0\7\12"+
    "\40\0\1\u01b5\66\0\1\u01b6\126\0\1\u01b7\76\0\2\u01b8"+
    "\111\0\1\u01b9\56\0\1\12\3\0\2\12\1\0\10\12"+
    "\1\0\2\12\1\0\4\12\1\u01ba\11\12\2\0\1\12"+
    "\22\0\7\12\11\0\1\12\3\0\2\12\1\0\1\12"+
    "\1\u01bb\6\12\1\0\2\12\1\0\16\12\2\0\1\12"+
    "\22\0\7\12\11\0\1\12\3\0\2\12\1\0\10\12"+
    "\1\0\2\12\1\0\6\12\1\u01bc\7\12\2\0\1\12"+
    "\22\0\7\12\11\0\1\12\3\0\2\12\1\0\10\12"+
    "\1\0\2\12\1\u01b8\1\u01bd\15\12\2\0\1\12\22\0"+
    "\7\12\11\0\1\12\3\0\2\12\1\0\10\12\1\0"+
    "\2\12\1\0\4\12\1\u01be\11\12\2\0\1\12\22\0"+
    "\7\12\22\0\1\u01bf\116\0\2\u01c0\62\0\1\12\3\0"+
    "\2\12\1\0\2\12\1\u01c1\5\12\1\0\2\12\1\0"+
    "\16\12\2\0\1\12\22\0\7\12\11\0\1\12\3\0"+
    "\2\12\1\0\10\12\1\0\2\12\1\u01c0\1\u01c2\15\12"+
    "\2\0\1\12\22\0\7\12\11\0\1\12\3\0\2\12"+
    "\1\0\3\12\1\u01c3\4\12\1\0\2\12\1\0\16\12"+
    "\2\0\1\12\22\0\7\12\11\0\1\12\3\0\2\12"+
    "\1\0\3\12\1\u01c4\4\12\1\0\2\12\1\0\16\12"+
    "\2\0\1\12\22\0\7\12\11\0\1\12\3\0\2\12"+
    "\1\0\7\12\1\u01c5\1\0\2\12\1\0\16\12\2\0"+
    "\1\12\22\0\7\12\11\0\1\12\3\0\2\12\1\0"+
    "\10\12\1\0\2\12\1\u01c6\1\u01c7\15\12\2\0\1\12"+
    "\22\0\7\12\11\0\1\12\3\0\2\12\1\0\10\12"+
    "\1\0\2\12\1\0\16\12\1\0\1\u01c8\1\u01c9\22\0"+
    "\7\12\11\0\1\12\3\0\2\12\1\0\1\12\1\u01ca"+
    "\6\12\1\0\2\12\1\0\16\12\2\0\1\12\22\0"+
    "\7\12\11\0\1\12\3\0\2\12\1\0\7\12\1\u01cb"+
    "\1\0\2\12\1\0\16\12\2\0\1\12\22\0\7\12"+
    "\11\0\1\12\3\0\2\12\1\0\2\12\1\u01cc\5\12"+
    "\1\0\2\12\1\0\16\12\2\0\1\12\22\0\7\12"+
    "\11\0\1\12\3\0\2\12\1\0\10\12\1\0\2\12"+
    "\1\0\6\12\1\u01cd\7\12\2\0\1\12\22\0\7\12"+
    "\25\0\1\u01ce\71\0\1\12\3\0\2\12\1\0\5\12"+
    "\1\u01cf\2\12\1\0\2\12\1\0\16\12\2\0\1\12"+
    "\22\0\7\12\21\0\1\u01d0\6\0\2\u01d1\65\0\1\12"+
    "\3\0\2\12\1\0\1\12\1\u01d2\6\12\1\u01d1\1\u01d3"+
    "\1\12\1\0\16\12\2\0\1\12\22\0\7\12\11\0"+
    "\1\12\3\0\2\12\1\0\10\12\1\0\2\12\1\0"+
    "\4\12\1\u01d4\11\12\2\0\1\12\22\0\7\12\27\0"+
    "\1\u01d5\67\0\1\12\3\0\2\12\1\0\7\12\1\u01d6"+
    "\1\0\2\12\1\0\16\12\2\0\1\12\22\0\7\12"+
    "\11\0\1\12\3\0\2\12\1\0\1\12\1\u01d7\6\12"+
    "\1\0\2\12\1\0\16\12\2\0\1\12\22\0\7\12"+
    "\24\0\1\u01d8\122\0\1\u01d9\55\0\1\12\3\0\2\12"+
    "\1\0\4\12\1\u01da\3\12\1\0\2\12\1\0\16\12"+
    "\2\0\1\12\22\0\7\12\11\0\1\12\3\0\2\12"+
    "\1\0\10\12\1\0\2\12\1\0\5\12\1\u01db\10\12"+
    "\2\0\1\12\22\0\7\12\11\0\1\12\3\0\2\12"+
    "\1\0\10\12\1\0\2\12\1\u01dc\1\u01dd\15\12\2\0"+
    "\1\12\22\0\7\12\21\0\1\u01de\75\0\1\12\3\0"+
    "\2\12\1\0\1\12\1\u01df\6\12\1\0\2\12\1\0"+
    "\16\12\2\0\1\12\22\0\7\12\20\0\1\u01e0\151\0"+
    "\1\u01e1\44\0\1\u01e2\146\0\1\u01e3\105\0\1\u01e4\57\0"+
    "\1\u01e5\110\0\1\u01e6\130\0\1\u01e7\45\0\1\u01e8\145\0"+
    "\1\u01e9\105\0\1\u01ea\56\0\1\u01eb\134\0\1\u01ec\105\0"+
    "\1\u01ed\105\0\1\u01ee\105\0\1\u01ef\105\0\1\u01f0\72\0"+
    "\1\u01f1\61\0\1\u01f2\107\0\1\u01f3\105\0\1\u01f4\101\0"+
    "\1\u01f5\111\0\1\u01f6\67\0\1\12\3\0\2\12\1\0"+
    "\3\12\1\u01f7\4\12\1\0\2\12\1\0\16\12\2\0"+
    "\1\12\22\0\7\12\36\0\1\u01f8\60\0\1\12\3\0"+
    "\2\12\1\0\10\12\1\0\2\12\1\0\2\12\1\u01f9"+
    "\13\12\2\0\1\12\22\0\7\12\26\0\1\u01fa\70\0"+
    "\1\12\3\0\2\12\1\0\6\12\1\u01fb\1\12\1\0"+
    "\2\12\1\0\16\12\2\0\1\12\22\0\7\12\44\0"+
    "\1\u01fc\105\0\1\u01fd\67\0\1\u01fe\104\0\1\u01ff\121\0"+
    "\1\u0200\55\0\1\12\3\0\2\12\1\0\10\12\1\0"+
    "\2\12\1\0\5\12\1\u0201\10\12\2\0\1\12\22\0"+
    "\7\12\11\0\1\12\3\0\2\12\1\0\10\12\1\0"+
    "\2\12\1\0\6\12\1\u0202\7\12\2\0\1\12\22\0"+
    "\7\12\11\0\1\12\3\0\2\12\1\0\10\12\1\0"+
    "\2\12\1\0\12\12\1\u0203\3\12\2\0\1\12\22\0"+
    "\7\12\11\0\1\12\3\0\2\12\1\0\7\12\1\u0204"+
    "\1\0\2\12\1\0\16\12\2\0\1\12\22\0\7\12"+
    "\11\0\1\12\3\0\2\12\1\0\1\12\1\u0205\6\12"+
    "\1\0\2\12\1\0\16\12\2\0\1\12\22\0\7\12"+
    "\33\0\2\u0206\62\0\1\12\3\0\2\12\1\0\10\12"+
    "\1\0\2\12\1\u0206\1\u0207\15\12\2\0\1\12\22\0"+
    "\7\12\27\0\1\u0208\67\0\1\12\3\0\2\12\1\0"+
    "\7\12\1\u0209\1\0\2\12\1\0\16\12\2\0\1\12"+
    "\22\0\7\12\11\0\1\12\3\0\2\12\1\0\10\12"+
    "\1\0\2\12\1\0\6\12\1\u020a\7\12\2\0\1\12"+
    "\22\0\7\12\11\0\1\12\3\0\2\12\1\0\10\12"+
    "\1\0\2\12\1\0\5\12\1\u020b\10\12\2\0\1\12"+
    "\22\0\7\12\11\0\1\12\3\0\2\12\1\0\10\12"+
    "\1\0\2\12\1\u020c\1\u020d\15\12\2\0\1\12\22\0"+
    "\7\12\41\0\1\u020e\107\0\1\u020f\102\0\1\u0210\113\0"+
    "\1\u0211\50\0\1\12\3\0\2\12\1\0\10\12\1\0"+
    "\2\12\1\0\5\12\1\u0212\10\12\2\0\1\12\22\0"+
    "\7\12\11\0\1\12\3\0\2\12\1\0\10\12\1\0"+
    "\2\12\1\0\7\12\1\u0213\6\12\2\0\1\12\22\0"+
    "\7\12\11\0\1\12\3\0\2\12\1\0\10\12\1\0"+
    "\2\12\1\0\4\12\1\u0214\11\12\2\0\1\12\22\0"+
    "\7\12\11\0\1\12\3\0\2\12\1\0\10\12\1\0"+
    "\2\12\1\0\12\12\1\u0215\3\12\2\0\1\12\22\0"+
    "\7\12\41\0\1\u0216\65\0\1\u0217\75\0\1\12\3\0"+
    "\2\12\1\0\10\12\1\0\2\12\1\0\5\12\1\u0218"+
    "\10\12\2\0\1\12\22\0\7\12\11\0\1\12\3\0"+
    "\2\12\1\0\1\12\1\u0219\6\12\1\0\2\12\1\0"+
    "\16\12\2\0\1\12\22\0\7\12\11\0\1\12\3\0"+
    "\2\12\1\0\5\12\1\u021a\2\12\1\0\2\12\1\0"+
    "\16\12\2\0\1\12\22\0\7\12\11\0\1\12\3\0"+
    "\2\12\1\0\5\12\1\u021b\2\12\1\0\2\12\1\0"+
    "\16\12\2\0\1\12\22\0\7\12\11\0\1\12\3\0"+
    "\2\12\1\0\1\12\1\u021c\6\12\1\0\2\12\1\0"+
    "\16\12\2\0\1\12\22\0\7\12\45\0\1\u021d\51\0"+
    "\1\12\3\0\2\12\1\0\10\12\1\0\2\12\1\0"+
    "\11\12\1\u021e\4\12\2\0\1\12\22\0\7\12\11\0"+
    "\1\12\3\0\2\12\1\0\4\12\1\u021f\3\12\1\0"+
    "\2\12\1\0\16\12\2\0\1\12\22\0\7\12\11\0"+
    "\1\12\3\0\2\12\1\0\4\12\1\u0220\3\12\1\0"+
    "\2\12\1\0\16\12\2\0\1\12\22\0\7\12\11\0"+
    "\1\12\3\0\2\12\1\0\10\12\1\0\2\12\1\0"+
    "\5\12\1\u0221\10\12\2\0\1\12\22\0\7\12\27\0"+
    "\1\u0222\67\0\1\12\3\0\2\12\1\0\7\12\1\u0223"+
    "\1\0\2\12\1\0\16\12\2\0\1\12\22\0\7\12"+
    "\30\0\2\u0224\65\0\1\12\3\0\2\12\1\0\10\12"+
    "\1\u0224\1\u0225\1\12\1\0\16\12\2\0\1\12\22\0"+
    "\7\12\11\0\1\12\3\0\2\12\1\0\5\12\1\u0226"+
    "\2\12\1\0\2\12\1\0\16\12\2\0\1\12\22\0"+
    "\7\12\11\0\1\12\3\0\2\12\1\0\10\12\1\0"+
    "\2\12\1\0\4\12\1\u0227\11\12\2\0\1\12\22\0"+
    "\7\12\41\0\1\u0228\55\0\1\12\3\0\2\12\1\0"+
    "\10\12\1\0\2\12\1\0\5\12\1\u0229\10\12\2\0"+
    "\1\12\22\0\7\12\40\0\1\u022a\56\0\1\12\3\0"+
    "\2\12\1\0\10\12\1\0\2\12\1\0\4\12\1\u022b"+
    "\11\12\2\0\1\12\22\0\7\12\64\0\1\u022c\72\0"+
    "\1\u022d\63\0\1\u022e\105\0\1\u022f\101\0\1\u0230\111\0"+
    "\1\u0231\100\0\1\u0232\104\0\1\u0233\105\0\1\u0234\150\0"+
    "\1\u0235\32\0\1\12\3\0\2\12\1\0\1\12\1\u0236"+
    "\6\12\1\0\2\12\1\0\16\12\2\0\1\12\22\0"+
    "\7\12\27\0\1\u0237\67\0\1\12\3\0\2\12\1\0"+
    "\7\12\1\u0238\1\0\2\12\1\0\16\12\2\0\1\12"+
    "\22\0\7\12\42\0\1\u0239\101\0\1\u023a\72\0\1\u023b"+
    "\73\0\1\12\3\0\2\12\1\0\4\12\1\u023c\3\12"+
    "\1\0\2\12\1\0\16\12\2\0\1\12\22\0\7\12"+
    "\11\0\1\12\3\0\2\12\1\0\10\12\1\0\2\12"+
    "\1\0\5\12\1\u023d\10\12\2\0\1\12\22\0\7\12"+
    "\22\0\1\u023e\74\0\1\12\3\0\2\12\1\0\2\12"+
    "\1\u023f\5\12\1\0\2\12\1\0\16\12\2\0\1\12"+
    "\22\0\7\12\27\0\1\u0240\67\0\1\12\3\0\2\12"+
    "\1\0\7\12\1\u0241\1\0\2\12\1\0\16\12\2\0"+
    "\1\12\22\0\7\12\11\0\1\12\3\0\2\12\1\0"+
    "\10\12\1\0\2\12\1\0\3\12\1\u0242\12\12\2\0"+
    "\1\12\22\0\7\12\25\0\1\u0243\71\0\1\12\3\0"+
    "\2\12\1\0\5\12\1\u0244\2\12\1\0\2\12\1\0"+
    "\16\12\2\0\1\12\22\0\7\12\22\0\1\u0245\74\0"+
    "\1\12\3\0\2\12\1\0\2\12\1\u0246\5\12\1\0"+
    "\2\12\1\0\16\12\2\0\1\12\22\0\7\12\11\0"+
    "\1\12\3\0\2\12\1\0\10\12\1\u0247\1\u0248\1\12"+
    "\1\0\16\12\2\0\1\12\22\0\7\12\27\0\1\u0249"+
    "\67\0\1\12\3\0\2\12\1\0\7\12\1\u024a\1\0"+
    "\2\12\1\0\16\12\2\0\1\12\22\0\7\12\11\0"+
    "\1\12\3\0\2\12\1\0\10\12\1\0\2\12\1\0"+
    "\6\12\1\u024b\7\12\2\0\1\12\22\0\7\12\11\0"+
    "\1\12\3\0\2\12\1\0\3\12\1\u024c\4\12\1\0"+
    "\2\12\1\0\16\12\2\0\1\12\22\0\7\12\11\0"+
    "\1\12\3\0\2\12\1\0\4\12\1\u024d\3\12\1\0"+
    "\2\12\1\0\16\12\2\0\1\12\22\0\7\12\21\0"+
    "\1\u024e\75\0\1\12\3\0\2\12\1\0\1\12\1\u024f"+
    "\6\12\1\0\2\12\1\0\16\12\2\0\1\12\22\0"+
    "\7\12\11\0\1\12\3\0\2\12\1\0\7\12\1\u0250"+
    "\1\0\2\12\1\0\16\12\2\0\1\12\22\0\7\12"+
    "\11\0\1\12\3\0\2\12\1\0\10\12\1\0\2\12"+
    "\1\0\5\12\1\u0251\10\12\2\0\1\12\22\0\7\12"+
    "\21\0\1\u0252\75\0\1\12\3\0\2\12\1\0\1\12"+
    "\1\u0253\6\12\1\0\2\12\1\0\16\12\2\0\1\12"+
    "\22\0\7\12\64\0\1\u0254\42\0\1\u0255\105\0\1\u0256"+
    "\150\0\1\u0257\105\0\1\u0258\32\0\1\12\3\0\2\12"+
    "\1\0\2\12\1\u0142\5\12\1\0\2\12\1\0\16\12"+
    "\2\0\1\12\22\0\7\12\21\0\1\u0259\75\0\1\12"+
    "\3\0\2\12\1\0\1\12\1\u025a\6\12\1\0\2\12"+
    "\1\0\16\12\2\0\1\12\22\0\7\12\40\0\1\u025b"+
    "\111\0\1\u025c\66\0\1\u025d\71\0\1\12\3\0\2\12"+
    "\1\0\5\12\1\u025e\2\12\1\0\2\12\1\0\16\12"+
    "\2\0\1\12\22\0\7\12\11\0\1\12\3\0\2\12"+
    "\1\0\4\12\1\u025f\3\12\1\0\2\12\1\0\16\12"+
    "\2\0\1\12\22\0\7\12\42\0\1\u0260\54\0\1\12"+
    "\3\0\2\12\1\0\10\12\1\0\2\12\1\0\6\12"+
    "\1\u0261\7\12\2\0\1\12\22\0\7\12\23\0\1\u0262"+
    "\73\0\1\12\3\0\2\12\1\0\3\12\1\u0263\4\12"+
    "\1\0\2\12\1\0\16\12\2\0\1\12\22\0\7\12"+
    "\33\0\2\u0264\62\0\1\12\3\0\2\12\1\0\10\12"+
    "\1\0\2\12\1\u0264\1\u0265\15\12\2\0\1\12\22\0"+
    "\7\12\11\0\1\12\3\0\2\12\1\0\5\12\1\u0266"+
    "\2\12\1\0\2\12\1\0\16\12\2\0\1\12\22\0"+
    "\7\12\11\0\1\12\3\0\2\12\1\0\2\12\1\u0267"+
    "\5\12\1\0\2\12\1\0\16\12\2\0\1\12\22\0"+
    "\7\12\12\0\1\u0268\104\0\1\12\1\u0268\2\0\2\12"+
    "\1\0\10\12\1\0\2\12\1\0\16\12\2\0\1\12"+
    "\22\0\7\12\11\0\1\12\3\0\2\12\1\0\5\12"+
    "\1\u0269\2\12\1\0\2\12\1\0\16\12\2\0\1\12"+
    "\22\0\7\12\11\0\1\12\3\0\2\12\1\0\1\12"+
    "\1\u026a\6\12\1\0\2\12\1\0\16\12\2\0\1\12"+
    "\22\0\7\12\64\0\1\u026b\105\0\1\u026c\51\0\2\u026d"+
    "\65\0\1\12\3\0\2\12\1\0\10\12\1\u026d\1\u026e"+
    "\1\12\1\0\16\12\2\0\1\12\22\0\7\12\41\0"+
    "\1\u026f\73\0\1\u0270\67\0\1\12\3\0\2\12\1\0"+
    "\3\12\1\u0271\4\12\1\0\2\12\1\0\16\12\2\0"+
    "\1\12\22\0\7\12\24\0\1\u0272\72\0\1\12\3\0"+
    "\2\12\1\0\4\12\1\u0273\3\12\1\0\2\12\1\0"+
    "\16\12\2\0\1\12\22\0\7\12\40\0\1\u0274\56\0"+
    "\1\12\3\0\2\12\1\0\10\12\1\0\2\12\1\0"+
    "\4\12\1\u0275\11\12\2\0\1\12\22\0\7\12\11\0"+
    "\1\12\3\0\2\12\1\0\10\12\1\0\2\12\1\u0276"+
    "\1\u0277\15\12\2\0\1\12\22\0\7\12\22\0\1\u0278"+
    "\24\0\1\u0279\47\0\1\12\3\0\2\12\1\0\2\12"+
    "\1\u027a\5\12\1\0\2\12\1\0\16\12\2\0\1\12"+
    "\22\0\7\12\11\0\1\12\3\0\2\12\1\0\3\12"+
    "\1\u027b\4\12\1\0\2\12\1\0\16\12\2\0\1\12"+
    "\22\0\7\12\33\0\2\u027c\72\0\1\u027d\75\0\1\12"+
    "\3\0\2\12\1\0\5\12\1\u027e\2\12\1\0\2\12"+
    "\1\0\16\12\2\0\1\12\22\0\7\12\24\0\1\u027f"+
    "\72\0\1\12\3\0\2\12\1\0\4\12\1\u0280\3\12"+
    "\1\0\2\12\1\0\16\12\2\0\1\12\22\0\7\12"+
    "\25\0\1\u0281\71\0\1\12\3\0\2\12\1\0\5\12"+
    "\1\u0282\2\12\1\0\2\12\1\0\16\12\2\0\1\12"+
    "\22\0\7\12\21\0\1\u0283\106\0\1\u0284\110\0\1\u0285"+
    "\102\0\1\u0286\74\0\1\12\3\0\2\12\1\0\2\12"+
    "\1\u0287\5\12\1\0\2\12\1\0\16\12\2\0\1\12"+
    "\22\0\7\12\30\0\2\u0288\65\0\1\12\3\0\2\12"+
    "\1\0\10\12\1\u0288\1\u0289\1\12\1\0\16\12\2\0"+
    "\1\12\22\0\7\12\24\0\1\u028a\114\0\2\u028b\113\0"+
    "\1\u028c\66\0\1\u028d\123\0\1\u028e\73\0\1\u028f\77\0"+
    "\1\u0290\117\0\2\u0291\100\0\1\u0292\120\0\1\u0293\76\0"+
    "\2\u0294\72\0\1\u0295\126\0\1\u0296\64\0\1\u0297\71\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[31640];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\1\1\11\4\1\1\11\2\1\1\11\30\1\3\11"+
    "\4\1\7\11\3\1\3\11\41\1\1\11\1\1\1\0"+
    "\1\1\1\11\1\0\12\1\1\0\2\1\1\11\7\1"+
    "\1\0\3\1\5\0\5\1\2\11\3\0\33\1\2\11"+
    "\5\0\1\11\1\0\10\11\1\1\1\0\1\1\1\11"+
    "\2\1\1\0\1\1\1\0\2\1\1\0\1\1\1\0"+
    "\6\1\1\0\1\11\2\1\1\0\10\1\1\0\4\1"+
    "\6\0\1\11\1\0\10\1\1\0\1\11\1\0\4\1"+
    "\1\0\10\1\1\0\12\1\1\0\3\1\1\0\2\1"+
    "\1\0\1\1\6\0\1\11\2\0\2\11\2\0\1\11"+
    "\1\0\2\11\1\0\5\11\1\1\1\0\1\1\1\0"+
    "\1\1\1\11\3\1\1\0\1\11\1\1\2\0\7\1"+
    "\1\0\1\1\1\0\5\1\1\0\2\1\1\0\4\1"+
    "\2\0\1\11\2\0\1\11\1\0\7\1\2\0\3\1"+
    "\1\11\10\1\1\11\2\1\1\0\1\1\1\0\5\1"+
    "\1\11\1\1\1\0\2\1\2\0\3\1\1\0\1\1"+
    "\10\0\1\11\11\0\1\11\6\0\1\11\2\1\1\0"+
    "\1\1\1\0\1\1\4\0\1\11\1\0\6\1\1\0"+
    "\1\1\1\11\1\1\1\0\3\1\1\11\1\1\1\11"+
    "\2\1\1\0\1\11\3\0\5\1\2\0\5\1\1\0"+
    "\1\1\1\11\5\1\1\0\1\1\1\0\1\11\3\1"+
    "\1\11\2\1\1\0\1\11\2\1\1\0\1\1\1\11"+
    "\1\1\1\0\1\11\1\0\2\11\2\0\1\11\1\0"+
    "\2\11\1\0\6\11\3\0\1\11\1\0\1\1\1\0"+
    "\1\1\1\11\1\1\2\0\1\11\1\0\1\11\5\1"+
    "\1\0\1\1\1\0\3\1\1\0\1\1\4\11\4\1"+
    "\1\11\1\0\5\1\1\0\4\1\1\0\1\1\1\11"+
    "\3\1\1\0\1\1\1\11\1\1\1\11\5\0\4\11"+
    "\1\1\1\0\1\1\1\0\1\11\1\0\2\1\1\11"+
    "\1\1\1\0\2\1\1\0\1\1\1\0\1\1\1\11"+
    "\1\1\1\0\4\1\1\0\3\1\1\11\1\1\1\11"+
    "\2\0\2\11\1\0\1\1\2\0\1\11\2\1\1\11"+
    "\1\1\1\0\1\1\1\0\3\1\1\0\2\1\3\11"+
    "\1\1\2\0\1\1\1\11\1\1\1\0\1\1\1\0"+
    "\1\1\2\0\2\1\1\0\1\11\1\1\1\0\1\1"+
    "\1\0\1\1\3\0\1\11\1\1\1\11\1\1\2\0"+
    "\1\11\10\0\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[663];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    //codigo de java
    String nombre;
    public void imprimir(String dato,String cadena){
    	//System.out.println(dato+" : "+cadena);
    }
    public void imprimir(String cadena){
    	//System.out.println(cadena+" soy reservada");
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 260) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return new Symbol(sym.noni,yycolumn,yyline,yytext());
            }
          case 159: break;
          case 2: 
            { System.err.println("Error lexico: "+yytext()+ " Linea:"+(yyline+1)+" Columna:"+(yycolumn+1));
            }
          case 160: break;
          case 3: 
            { /* Se ignoran */
            }
          case 161: break;
          case 4: 
            { return new Symbol(sym.div,yycolumn,yyline,yytext());
            }
          case 162: break;
          case 5: 
            { return new Symbol(sym.entero,yycolumn,yyline,yytext());
            }
          case 163: break;
          case 6: 
            { return new Symbol(sym.puntor,yycolumn,yyline,yytext());
            }
          case 164: break;
          case 7: 
            { return new Symbol(sym.comih,yycolumn,yyline,yytext());
            }
          case 165: break;
          case 8: 
            { return new Symbol(sym.iden,yycolumn,yyline,yytext());
            }
          case 166: break;
          case 9: 
            { return new Symbol(sym.potb,yycolumn,yyline,yytext());
            }
          case 167: break;
          case 10: 
            { return new Symbol(sym.comina,yycolumn,yyline,yytext());
            }
          case 168: break;
          case 11: 
            { return new Symbol(sym.mas,yycolumn,yyline,yytext());
            }
          case 169: break;
          case 12: 
            { return new Symbol(sym.menos,yycolumn,yyline,yytext());
            }
          case 170: break;
          case 13: 
            { return new Symbol(sym.mul,yycolumn,yyline,yytext());
            }
          case 171: break;
          case 14: 
            { return new Symbol(sym.mod,yycolumn,yyline,yytext());
            }
          case 172: break;
          case 15: 
            { return new Symbol(sym.pot,yycolumn,yyline,yytext());
            }
          case 173: break;
          case 16: 
            { return new Symbol(sym.menorq,yycolumn,yyline,yytext());
            }
          case 174: break;
          case 17: 
            { return new Symbol(sym.igual,yycolumn,yyline,yytext());
            }
          case 175: break;
          case 18: 
            { return new Symbol(sym.mayorq,yycolumn,yyline,yytext());
            }
          case 176: break;
          case 19: 
            { return new Symbol(sym.not,yycolumn,yyline,yytext());
            }
          case 177: break;
          case 20: 
            { return new Symbol(sym.puntoComa,yycolumn,yyline,yytext());
            }
          case 178: break;
          case 21: 
            { return new Symbol(sym.coma,yycolumn,yyline,yytext());
            }
          case 179: break;
          case 22: 
            { return new Symbol(sym.parentesisA,yycolumn,yyline,yytext());
            }
          case 180: break;
          case 23: 
            { return new Symbol(sym.parentesisC,yycolumn,yyline,yytext());
            }
          case 181: break;
          case 24: 
            { return new Symbol(sym.parentA,yycolumn,yyline,yytext());
            }
          case 182: break;
          case 25: 
            { return new Symbol(sym.parentC,yycolumn,yyline,yytext());
            }
          case 183: break;
          case 26: 
            { return new Symbol(sym.dosp,yycolumn,yyline,yytext());
            }
          case 184: break;
          case 27: 
            { return new Symbol(sym.llamaA,yycolumn,yyline,yytext());
            }
          case 185: break;
          case 28: 
            { return new Symbol(sym.llamaC,yycolumn,yyline,yytext());
            }
          case 186: break;
          case 29: 
            { 
            }
          case 187: break;
          case 30: 
            { System.out.println ("Una linea de comentario");
            }
          case 188: break;
          case 31: 
            { yybegin(COMENTARIO);System.out.println("Aqui inicia el esado con /*");return new Symbol(sym.inic,yycolumn,yyline,yytext());
            }
          case 189: break;
          case 32: 
            { return new Symbol(sym.decimal,yycolumn,yyline,yytext());
            }
          case 190: break;
          case 33: 
            { return new Symbol(sym.cadena,yycolumn,yyline,yytext());
            }
          case 191: break;
          case 34: 
            { return new Symbol(sym.resDo,yycolumn,yyline,yytext());
            }
          case 192: break;
          case 35: 
            { return new Symbol(sym.as,yycolumn,yyline,yytext());
            }
          case 193: break;
          case 36: 
            { return new Symbol(sym.iddd,yycolumn,yyline,yytext());
            }
          case 194: break;
          case 37: 
            { return new Symbol(sym.resIf,yycolumn,yyline,yytext());
            }
          case 195: break;
          case 38: 
            { return new Symbol(sym.resTo,yycolumn,yyline,yytext());
            }
          case 196: break;
          case 39: 
            { return new Symbol(sym.masmas,yycolumn,yyline,yytext());
            }
          case 197: break;
          case 40: 
            { return new Symbol(sym.menmen,yycolumn,yyline,yytext());
            }
          case 198: break;
          case 41: 
            { return new Symbol(sym.p,yycolumn,yyline,yytext());
            }
          case 199: break;
          case 42: 
            { return new Symbol(sym.menorIgual,yycolumn,yyline,yytext());
            }
          case 200: break;
          case 43: 
            { return new Symbol(sym.igualigual,yycolumn,yyline,yytext());
            }
          case 201: break;
          case 44: 
            { return new Symbol(sym.mayorIgual,yycolumn,yyline,yytext());
            }
          case 202: break;
          case 45: 
            { return new Symbol(sym.diferente,yycolumn,yyline,yytext());
            }
          case 203: break;
          case 46: 
            { return new Symbol(sym.andD,yycolumn,yyline,yytext());
            }
          case 204: break;
          case 47: 
            { return new Symbol(sym.orR,yycolumn,yyline,yytext());
            }
          case 205: break;
          case 48: 
            { System.out.println("Aqui inicia el esado con <report>");return new Symbol(sym.reportt ,yycolumn,yyline,yytext());
            }
          case 206: break;
          case 49: 
            { yybegin(YYINITIAL);System.out.println ("Aqui Termina el comentario con */");
            }
          case 207: break;
          case 50: 
            { return new Symbol(sym.comi,yycolumn,yyline,yytext());
            }
          case 208: break;
          case 51: 
            { return new Symbol(sym.caracter,yycolumn,yyline,yytext());
            }
          case 209: break;
          case 52: 
            { return new Symbol(sym.end,yycolumn,yyline,yytext());
            }
          case 210: break;
          case 53: 
            { return new Symbol(sym.dim,yycolumn,yyline,yytext());
            }
          case 211: break;
          case 54: 
            { return new Symbol(sym.resFor,yycolumn,yyline,yytext());
            }
          case 212: break;
          case 55: 
            { return new Symbol(sym.sub,yycolumn,yyline,yytext());
            }
          case 213: break;
          case 56: 
            { return new Symbol(sym.resInteger,yycolumn,yyline,yytext());
            }
          case 214: break;
          case 57: 
            { return new Symbol(sym.neww,yycolumn,yyline,yytext());
            }
          case 215: break;
          case 58: 
            { return new Symbol(sym.num,yycolumn,yyline,yytext());
            }
          case 216: break;
          case 59: 
            { return new Symbol(sym.br,yycolumn,yyline,yytext());
            }
          case 217: break;
          case 60: 
            { return new Symbol(sym.tr,yycolumn,yyline,yytext());
            }
          case 218: break;
          case 61: 
            { return new Symbol(sym.td,yycolumn,yyline,yytext());
            }
          case 219: break;
          case 62: 
            { return new Symbol(sym.th,yycolumn,yyline,yytext());
            }
          case 220: break;
          case 63: 
            { return new Symbol(sym.hr,yycolumn,yyline,yytext());
            }
          case 221: break;
          case 64: 
            { return new Symbol(sym.h1,yycolumn,yyline,yytext());
            }
          case 222: break;
          case 65: 
            { return new Symbol(sym.h2,yycolumn,yyline,yytext());
            }
          case 223: break;
          case 66: 
            { return new Symbol(sym.h3,yycolumn,yyline,yytext());
            }
          case 224: break;
          case 67: 
            { return new Symbol(sym.h4,yycolumn,yyline,yytext());
            }
          case 225: break;
          case 68: 
            { return new Symbol(sym.h5,yycolumn,yyline,yytext());
            }
          case 226: break;
          case 69: 
            { return new Symbol(sym.h6,yycolumn,yyline,yytext());
            }
          case 227: break;
          case 70: 
            { return new Symbol(sym.voide,yycolumn,yyline,yytext());
            }
          case 228: break;
          case 71: 
            { return new Symbol(sym.resElse,yycolumn,yyline,yytext());
            }
          case 229: break;
          case 72: 
            { return new Symbol(sym.exit,yycolumn,yyline,yytext());
            }
          case 230: break;
          case 73: 
            { return new Symbol(sym.rojo,yycolumn,yyline,yytext());
            }
          case 231: break;
          case 74: 
            { return new Symbol(sym.azul,yycolumn,yyline,yytext());
            }
          case 232: break;
          case 75: 
            { return new Symbol(sym.font,yycolumn,yyline,yytext());
            }
          case 233: break;
          case 76: 
            { return new Symbol(sym.loop,yycolumn,yyline,yytext());
            }
          case 234: break;
          case 77: 
            { return new Symbol(sym.resLong,yycolumn,yyline,yytext());
            }
          case 235: break;
          case 78: 
            { return new Symbol(sym.step,yycolumn,yyline,yytext());
            }
          case 236: break;
          case 79: 
            { return new Symbol(sym.mas2,yycolumn,yyline,yytext());
            }
          case 237: break;
          case 80: 
            { return new Symbol(sym.main,yycolumn,yyline,yytext());
            }
          case 238: break;
          case 81: 
            { return new Symbol(sym.resCase,yycolumn,yyline,yytext());
            }
          case 239: break;
          case 82: 
            { return new Symbol(sym.resChar,yycolumn,yyline,yytext());
            }
          case 240: break;
          case 83: 
            { return new Symbol(sym.resThen,yycolumn,yyline,yytext());
            }
          case 241: break;
          case 84: 
            { return new Symbol(sym.next,yycolumn,yyline,yytext());
            }
          case 242: break;
          case 85: 
            { return new Symbol(sym.gris,yycolumn,yyline,yytext());
            }
          case 243: break;
          case 86: 
            { return new Symbol(sym.fp,yycolumn,yyline,yytext());
            }
          case 244: break;
          case 87: 
            { return new Symbol(sym.divh,yycolumn,yyline,yytext());
            }
          case 245: break;
          case 88: 
            { return new Symbol(sym.verde,yycolumn,yyline,yytext());
            }
          case 246: break;
          case 89: 
            { return new Symbol(sym.menos2,yycolumn,yyline,yytext());
            }
          case 247: break;
          case 90: 
            { return new Symbol(sym.align,yycolumn,yyline,yytext());
            }
          case 248: break;
          case 91: 
            { return new Symbol(sym.bool,yycolumn,yyline,yytext());
            }
          case 249: break;
          case 92: 
            { return new Symbol(sym.resfinal,yycolumn,yyline,yytext());
            }
          case 250: break;
          case 93: 
            { return new Symbol(sym.scoree,yycolumn,yyline,yytext());
            }
          case 251: break;
          case 94: 
            { return new Symbol(sym.resbreak,yycolumn,yyline,yytext());
            }
          case 252: break;
          case 95: 
            { return new Symbol(sym.byval,yycolumn,yyline,yytext());
            }
          case 253: break;
          case 96: 
            { return new Symbol(sym.clase,yycolumn,yyline,yytext());
            }
          case 254: break;
          case 97: 
            { return new Symbol(sym.Until,yycolumn,yyline,yytext());
            }
          case 255: break;
          case 98: 
            { return new Symbol(sym.prin,yycolumn,yyline,yytext());
            }
          case 256: break;
          case 99: 
            { return new Symbol(sym.resWhile,yycolumn,yyline,yytext());
            }
          case 257: break;
          case 100: 
            { return new Symbol(sym.fbr,yycolumn,yyline,yytext());
            }
          case 258: break;
          case 101: 
            { return new Symbol(sym.ftr,yycolumn,yyline,yytext());
            }
          case 259: break;
          case 102: 
            { return new Symbol(sym.ftd,yycolumn,yyline,yytext());
            }
          case 260: break;
          case 103: 
            { return new Symbol(sym.fth,yycolumn,yyline,yytext());
            }
          case 261: break;
          case 104: 
            { return new Symbol(sym.fhr,yycolumn,yyline,yytext());
            }
          case 262: break;
          case 105: 
            { return new Symbol(sym.fh1,yycolumn,yyline,yytext());
            }
          case 263: break;
          case 106: 
            { return new Symbol(sym.fh2,yycolumn,yyline,yytext());
            }
          case 264: break;
          case 107: 
            { return new Symbol(sym.fh3,yycolumn,yyline,yytext());
            }
          case 265: break;
          case 108: 
            { return new Symbol(sym.fh4,yycolumn,yyline,yytext());
            }
          case 266: break;
          case 109: 
            { return new Symbol(sym.fh5,yycolumn,yyline,yytext());
            }
          case 267: break;
          case 110: 
            { return new Symbol(sym.fh6,yycolumn,yyline,yytext());
            }
          case 268: break;
          case 111: 
            { return new Symbol(sym.bodyy,yycolumn,yyline,yytext());
            }
          case 269: break;
          case 112: 
            { return new Symbol(sym.head,yycolumn,yyline,yytext());
            }
          case 270: break;
          case 113: 
            { return new Symbol(sym.elseif,yycolumn,yyline,yytext());
            }
          case 271: break;
          case 114: 
            { return new Symbol(sym.resEndIf,yycolumn,yyline,yytext());
            }
          case 272: break;
          case 115: 
            { return new Symbol(sym.resul,yycolumn,yyline,yytext());
            }
          case 273: break;
          case 116: 
            { return new Symbol(sym.retu,yycolumn,yyline,yytext());
            }
          case 274: break;
          case 117: 
            { return new Symbol(sym.resDouble,yycolumn,yyline,yytext());
            }
          case 275: break;
          case 118: 
            { return new Symbol(sym.resObject,yycolumn,yyline,yytext());
            }
          case 276: break;
          case 119: 
            { return new Symbol(sym.select,yycolumn,yyline,yytext());
            }
          case 277: break;
          case 120: 
            { return new Symbol(sym.resString,yycolumn,yyline,yytext());
            }
          case 278: break;
          case 121: 
            { return new Symbol(sym.resStatic,yycolumn,yyline,yytext());
            }
          case 279: break;
          case 122: 
            { return new Symbol(sym.resswitch,yycolumn,yyline,yytext());
            }
          case 280: break;
          case 123: 
            { return new Symbol(sym.importt,yycolumn,yyline,yytext());
            }
          case 281: break;
          case 124: 
            { return new Symbol(sym.morado,yycolumn,yyline,yytext());
            }
          case 282: break;
          case 125: 
            { return new Symbol(sym.module,yycolumn,yyline,yytext());
            }
          case 283: break;
          case 126: 
            { return new Symbol(sym.jclas,yycolumn,yyline,yytext());
            }
          case 284: break;
          case 127: 
            { return new Symbol(sym.resPublic,yycolumn,yyline,yytext());
            }
          case 285: break;
          case 128: 
            { return new Symbol(sym.fdivh,yycolumn,yyline,yytext());
            }
          case 286: break;
          case 129: 
            { return new Symbol(sym.color,yycolumn,yyline,yytext());
            }
          case 287: break;
          case 130: 
            { return new Symbol(sym.table,yycolumn,yyline,yytext());
            }
          case 288: break;
          case 131: 
            { return new Symbol(sym.title,yycolumn,yyline,yytext());
            }
          case 289: break;
          case 132: 
            { return new Symbol(sym.htmll,yycolumn,yyline,yytext());
            }
          case 290: break;
          case 133: 
            { return new Symbol(sym.endsu,yycolumn,yyline,yytext());
            }
          case 291: break;
          case 134: 
            { return new Symbol(sym.derecha,yycolumn,yyline,yytext());
            }
          case 292: break;
          case 135: 
            { return new Symbol(sym.resdefault,yycolumn,yyline,yytext());
            }
          case 293: break;
          case 136: 
            { return new Symbol(sym.div2,yycolumn,yyline,yytext());
            }
          case 294: break;
          case 137: 
            { return new Symbol(sym.jmeto,yycolumn,yyline,yytext());
            }
          case 295: break;
          case 138: 
            { return new Symbol(sym.resBoolean,yycolumn,yyline,yytext());
            }
          case 296: break;
          case 139: 
            { return new Symbol(sym.resPrivate,yycolumn,yyline,yytext());
            }
          case 297: break;
          case 140: 
            { return new Symbol(sym.fbody,yycolumn,yyline,yytext());
            }
          case 298: break;
          case 141: 
            { return new Symbol(sym.fhead,yycolumn,yyline,yytext());
            }
          case 299: break;
          case 142: 
            { return new Symbol(sym.fhtml,yycolumn,yyline,yytext());
            }
          case 300: break;
          case 143: 
            { return new Symbol(sym.amarillo,yycolumn,yyline,yytext());
            }
          case 301: break;
          case 144: 
            { return new Symbol(sym.func,yycolumn,yyline,yytext());
            }
          case 302: break;
          case 145: 
            { return new Symbol(sym.centrado,yycolumn,yyline,yytext());
            }
          case 303: break;
          case 146: 
            { return new Symbol(sym.ftable,yycolumn,yyline,yytext());
            }
          case 304: break;
          case 147: 
            { return new Symbol(sym.ftitle,yycolumn,yyline,yytext());
            }
          case 305: break;
          case 148: 
            { return new Symbol(sym.jvara,yycolumn,yyline,yytext());
            }
          case 306: break;
          case 149: 
            { return new Symbol(sym.izquierda,yycolumn,yyline,yytext());
            }
          case 307: break;
          case 150: 
            { return new Symbol(sym.textcolor,yycolumn,yyline,yytext());
            }
          case 308: break;
          case 151: 
            { return new Symbol(sym.resProtected,yycolumn,yyline,yytext());
            }
          case 309: break;
          case 152: 
            { return new Symbol(sym.endmodul,yycolumn,yyline,yytext());
            }
          case 310: break;
          case 153: 
            { return new Symbol(sym.anaranjado,yycolumn,yyline,yytext());
            }
          case 311: break;
          case 154: 
            { return new Symbol(sym.mul2,yycolumn,yyline,yytext());
            }
          case 312: break;
          case 155: 
            { return new Symbol(sym.jcome,yycolumn,yyline,yytext());
            }
          case 313: break;
          case 156: 
            { return new Symbol(sym.endfunc,yycolumn,yyline,yytext());
            }
          case 314: break;
          case 157: 
            { return new Symbol(sym.rwl,yycolumn,yyline,yytext());
            }
          case 315: break;
          case 158: 
            { return new Symbol(sym.cwl,yycolumn,yyline,yytext());
            }
          case 316: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
