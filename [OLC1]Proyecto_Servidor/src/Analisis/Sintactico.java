
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Mar 29 22:30:47 CST 2018
//----------------------------------------------------

package Analisis;

import java.util.ArrayList;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Mar 29 22:30:47 CST 2018
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\151\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\040\002\000\002\003\007\000\002\005\005" +
    "\000\002\005\005\000\002\005\003\000\002\023\004\000" +
    "\002\023\004\000\002\023\004\000\002\023\003\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\006\003\000\002\033\005\000" +
    "\002\033\005\000\002\033\004\000\002\033\003\000\002" +
    "\022\005\000\002\022\005\000\002\022\005\000\002\022" +
    "\005\000\002\022\006\000\002\022\006\000\002\022\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\041\002\000\002\004\011\000\002\004\002\000\002\012" +
    "\004\000\002\012\004\000\002\012\004\000\002\012\004" +
    "\000\002\012\004\000\002\012\004\000\002\012\002\000" +
    "\002\020\004\000\002\020\004\000\002\020\004\000\002" +
    "\020\004\000\002\020\002\000\002\042\002\000\002\013" +
    "\015\000\002\043\002\000\002\036\020\000\002\014\006" +
    "\000\002\015\010\000\002\015\006\000\002\021\003\000" +
    "\002\021\005\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\002\000\002\017\003\000\002\017\005\000\002" +
    "\017\004\000\002\017\006\000\002\017\002\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\044\002\000\002\024\012\000" +
    "\002\024\004\000\002\045\002\000\002\026\007\000\002" +
    "\046\002\000\002\027\017\000\002\047\002\000\002\030" +
    "\013\000\002\050\002\000\002\031\014\000\002\051\002" +
    "\000\002\032\022\000\002\035\011\000\002\035\002\000" +
    "\002\034\004\000\002\034\005\000\002\034\002\000\002" +
    "\037\012\000\002\025\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\357\000\022\002\uffd9\010\013\011\010\012\014\045" +
    "\007\046\011\047\006\050\uffb7\001\002\000\004\050\027" +
    "\001\002\000\004\002\026\001\002\000\022\006\uffb8\007" +
    "\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\044\uffb8\050\uffb8" +
    "\001\002\000\004\067\017\001\002\000\022\006\uffbb\007" +
    "\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb\044\uffbb\050\uffbb" +
    "\001\002\000\022\006\uffba\007\uffba\013\uffba\014\uffba\015" +
    "\uffba\016\uffba\044\uffba\050\uffba\001\002\000\004\002\000" +
    "\001\002\000\022\006\uffbc\007\uffbc\013\uffbc\014\uffbc\015" +
    "\uffbc\016\uffbc\044\uffbc\050\uffbc\001\002\000\022\006\uffb9" +
    "\007\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9\044\uffb9\050" +
    "\uffb9\001\002\000\004\002\uffff\001\002\000\006\055\021" +
    "\061\020\001\002\000\006\055\ufffa\061\ufffa\001\002\000" +
    "\006\036\025\067\017\001\002\000\022\002\ufffe\010\ufffe" +
    "\011\ufffe\012\ufffe\045\ufffe\046\ufffe\047\ufffe\050\ufffe\001" +
    "\002\000\022\002\uffd9\010\013\011\010\012\014\045\007" +
    "\046\011\047\006\050\uffb7\001\002\000\004\002\ufffd\001" +
    "\002\000\006\055\ufffc\061\ufffc\001\002\000\006\055\ufffb" +
    "\061\ufffb\001\002\000\004\002\001\001\002\000\004\067" +
    "\030\001\002\000\004\057\031\001\002\000\050\006\uffdb" +
    "\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015" +
    "\uffdb\016\uffdb\017\uffdb\021\uffdb\022\uffdb\023\uffdb\044\uffdb" +
    "\046\uffdb\047\uffdb\051\uffdb\060\uffdb\067\uffdb\001\002\000" +
    "\050\006\uffb7\007\uffb7\010\053\011\010\012\014\013\uffb7" +
    "\014\uffb7\015\uffb7\016\uffb7\017\052\021\042\022\046\023" +
    "\055\044\uffb7\046\011\047\006\051\051\060\uffd2\067\057" +
    "\001\002\000\056\006\uffb1\007\uffb1\010\uffb1\011\uffb1\012" +
    "\uffb1\013\uffb1\014\uffb1\015\uffb1\016\uffb1\017\uffb1\020\354" +
    "\021\uffb1\022\uffb1\023\uffb1\043\uffb1\044\uffb1\046\uffb1\047" +
    "\uffb1\051\uffb1\053\uffb1\060\uffb1\067\uffb1\001\002\000\054" +
    "\006\uffad\007\uffad\010\uffad\011\uffad\012\uffad\013\uffad\014" +
    "\uffad\015\uffad\016\uffad\017\uffad\021\uffad\022\uffad\023\uffad" +
    "\043\uffad\044\uffad\046\uffad\047\uffad\051\uffad\053\uffad\060" +
    "\uffad\067\uffad\001\002\000\050\006\uffb7\007\uffb7\010\053" +
    "\011\010\012\014\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017" +
    "\052\021\042\022\046\023\055\044\uffb7\046\011\047\006" +
    "\051\051\060\uffd2\067\057\001\002\000\050\006\uffb7\007" +
    "\uffb7\010\053\011\010\012\014\013\uffb7\014\uffb7\015\uffb7" +
    "\016\uffb7\017\052\021\042\022\046\023\055\044\uffb7\046" +
    "\011\047\006\051\051\060\uffd2\067\057\001\002\000\050" +
    "\006\uffb7\007\uffb7\010\053\011\010\012\014\013\uffb7\014" +
    "\uffb7\015\uffb7\016\uffb7\017\052\021\042\022\046\023\055" +
    "\044\uffb7\046\011\047\006\051\051\060\uffd2\067\057\001" +
    "\002\000\020\006\072\007\063\013\065\014\064\015\070" +
    "\016\066\044\062\001\002\000\054\006\uffaf\007\uffaf\010" +
    "\uffaf\011\uffaf\012\uffaf\013\uffaf\014\uffaf\015\uffaf\016\uffaf" +
    "\017\uffaf\021\uffaf\022\uffaf\023\uffaf\043\uffaf\044\uffaf\046" +
    "\uffaf\047\uffaf\051\uffaf\053\uffaf\060\uffaf\067\uffaf\001\002" +
    "\000\004\032\327\001\002\000\012\030\207\034\210\035" +
    "\211\036\212\001\002\000\004\060\323\001\002\000\050" +
    "\006\uffb7\007\uffb7\010\053\011\010\012\014\013\uffb7\014" +
    "\uffb7\015\uffb7\016\uffb7\017\052\021\042\022\046\023\055" +
    "\044\uffb7\046\011\047\006\051\051\060\uffd2\067\057\001" +
    "\002\000\004\032\276\001\002\000\054\006\uffae\007\uffae" +
    "\010\uffae\011\uffae\012\uffae\013\uffae\014\uffae\015\uffae\016" +
    "\uffae\017\uffae\021\uffae\022\uffae\023\uffae\043\uffae\044\uffae" +
    "\046\uffae\047\uffae\051\uffae\053\uffae\060\uffae\067\uffae\001" +
    "\002\000\050\006\uffb7\007\uffb7\010\013\011\010\012\014" +
    "\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017\052\021\042\022" +
    "\046\023\055\044\uffb7\046\011\047\006\051\051\060\uffcd" +
    "\067\057\001\002\000\004\032\247\001\002\000\004\032" +
    "\240\001\002\000\022\006\uffbc\007\uffbc\012\223\013\uffbc" +
    "\014\uffbc\015\uffbc\016\uffbc\044\uffbc\001\002\000\054\006" +
    "\uffb0\007\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0\014\uffb0" +
    "\015\uffb0\016\uffb0\017\uffb0\021\uffb0\022\uffb0\023\uffb0\043" +
    "\uffb0\044\uffb0\046\uffb0\047\uffb0\051\uffb0\053\uffb0\060\uffb0" +
    "\067\uffb0\001\002\000\004\057\106\001\002\000\050\006" +
    "\uffb7\007\uffb7\010\053\011\010\012\014\013\uffb7\014\uffb7" +
    "\015\uffb7\016\uffb7\017\052\021\042\022\046\023\055\044" +
    "\uffb7\046\011\047\006\051\051\060\uffd2\067\057\001\002" +
    "\000\016\030\uffc5\031\060\032\061\034\uffc5\035\uffc5\036" +
    "\uffc5\001\002\000\004\067\103\001\002\000\024\006\072" +
    "\007\063\013\065\014\064\015\070\016\066\033\uffb2\044" +
    "\062\067\067\001\002\000\004\067\uffbd\001\002\000\004" +
    "\067\uffc2\001\002\000\004\067\uffbf\001\002\000\004\067" +
    "\uffc1\001\002\000\004\067\uffbe\001\002\000\006\031\101" +
    "\033\uffb6\001\002\000\004\067\uffc0\001\002\000\004\067" +
    "\076\001\002\000\004\067\uffc3\001\002\000\004\033\074" +
    "\001\002\000\004\055\075\001\002\000\054\006\uff99\007" +
    "\uff99\010\uff99\011\uff99\012\uff99\013\uff99\014\uff99\015\uff99" +
    "\016\uff99\017\uff99\021\uff99\022\uff99\023\uff99\043\uff99\044" +
    "\uff99\046\uff99\047\uff99\051\uff99\053\uff99\060\uff99\067\uff99" +
    "\001\002\000\006\031\077\033\uffb4\001\002\000\024\006" +
    "\072\007\063\013\065\014\064\015\070\016\066\033\uffb2" +
    "\044\062\067\067\001\002\000\004\033\uffb3\001\002\000" +
    "\004\067\102\001\002\000\004\033\uffb5\001\002\000\016" +
    "\030\uffc5\031\060\034\uffc5\035\uffc5\036\uffc5\055\uffc5\001" +
    "\002\000\014\030\uffc4\034\uffc4\035\uffc4\036\uffc4\055\uffc4" +
    "\001\002\000\004\060\uffd3\001\002\000\050\006\uffa3\007" +
    "\uffa3\010\uffa3\011\uffa3\012\uffa3\013\uffa3\014\uffa3\015\uffa3" +
    "\016\uffa3\017\uffa3\021\uffa3\022\uffa3\023\uffa3\044\uffa3\046" +
    "\uffa3\047\uffa3\051\uffa3\060\uffa3\067\uffa3\001\002\000\050" +
    "\006\uffb7\007\uffb7\010\013\011\010\012\014\013\uffb7\014" +
    "\uffb7\015\uffb7\016\uffb7\017\052\021\042\022\046\023\055" +
    "\044\uffb7\046\011\047\006\051\051\060\uffcd\067\057\001" +
    "\002\000\054\006\uffb7\007\uffb7\010\013\011\010\012\014" +
    "\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017\052\021\042\022" +
    "\046\023\055\043\uffcd\044\uffb7\046\011\047\006\051\051" +
    "\053\uffcd\060\uffcd\067\057\001\002\000\054\006\uffb7\007" +
    "\uffb7\010\013\011\010\012\014\013\uffb7\014\uffb7\015\uffb7" +
    "\016\uffb7\017\052\021\042\022\046\023\055\043\uffcd\044" +
    "\uffb7\046\011\047\006\051\051\053\uffcd\060\uffcd\067\057" +
    "\001\002\000\020\006\072\007\063\013\065\014\064\015" +
    "\070\016\066\044\062\001\002\000\054\006\uffb7\007\uffb7" +
    "\010\013\011\010\012\014\013\uffb7\014\uffb7\015\uffb7\016" +
    "\uffb7\017\052\021\042\022\046\023\055\043\uffcd\044\uffb7" +
    "\046\011\047\006\051\051\053\uffcd\060\uffcd\067\057\001" +
    "\002\000\004\060\117\001\002\000\054\006\uffb7\007\uffb7" +
    "\010\013\011\010\012\014\013\uffb7\014\uffb7\015\uffb7\016" +
    "\uffb7\017\052\021\042\022\046\023\055\043\uffcd\044\uffb7" +
    "\046\011\047\006\051\051\053\uffcd\060\uffcd\067\057\001" +
    "\002\000\010\043\uffce\053\uffce\060\uffce\001\002\000\004" +
    "\021\120\001\002\000\004\032\121\001\002\000\022\032" +
    "\123\042\124\063\132\064\130\065\126\066\125\067\127" +
    "\070\131\001\002\000\040\024\uffed\025\uffed\026\uffed\027" +
    "\uffed\030\uffed\033\uffed\034\177\035\200\036\uffed\037\uffed" +
    "\040\uffed\041\uffed\042\uffed\055\uffed\062\uffed\001\002\000" +
    "\020\032\123\063\132\064\130\065\126\066\125\067\127" +
    "\070\131\001\002\000\020\032\123\063\132\064\130\065" +
    "\126\066\125\067\127\070\131\001\002\000\042\024\uffde" +
    "\025\uffde\026\uffde\027\uffde\030\uffde\033\uffde\034\uffde\035" +
    "\uffde\036\uffde\037\uffde\040\uffde\041\uffde\042\uffde\055\uffde" +
    "\056\uffde\062\uffde\001\002\000\042\024\uffdf\025\uffdf\026" +
    "\uffdf\027\uffdf\030\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf" +
    "\037\uffdf\040\uffdf\041\uffdf\042\uffdf\055\uffdf\056\uffdf\062" +
    "\uffdf\001\002\000\042\024\uffdd\025\uffdd\026\uffdd\027\uffdd" +
    "\030\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040" +
    "\uffdd\041\uffdd\042\uffdd\055\uffdd\056\uffdd\062\uffdd\001\002" +
    "\000\042\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\033" +
    "\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0" +
    "\042\uffe0\055\uffe0\056\uffe0\062\uffe0\001\002\000\042\024" +
    "\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\033\uffdc\034\uffdc" +
    "\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\055" +
    "\uffdc\056\uffdc\062\uffdc\001\002\000\042\024\uffe1\025\uffe1" +
    "\026\uffe1\027\uffe1\030\uffe1\033\uffe1\034\uffe1\035\uffe1\036" +
    "\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\055\uffe1\056\uffe1" +
    "\062\uffe1\001\002\000\010\033\uffe9\040\170\041\171\001" +
    "\002\000\040\024\145\025\146\026\152\027\141\030\151" +
    "\033\uffe2\034\150\035\144\036\143\037\140\040\uffe2\041" +
    "\uffe2\042\142\055\uffe2\062\147\001\002\000\004\033\136" +
    "\001\002\000\004\055\137\001\002\000\054\006\uffa2\007" +
    "\uffa2\010\uffa2\011\uffa2\012\uffa2\013\uffa2\014\uffa2\015\uffa2" +
    "\016\uffa2\017\uffa2\021\uffa2\022\uffa2\023\uffa2\043\uffa2\044" +
    "\uffa2\046\uffa2\047\uffa2\051\uffa2\053\uffa2\060\uffa2\067\uffa2" +
    "\001\002\000\020\032\123\063\132\064\130\065\126\066" +
    "\125\067\127\070\131\001\002\000\020\032\123\063\132" +
    "\064\130\065\126\066\125\067\127\070\131\001\002\000" +
    "\004\030\164\001\002\000\020\032\123\063\132\064\130" +
    "\065\126\066\125\067\127\070\131\001\002\000\020\032" +
    "\123\063\132\064\130\065\126\066\125\067\127\070\131" +
    "\001\002\000\020\032\123\063\132\064\130\065\126\066" +
    "\125\067\127\070\131\001\002\000\020\032\123\063\132" +
    "\064\130\065\126\066\125\067\127\070\131\001\002\000" +
    "\020\032\123\063\132\064\130\065\126\066\125\067\127" +
    "\070\131\001\002\000\020\032\123\063\132\064\130\065" +
    "\126\066\125\067\127\070\131\001\002\000\004\030\154" +
    "\001\002\000\020\032\123\063\132\064\130\065\126\066" +
    "\125\067\127\070\131\001\002\000\012\033\uffe8\040\uffe8" +
    "\041\uffe8\055\uffe8\001\002\000\020\032\123\063\132\064" +
    "\130\065\126\066\125\067\127\070\131\001\002\000\012" +
    "\033\uffe4\040\uffe4\041\uffe4\055\uffe4\001\002\000\040\024" +
    "\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5\033\ufff5\034\ufff5" +
    "\035\ufff5\036\143\037\140\040\ufff5\041\ufff5\042\ufff5\055" +
    "\ufff5\062\147\001\002\000\040\024\ufff1\025\ufff1\026\ufff1" +
    "\027\ufff1\030\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1\037" +
    "\ufff1\040\ufff1\041\ufff1\042\ufff1\055\ufff1\062\ufff1\001\002" +
    "\000\012\033\uffe5\040\uffe5\041\uffe5\055\uffe5\001\002\000" +
    "\012\033\uffe7\040\uffe7\041\uffe7\055\uffe7\001\002\000\040" +
    "\024\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\033\ufff4\034" +
    "\ufff4\035\ufff4\036\143\037\140\040\ufff4\041\ufff4\042\ufff4" +
    "\055\ufff4\062\147\001\002\000\040\024\ufff3\025\ufff3\026" +
    "\ufff3\027\ufff3\030\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3" +
    "\037\ufff3\040\ufff3\041\ufff3\042\ufff3\055\ufff3\062\147\001" +
    "\002\000\020\032\123\063\132\064\130\065\126\066\125" +
    "\067\127\070\131\001\002\000\012\033\uffe3\040\uffe3\041" +
    "\uffe3\055\uffe3\001\002\000\012\033\uffe6\040\uffe6\041\uffe6" +
    "\055\uffe6\001\002\000\040\024\ufff2\025\ufff2\026\ufff2\027" +
    "\ufff2\030\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2" +
    "\040\ufff2\041\ufff2\042\ufff2\055\ufff2\062\147\001\002\000" +
    "\020\032\123\063\132\064\130\065\126\066\125\067\127" +
    "\070\131\001\002\000\020\032\123\063\132\064\130\065" +
    "\126\066\125\067\127\070\131\001\002\000\004\033\uffeb" +
    "\001\002\000\004\033\uffec\001\002\000\004\033\uffea\001" +
    "\002\000\016\033\176\034\150\035\144\036\143\037\140" +
    "\062\147\001\002\000\040\024\ufff0\025\ufff0\026\ufff0\027" +
    "\ufff0\030\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0" +
    "\040\ufff0\041\ufff0\042\ufff0\055\ufff0\062\ufff0\001\002\000" +
    "\004\034\202\001\002\000\004\035\201\001\002\000\040" +
    "\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee\033\uffee\034" +
    "\uffee\035\uffee\036\uffee\037\uffee\040\uffee\041\uffee\042\uffee" +
    "\055\uffee\062\uffee\001\002\000\040\024\uffef\025\uffef\026" +
    "\uffef\027\uffef\030\uffef\033\uffef\034\uffef\035\uffef\036\uffef" +
    "\037\uffef\040\uffef\041\uffef\042\uffef\055\uffef\062\uffef\001" +
    "\002\000\010\043\uffd0\053\uffd0\060\uffd0\001\002\000\004" +
    "\067\103\001\002\000\014\030\207\034\210\035\211\036" +
    "\212\055\206\001\002\000\054\006\uffc8\007\uffc8\010\uffc8" +
    "\011\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8\016\uffc8\017" +
    "\uffc8\021\uffc8\022\uffc8\023\uffc8\043\uffc8\044\uffc8\046\uffc8" +
    "\047\uffc8\051\uffc8\053\uffc8\060\uffc8\067\uffc8\001\002\000" +
    "\020\032\ufff6\063\ufff6\064\ufff6\065\ufff6\066\ufff6\067\ufff6" +
    "\070\ufff6\001\002\000\004\030\220\001\002\000\004\030" +
    "\217\001\002\000\004\030\216\001\002\000\020\032\123" +
    "\063\132\064\130\065\126\066\125\067\127\070\131\001" +
    "\002\000\016\034\150\035\144\036\143\037\140\055\215" +
    "\062\147\001\002\000\056\006\uffc7\007\uffc7\010\uffc7\011" +
    "\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7" +
    "\021\uffc7\022\uffc7\023\uffc7\043\uffc7\044\uffc7\046\uffc7\047" +
    "\uffc7\051\uffc7\053\uffc7\055\uffc7\060\uffc7\067\uffc7\001\002" +
    "\000\020\032\ufff7\063\ufff7\064\ufff7\065\ufff7\066\ufff7\067" +
    "\ufff7\070\ufff7\001\002\000\020\032\ufff8\063\ufff8\064\ufff8" +
    "\065\ufff8\066\ufff8\067\ufff8\070\ufff8\001\002\000\020\032" +
    "\ufff9\063\ufff9\064\ufff9\065\ufff9\066\ufff9\067\ufff9\070\ufff9" +
    "\001\002\000\010\043\uffcf\053\uffcf\060\uffcf\001\002\000" +
    "\010\043\uffd1\053\uffd1\060\uffd1\001\002\000\004\067\224" +
    "\001\002\000\004\067\225\001\002\000\004\032\226\001" +
    "\002\000\004\007\227\001\002\000\004\067\230\001\002" +
    "\000\004\004\231\001\002\000\004\005\232\001\002\000" +
    "\004\033\233\001\002\000\004\057\234\001\002\000\050" +
    "\006\uffca\007\uffca\010\uffca\011\uffca\012\uffca\013\uffca\014" +
    "\uffca\015\uffca\016\uffca\017\uffca\021\uffca\022\uffca\023\uffca" +
    "\044\uffca\046\uffca\047\uffca\051\uffca\060\uffca\067\uffca\001" +
    "\002\000\050\006\uffb7\007\uffb7\010\013\011\010\012\014" +
    "\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017\052\021\042\022" +
    "\046\023\055\044\uffb7\046\011\047\006\051\051\060\uffcd" +
    "\067\057\001\002\000\004\060\237\001\002\000\050\006" +
    "\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9" +
    "\015\uffc9\016\uffc9\017\uffc9\021\uffc9\022\uffc9\023\uffc9\044" +
    "\uffc9\046\uffc9\047\uffc9\051\uffc9\060\uffc9\067\uffc9\001\002" +
    "\000\022\032\123\042\124\063\132\064\130\065\126\066" +
    "\125\067\127\070\131\001\002\000\004\033\242\001\002" +
    "\000\004\057\243\001\002\000\050\006\uffac\007\uffac\010" +
    "\uffac\011\uffac\012\uffac\013\uffac\014\uffac\015\uffac\016\uffac" +
    "\017\uffac\021\uffac\022\uffac\023\uffac\044\uffac\046\uffac\047" +
    "\uffac\051\uffac\060\uffac\067\uffac\001\002\000\050\006\uffb7" +
    "\007\uffb7\010\013\011\010\012\014\013\uffb7\014\uffb7\015" +
    "\uffb7\016\uffb7\017\052\021\042\022\046\023\055\044\uffb7" +
    "\046\011\047\006\051\051\060\uffcd\067\057\001\002\000" +
    "\004\060\246\001\002\000\056\006\uffab\007\uffab\010\uffab" +
    "\011\uffab\012\uffab\013\uffab\014\uffab\015\uffab\016\uffab\017" +
    "\uffab\020\uffab\021\uffab\022\uffab\023\uffab\043\uffab\044\uffab" +
    "\046\uffab\047\uffab\051\uffab\053\uffab\060\uffab\067\uffab\001" +
    "\002\000\020\032\123\063\132\064\130\065\126\066\125" +
    "\067\127\070\131\001\002\000\016\033\251\034\150\035" +
    "\144\036\143\037\140\062\147\001\002\000\004\057\252" +
    "\001\002\000\004\052\uffa1\001\002\000\004\052\254\001" +
    "\002\000\016\063\132\064\130\065\126\066\125\067\127" +
    "\070\131\001\002\000\004\056\256\001\002\000\050\006" +
    "\uffb7\007\uffb7\010\013\011\010\012\014\013\uffb7\014\uffb7" +
    "\015\uffb7\016\uffb7\017\052\021\042\022\046\023\055\044" +
    "\uffb7\046\011\047\006\051\051\053\uffcd\067\057\001\002" +
    "\000\004\053\260\001\002\000\006\052\261\054\uff9e\001" +
    "\002\000\016\063\132\064\130\065\126\066\125\067\127" +
    "\070\131\001\002\000\004\054\263\001\002\000\004\056" +
    "\264\001\002\000\050\006\uffb7\007\uffb7\010\013\011\010" +
    "\012\014\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017\052\021" +
    "\042\022\046\023\055\044\uffb7\046\011\047\006\051\051" +
    "\060\uffcd\067\057\001\002\000\004\060\266\001\002\000" +
    "\054\006\uffa0\007\uffa0\010\uffa0\011\uffa0\012\uffa0\013\uffa0" +
    "\014\uffa0\015\uffa0\016\uffa0\017\uffa0\021\uffa0\022\uffa0\023" +
    "\uffa0\043\uffa0\044\uffa0\046\uffa0\047\uffa0\051\uffa0\053\uffa0" +
    "\060\uffa0\067\uffa0\001\002\000\004\056\270\001\002\000" +
    "\050\006\uffb7\007\uffb7\010\013\011\010\012\014\013\uffb7" +
    "\014\uffb7\015\uffb7\016\uffb7\017\052\021\042\022\046\023" +
    "\055\044\uffb7\046\011\047\006\051\051\053\uffcd\067\057" +
    "\001\002\000\004\053\272\001\002\000\004\055\273\001" +
    "\002\000\006\052\261\054\uff9e\001\002\000\004\054\uff9f" +
    "\001\002\000\004\060\uffd7\001\002\000\034\006\uffb7\007" +
    "\uffb7\010\013\011\010\012\014\013\uffb7\014\uffb7\015\uffb7" +
    "\016\uffb7\044\uffb7\046\011\047\006\067\103\001\002\000" +
    "\020\006\072\007\063\013\065\014\064\015\070\016\066" +
    "\044\062\001\002\000\004\055\301\001\002\000\020\032" +
    "\123\063\132\064\130\065\126\066\125\067\127\070\131" +
    "\001\002\000\004\055\303\001\002\000\020\032\123\063" +
    "\132\064\130\065\126\066\125\067\127\070\131\001\002" +
    "\000\016\033\305\034\150\035\144\036\143\037\140\062" +
    "\147\001\002\000\004\057\306\001\002\000\054\006\uffa7" +
    "\007\uffa7\010\uffa7\011\uffa7\012\uffa7\013\uffa7\014\uffa7\015" +
    "\uffa7\016\uffa7\017\uffa7\021\uffa7\022\uffa7\023\uffa7\043\uffa7" +
    "\044\uffa7\046\uffa7\047\uffa7\051\uffa7\053\uffa7\060\uffa7\067" +
    "\uffa7\001\002\000\054\006\uffb7\007\uffb7\010\013\011\010" +
    "\012\014\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017\052\021" +
    "\042\022\046\023\055\043\uffcd\044\uffb7\046\011\047\006" +
    "\051\051\053\uffcd\060\uffcd\067\057\001\002\000\010\043" +
    "\312\053\313\060\uff9b\001\002\000\004\060\317\001\002" +
    "\000\020\032\123\063\132\064\130\065\126\066\125\067" +
    "\127\070\131\001\002\000\004\055\314\001\002\000\004" +
    "\060\uff9d\001\002\000\016\034\150\035\144\036\143\037" +
    "\140\055\316\062\147\001\002\000\004\060\uff9c\001\002" +
    "\000\054\006\uffa6\007\uffa6\010\uffa6\011\uffa6\012\uffa6\013" +
    "\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6\021\uffa6\022\uffa6" +
    "\023\uffa6\043\uffa6\044\uffa6\046\uffa6\047\uffa6\051\uffa6\053" +
    "\uffa6\060\uffa6\067\uffa6\001\002\000\004\067\103\001\002" +
    "\000\012\030\207\034\210\035\211\036\212\001\002\000" +
    "\004\060\uffd5\001\002\000\004\002\uffda\001\002\000\020" +
    "\032\123\063\132\064\130\065\126\066\125\067\127\070" +
    "\131\001\002\000\016\034\150\035\144\036\143\037\140" +
    "\055\326\062\147\001\002\000\056\006\uffc6\007\uffc6\010" +
    "\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6" +
    "\017\uffc6\021\uffc6\022\uffc6\023\uffc6\043\uffc6\044\uffc6\046" +
    "\uffc6\047\uffc6\051\uffc6\053\uffc6\055\uffc6\060\uffc6\067\uffc6" +
    "\001\002\000\022\032\123\042\124\063\132\064\130\065" +
    "\126\066\125\067\127\070\131\001\002\000\004\033\331" +
    "\001\002\000\004\057\332\001\002\000\054\006\uffa5\007" +
    "\uffa5\010\uffa5\011\uffa5\012\uffa5\013\uffa5\014\uffa5\015\uffa5" +
    "\016\uffa5\017\uffa5\021\uffa5\022\uffa5\023\uffa5\043\uffa5\044" +
    "\uffa5\046\uffa5\047\uffa5\051\uffa5\053\uffa5\060\uffa5\067\uffa5" +
    "\001\002\000\054\006\uffb7\007\uffb7\010\013\011\010\012" +
    "\014\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017\052\021\042" +
    "\022\046\023\055\043\uffcd\044\uffb7\046\011\047\006\051" +
    "\051\053\uffcd\060\uffcd\067\057\001\002\000\010\043\312" +
    "\053\313\060\uff9b\001\002\000\004\060\336\001\002\000" +
    "\054\006\uffa4\007\uffa4\010\uffa4\011\uffa4\012\uffa4\013\uffa4" +
    "\014\uffa4\015\uffa4\016\uffa4\017\uffa4\021\uffa4\022\uffa4\023" +
    "\uffa4\043\uffa4\044\uffa4\046\uffa4\047\uffa4\051\uffa4\053\uffa4" +
    "\060\uffa4\067\uffa4\001\002\000\004\067\340\001\002\000" +
    "\020\030\uffc5\031\060\032\341\034\uffc5\035\uffc5\036\uffc5" +
    "\055\uffc5\001\002\000\024\006\072\007\063\013\065\014" +
    "\064\015\070\016\066\033\uffb2\044\062\067\067\001\002" +
    "\000\004\033\343\001\002\000\004\057\344\001\002\000" +
    "\054\006\uffcc\007\uffcc\010\uffcc\011\uffcc\012\uffcc\013\uffcc" +
    "\014\uffcc\015\uffcc\016\uffcc\017\uffcc\021\uffcc\022\uffcc\023" +
    "\uffcc\043\uffcc\044\uffcc\046\uffcc\047\uffcc\051\uffcc\053\uffcc" +
    "\060\uffcc\067\uffcc\001\002\000\054\006\uffb7\007\uffb7\010" +
    "\013\011\010\012\014\013\uffb7\014\uffb7\015\uffb7\016\uffb7" +
    "\017\052\021\042\022\046\023\055\043\uffcd\044\uffb7\046" +
    "\011\047\006\051\051\053\uffcd\060\uffcd\067\057\001\002" +
    "\000\010\043\312\053\313\060\uff9b\001\002\000\004\060" +
    "\350\001\002\000\050\006\uffcb\007\uffcb\010\uffcb\011\uffcb" +
    "\012\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\021" +
    "\uffcb\022\uffcb\023\uffcb\044\uffcb\046\uffcb\047\uffcb\051\uffcb" +
    "\060\uffcb\067\uffcb\001\002\000\004\060\uffd8\001\002\000" +
    "\004\060\uffd4\001\002\000\004\060\uffd6\001\002\000\004" +
    "\057\356\001\002\000\056\006\uffaa\007\uffaa\010\uffaa\011" +
    "\uffaa\012\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa" +
    "\020\uffaa\021\uffaa\022\uffaa\023\uffaa\043\uffaa\044\uffaa\046" +
    "\uffaa\047\uffaa\051\uffaa\053\uffaa\060\uffaa\067\uffaa\001\002" +
    "\000\050\006\uffa9\007\uffa9\010\uffa9\011\uffa9\012\uffa9\013" +
    "\uffa9\014\uffa9\015\uffa9\016\uffa9\017\uffa9\021\uffa9\022\uffa9" +
    "\023\uffa9\044\uffa9\046\uffa9\047\uffa9\051\uffa9\060\uffa9\067" +
    "\uffa9\001\002\000\050\006\uffb7\007\uffb7\010\013\011\010" +
    "\012\014\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017\052\021" +
    "\042\022\046\023\055\044\uffb7\046\011\047\006\051\051" +
    "\060\uffcd\067\057\001\002\000\004\060\361\001\002\000" +
    "\056\006\uffa8\007\uffa8\010\uffa8\011\uffa8\012\uffa8\013\uffa8" +
    "\014\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022" +
    "\uffa8\023\uffa8\043\uffa8\044\uffa8\046\uffa8\047\uffa8\051\uffa8" +
    "\053\uffa8\060\uffa8\067\uffa8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\357\000\012\002\004\003\011\004\014\011\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\023\001\001\000\004\040\021\001\001\000\012" +
    "\002\022\003\011\004\014\011\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\041\031\001" +
    "\001\000\036\011\037\012\043\013\036\014\034\015\044" +
    "\016\035\021\042\024\032\025\055\027\040\030\053\031" +
    "\033\032\046\036\047\001\001\000\004\026\354\001\001" +
    "\000\002\001\001\000\036\011\037\012\352\013\036\014" +
    "\034\015\044\016\035\021\042\024\032\025\055\027\040" +
    "\030\053\031\033\032\046\036\047\001\001\000\036\011" +
    "\037\012\351\013\036\014\034\015\044\016\035\021\042" +
    "\024\032\025\055\027\040\030\053\031\033\032\046\036" +
    "\047\001\001\000\036\011\037\012\350\013\036\014\034" +
    "\015\044\016\035\021\042\024\032\025\055\027\040\030" +
    "\053\031\033\032\046\036\047\001\001\000\004\010\336" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\323\001\001\000\002\001\001\000\036\011\037\012\321" +
    "\013\036\014\034\015\044\016\035\021\042\024\032\025" +
    "\055\027\040\030\053\031\033\032\046\036\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\011\111\014" +
    "\107\015\112\016\110\020\274\021\042\024\032\025\114" +
    "\027\040\030\053\031\033\032\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\011\037\012\104\013\036\014" +
    "\034\015\044\016\035\021\042\024\032\025\055\027\040" +
    "\030\053\031\033\032\046\036\047\001\001\000\002\001" +
    "\001\000\004\021\103\001\001\000\006\010\070\017\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\070\017\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\050\106\001" +
    "\001\000\032\011\111\014\107\015\112\016\110\020\113" +
    "\021\042\024\032\025\114\027\040\030\053\031\033\032" +
    "\046\001\001\000\032\011\111\014\107\015\112\016\110" +
    "\020\221\021\042\024\032\025\114\027\040\030\053\031" +
    "\033\032\046\001\001\000\032\011\111\014\107\015\112" +
    "\016\110\020\220\021\042\024\032\025\114\027\040\030" +
    "\053\031\033\032\046\001\001\000\004\010\203\001\001" +
    "\000\032\011\111\014\107\015\112\016\110\020\202\021" +
    "\042\024\032\025\114\027\040\030\053\031\033\032\046" +
    "\001\001\000\002\001\001\000\032\011\111\014\107\015" +
    "\112\016\110\020\115\021\042\024\032\025\114\027\040" +
    "\030\053\031\033\032\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\006\133\007\121" +
    "\022\132\033\134\001\001\000\002\001\001\000\006\006" +
    "\174\007\121\001\001\000\010\006\133\007\121\022\173" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\166\007\121" +
    "\001\001\000\010\006\133\007\121\022\165\001\001\000" +
    "\002\001\001\000\006\006\162\007\121\001\001\000\006" +
    "\006\161\007\121\001\001\000\010\006\133\007\121\022" +
    "\160\001\001\000\010\006\133\007\121\022\157\001\001" +
    "\000\006\006\156\007\121\001\001\000\006\006\155\007" +
    "\121\001\001\000\002\001\001\000\010\006\133\007\121" +
    "\022\152\001\001\000\002\001\001\000\010\006\133\007" +
    "\121\022\154\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\006\133\007\121" +
    "\022\164\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\006\133\007\121\022\172\001\001" +
    "\000\010\006\133\007\121\022\171\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\204\001\001\000\004\023\212\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\213\007\121\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\043\234\001\001\000\032\011\111\014\107\015\112\016" +
    "\110\020\235\021\042\024\032\025\114\027\040\030\053" +
    "\031\033\032\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\006\133\007\121\022\132\033\240\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\044\243\001" +
    "\001\000\032\011\111\014\107\015\112\016\110\020\244" +
    "\021\042\024\032\025\114\027\040\030\053\031\033\032" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\247\007\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\051\252\001\001\000\002\001\001\000\004" +
    "\007\254\001\001\000\002\001\001\000\032\011\111\014" +
    "\107\015\112\016\110\020\256\021\042\024\032\025\114" +
    "\027\040\030\053\031\033\032\046\001\001\000\002\001" +
    "\001\000\004\035\261\001\001\000\004\007\266\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\011\111\014" +
    "\107\015\112\016\110\020\264\021\042\024\032\025\114" +
    "\027\040\030\053\031\033\032\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\011\111" +
    "\014\107\015\112\016\110\020\270\021\042\024\032\025" +
    "\114\027\040\030\053\031\033\032\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\035\273\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\011\276\015\277" +
    "\021\042\001\001\000\004\010\317\001\001\000\002\001" +
    "\001\000\010\006\133\007\121\022\301\001\001\000\002" +
    "\001\001\000\006\006\303\007\121\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\046\306\001\001\000\032" +
    "\011\111\014\107\015\112\016\110\020\307\021\042\024" +
    "\032\025\114\027\040\030\053\031\033\032\046\001\001" +
    "\000\004\034\310\001\001\000\002\001\001\000\006\006" +
    "\314\007\121\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\320\001\001\000\004\023\212\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\324\007\121\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\006\133" +
    "\007\121\022\132\033\327\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\047\332\001\001\000\032\011\111" +
    "\014\107\015\112\016\110\020\333\021\042\024\032\025" +
    "\114\027\040\030\053\031\033\032\046\001\001\000\004" +
    "\034\334\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\204\001\001\000\002\001\001\000\006\010\070" +
    "\017\341\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\042\344\001\001\000\032\011\111\014\107\015\112" +
    "\016\110\020\345\021\042\024\032\025\114\027\040\030" +
    "\053\031\033\032\046\001\001\000\004\034\346\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\045\356\001\001\000\032\011\111\014" +
    "\107\015\112\016\110\020\357\021\042\024\032\025\114" +
    "\027\040\030\053\031\033\032\046\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public ArrayList al = new ArrayList();
    public ArrayList erroresS = new ArrayList();
    public ArrayList erroresS1 = new ArrayList();


    /**Metodo al que se llama automáticamente ante algún error sintactico.*/
    public void syntax_error(Symbol s){
        String lexema = s.value.toString();
        int fila = s.right+1;
        int columna = s.left+1;
        
        System.err.println("Error en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador '"
        +s.value + "' no reconocido." );


        erroresS.add("Error en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador '"
        +s.value + "' no reconocido.\n");
    }

    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de
    errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String lexema = s.value.toString();
        int fila = s.right+1;
        int columna = s.left+1;

        System.err.println("Error en la Línea " + (s.right+1)+ " Columna "+(s.left+1)+". Identificador '" +
        s.value + "' no reconocido.");
        
        erroresS1.add("Error en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador '"
        +s.value + "' no reconocido.\n");
    }

    /*public Nodo getRaiz(){
        return action_obj.raiz;
    }*/

    


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {


    //Nodo raiz=null;
    Sintactico sin = new Sintactico();
    ArrayList corchetes = new ArrayList();
    

  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // LLAM ::= iden parentesisA PARAM parentesisC puntoYcoma 
            {
              Object RESULT =null;
		parser.al.add("llamada de funcion\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAM",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // INSTANCIA ::= iden iden igual iden iden parentesisA parentesisC puntoYcoma 
            {
              Object RESULT =null;
		parser.al.add("instancia\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTANCIA",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // SALIDA ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SALIDA",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // SALIDA ::= resReturn EXP puntoYcoma 
            {
              Object RESULT =null;
		parser.al.add("return\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SALIDA",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // SALIDA ::= resBreak puntoYcoma 
            {
              Object RESULT =null;
		parser.al.add("break\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SALIDA",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CASES ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASES",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CASES ::= resCase VALOR dosPuntos COD2 resBreak puntoYcoma CASES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASES",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SENTSWITCH ::= resSwitch parentesisA EXP parentesisC parA NT$9 resCase VALOR dosPuntos COD2 resBreak CASES resDefault dosPuntos COD2 parC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).value;
		parser.al.add("fin de la sentencia switch\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTSWITCH",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-15)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$9 ::= 
            {
              Object RESULT =null;
parser.al.add("inicio de la sentencia switch\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$9",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SENTDO ::= resDo parA NT$8 COD2 parC resWhile parentesisA EXPSENT parentesisC puntoYcoma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		parser.al.add("fin de la sentencia Do\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTDO",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$8 ::= 
            {
              Object RESULT =null;
parser.al.add("inicio de la sentencia Do\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$8",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // SENTWHILE ::= resWhile parentesisA EXPSENT parentesisC parA NT$7 COD2 SALIDA parC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		parser.al.add("fin de la sentencia while\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTWHILE",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // NT$7 ::= 
            {
              Object RESULT =null;
parser.al.add("inicio de la sentencia while\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$7",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // SENTFOR ::= resFor parentesisA ASIGNACION puntoYcoma OPREL puntoYcoma EXP parentesisC parA NT$6 COD2 SALIDA parC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		parser.al.add("fin de la sentencia for\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTFOR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // NT$6 ::= 
            {
              Object RESULT =null;
parser.al.add("inicio de la sentencia for\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$6",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // SENTELSE ::= resElse parA NT$5 COD2 parC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		parser.al.add("fin de la sentencia else\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTELSE",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // NT$5 ::= 
            {
              Object RESULT =null;
parser.al.add("inicio de la sentencia else\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$5",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SENTIF ::= SENTIF SENTELSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTIF",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SENTIF ::= resIf parentesisA EXPSENT parentesisC parA NT$4 COD2 parC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		parser.al.add("fin de la sentencia if\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTIF",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$4 ::= 
            {
              Object RESULT =null;
parser.al.add("inicio de la sentencia if\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$4",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SENTENCIAS ::= SENTDO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SENTENCIAS ::= SENTSWITCH 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SENTENCIAS ::= SENTFOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SENTENCIAS ::= SENTWHILE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SENTENCIAS ::= SENTIF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // PARAM ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAM",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // PARAM ::= TIPO iden coma PARAM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAM",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // PARAM ::= TIPO iden 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAM",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // PARAM ::= iden coma iden 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+","+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAM",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // PARAM ::= iden 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAM",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ACCESO ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ACCESO ::= resFinal 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ACCESO ::= resStatic 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ACCESO ::= resProtected 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ACCESO ::= resPrivate 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ACCESO ::= resPublic 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // TIPO ::= resObject 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // TIPO ::= resLong 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // TIPO ::= resChar 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // TIPO ::= resDouble 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // TIPO ::= resBoolean 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // TIPO ::= resString 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // TIPO ::= resInt 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LISTAID ::= iden coma LISTAID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=id+","+id1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAID",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LISTAID ::= iden 
            {
              Object RESULT =null;
		int id2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=id2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAID",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ASIGNACION ::= LISTAID IGUALACION EXP puntoYcoma 
            {
              Object RESULT =null;
		parser.al.add("asignacion a variables previamente declaradas\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ASIGNACION ::= ACCESO TIPO LISTAID IGUALACION EXP puntoYcoma 
            {
              Object RESULT =null;
		parser.al.add("asignacion a variables no declaradas\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION ::= ACCESO TIPO LISTAID puntoYcoma 
            {
              Object RESULT =null;
		parser.al.add("declaracion de variables\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // MAIN ::= resPublic resStatic iden iden parentesisA resString iden corA corC parentesisC parA NT$3 COD2 parC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		parser.al.add("fin del metodo main\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MAIN",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$3 ::= 
            {
              Object RESULT =null;
parser.al.add("inicio del metodo main\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$3",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // MET ::= ACCESO TIPO iden parentesisA PARAM parentesisC parA NT$2 COD2 SALIDA parC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		parser.al.add("fin del metodo o funcion\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MET",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$2 ::= 
            {
              Object RESULT =null;
parser.al.add("inicio del metodo o funcion\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$2",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // COD2 ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD2",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // COD2 ::= LLAM COD2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD2",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // COD2 ::= SENTENCIAS COD2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD2",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // COD2 ::= ASIGNACION COD2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD2",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // COD2 ::= DECLARACION COD2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD2",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // COD ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // COD ::= LLAM COD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // COD ::= SENTENCIAS COD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // COD ::= ASIGNACION COD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // COD ::= DECLARACION COD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // COD ::= MAIN COD2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // COD ::= MET COD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CLASS ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASS",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CLASS ::= ACCESO resClass iden parA NT$1 COD parC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		parser.al.add("fin de la clase\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASS",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$1 ::= 
            {
              Object RESULT =null;
parser.al.add("inicio de la clase\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VALOR ::= caracter 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VALOR ::= iden 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VALOR ::= bool 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // VALOR ::= cadena 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // VALOR ::= decimal 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VALOR ::= entero 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OPREL ::= EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPREL",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OPREL ::= EXP not igual OPREL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPREL",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OPREL ::= EXP igual igual OPREL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPREL",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OPREL ::= EXP menorIgual OPREL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPREL",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OPREL ::= EXP mayorIgual OPREL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPREL",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OPREL ::= EXP menorq OPREL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPREL",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OPREL ::= EXP mayorq OPREL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPREL",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXPSENT ::= OPREL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPSENT",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXPSENT ::= not OPREL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPSENT",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXPSENT ::= OPREL or OPREL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPSENT",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXPSENT ::= OPREL and OPREL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPSENT",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXP ::= VALOR 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXP ::= VALOR menos menos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EXP ::= VALOR mas mas 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EXP ::= parentesisA EXP parentesisC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EXP ::= EXP modulo EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"/"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EXP ::= EXP div EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"/"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EXP ::= EXP mul EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"*"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EXP ::= EXP menos EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"-"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // EXP ::= EXP mas EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"+"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // IGUALACION ::= igual 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IGUALACION",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // IGUALACION ::= mul igual 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IGUALACION",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // IGUALACION ::= menos igual 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IGUALACION",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // IGUALACION ::= mas igual 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IGUALACION",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // EXPIMP ::= iden 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPIMP",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // EXPIMP ::= EXPIMP punto mul 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT=val1+".*";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPIMP",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // EXPIMP ::= EXPIMP punto EXPIMP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"."+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPIMP",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IMPORT ::= resImport EXPIMP puntoYcoma NT$0 INICIO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPORT",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              Object RESULT =null;
parser.al.add("importacion\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= CLASS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= IMPORT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

