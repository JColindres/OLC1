
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Mar 30 22:07:02 CST 2018
//----------------------------------------------------

package Analisis;

import java.util.ArrayList;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Mar 30 22:07:02 CST 2018
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\053\000\002\002\004\000\002\002\005\000\002\003" +
    "\010\000\002\003\007\000\002\003\002\000\002\004\004" +
    "\000\002\004\010\000\002\004\004\000\002\004\004\000" +
    "\002\004\002\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\004\000\002\005\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\007\007\000\002\007\007\000\002" +
    "\007\007\000\002\007\007\000\002\007\007\000\002\007" +
    "\007\000\002\011\010\000\002\011\002\000\002\012\010" +
    "\000\002\012\007\000\002\012\002\000\002\013\007\000" +
    "\002\014\005\000\002\014\003\000\002\014\002\000\002" +
    "\010\006\000\002\010\006\000\002\010\006\000\002\010" +
    "\006\000\002\010\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\166\000\004\004\004\001\002\000\010\005\ufffd\006" +
    "\007\010\011\001\002\000\004\002\006\001\002\000\004" +
    "\002\001\001\002\000\004\026\164\001\002\000\004\005" +
    "\163\001\002\000\032\006\ufff8\010\ufff8\011\ufff8\012\023" +
    "\014\017\016\012\020\022\022\016\024\025\030\013\042" +
    "\015\044\024\001\002\000\014\045\027\046\031\047\032" +
    "\050\026\143\uffd7\001\002\000\014\045\027\046\031\047" +
    "\032\050\026\143\uffd7\001\002\000\032\006\ufff8\010\ufff8" +
    "\011\ufff8\012\023\014\017\016\012\020\022\022\016\024" +
    "\025\030\013\042\015\044\024\001\002\000\014\045\027" +
    "\046\031\047\032\050\026\143\uffd7\001\002\000\014\045" +
    "\027\046\031\047\032\050\026\143\uffd7\001\002\000\014" +
    "\045\027\046\031\047\032\050\026\143\uffd7\001\002\000" +
    "\010\006\007\010\011\011\ufffd\001\002\000\032\006\ufff8" +
    "\010\ufff8\011\ufff8\012\023\014\017\016\012\020\022\022" +
    "\016\024\025\030\013\042\015\044\024\001\002\000\014" +
    "\045\027\046\031\047\032\050\026\143\uffd7\001\002\000" +
    "\014\045\027\046\031\047\032\050\026\143\uffd7\001\002" +
    "\000\032\006\ufff8\010\ufff8\011\ufff8\012\023\014\017\016" +
    "\012\020\022\022\016\024\025\030\013\042\015\044\024" +
    "\001\002\000\014\045\027\046\031\047\032\050\026\143" +
    "\uffd7\001\002\000\004\147\071\001\002\000\004\147\066" +
    "\001\002\000\004\143\041\001\002\000\004\147\036\001" +
    "\002\000\004\147\033\001\002\000\004\175\034\001\002" +
    "\000\014\045\027\046\031\047\032\050\026\143\uffd7\001" +
    "\002\000\004\143\uffd9\001\002\000\004\175\037\001\002" +
    "\000\014\045\027\046\031\047\032\050\026\143\uffd7\001" +
    "\002\000\004\143\uffda\001\002\000\016\173\044\174\042" +
    "\175\043\176\045\177\046\200\051\001\002\000\056\013" +
    "\uffef\015\uffef\017\uffef\021\uffef\023\uffef\025\uffef\027\uffef" +
    "\033\uffef\035\uffef\043\uffef\044\uffef\134\uffef\135\uffef\136" +
    "\uffef\137\uffef\140\uffef\173\uffef\174\uffef\175\uffef\176\uffef" +
    "\177\uffef\200\uffef\001\002\000\056\013\uffee\015\uffee\017" +
    "\uffee\021\uffee\023\uffee\025\uffee\027\uffee\033\uffee\035\uffee" +
    "\043\uffee\044\uffee\134\uffee\135\uffee\136\uffee\137\uffee\140" +
    "\uffee\173\uffee\174\uffee\175\uffee\176\uffee\177\uffee\200\uffee" +
    "\001\002\000\056\013\ufff0\015\ufff0\017\ufff0\021\ufff0\023" +
    "\ufff0\025\ufff0\027\ufff0\033\ufff0\035\ufff0\043\ufff0\044\ufff0" +
    "\134\ufff0\135\ufff0\136\ufff0\137\ufff0\140\ufff0\173\ufff0\174" +
    "\ufff0\175\ufff0\176\ufff0\177\ufff0\200\ufff0\001\002\000\056" +
    "\013\uffed\015\uffed\017\uffed\021\uffed\023\uffed\025\uffed\027" +
    "\uffed\033\uffed\035\uffed\043\uffed\044\uffed\134\uffed\135\uffed" +
    "\136\uffed\137\uffed\140\uffed\173\uffed\174\uffed\175\uffed\176" +
    "\uffed\177\uffed\200\uffed\001\002\000\056\013\uffec\015\uffec" +
    "\017\uffec\021\uffec\023\uffec\025\uffec\027\uffec\033\uffec\035" +
    "\uffec\043\uffec\044\uffec\134\uffec\135\uffec\136\uffec\137\uffec" +
    "\140\uffec\173\uffec\174\uffec\175\uffec\176\uffec\177\uffec\200" +
    "\uffec\001\002\000\056\013\ufff1\015\ufff1\017\ufff1\021\ufff1" +
    "\023\ufff1\025\ufff1\027\ufff1\033\ufff1\035\ufff1\043\ufff1\044" +
    "\ufff1\134\ufff1\135\ufff1\136\ufff1\137\ufff1\140\ufff1\173\044" +
    "\174\042\175\043\176\045\177\046\200\051\001\002\000" +
    "\016\025\056\134\053\135\054\136\055\137\057\140\052" +
    "\001\002\000\056\013\uffeb\015\uffeb\017\uffeb\021\uffeb\023" +
    "\uffeb\025\uffeb\027\uffeb\033\uffeb\035\uffeb\043\uffeb\044\uffeb" +
    "\134\uffeb\135\uffeb\136\uffeb\137\uffeb\140\uffeb\173\uffeb\174" +
    "\uffeb\175\uffeb\176\uffeb\177\uffeb\200\uffeb\001\002\000\016" +
    "\173\044\174\042\175\043\176\045\177\046\200\051\001" +
    "\002\000\016\173\044\174\042\175\043\176\045\177\046" +
    "\200\051\001\002\000\016\173\044\174\042\175\043\176" +
    "\045\177\046\200\051\001\002\000\016\173\044\174\042" +
    "\175\043\176\045\177\046\200\051\001\002\000\032\006" +
    "\uffe5\010\uffe5\011\uffe5\012\uffe5\014\uffe5\016\uffe5\020\uffe5" +
    "\022\uffe5\024\uffe5\030\uffe5\042\uffe5\044\uffe5\001\002\000" +
    "\016\173\044\174\042\175\043\176\045\177\046\200\051" +
    "\001\002\000\042\013\ufff4\015\ufff4\017\ufff4\021\ufff4\023" +
    "\ufff4\025\ufff4\027\ufff4\033\ufff4\035\ufff4\043\ufff4\044\ufff4" +
    "\134\ufff4\135\ufff4\136\ufff4\137\ufff4\140\ufff4\001\002\000" +
    "\042\013\ufff5\015\ufff5\017\ufff5\021\ufff5\023\ufff5\025\ufff5" +
    "\027\ufff5\033\ufff5\035\ufff5\043\ufff5\044\ufff5\134\ufff5\135" +
    "\ufff5\136\ufff5\137\ufff5\140\ufff5\001\002\000\042\013\ufff6" +
    "\015\ufff6\017\ufff6\021\ufff6\023\ufff6\025\ufff6\027\ufff6\033" +
    "\ufff6\035\ufff6\043\ufff6\044\ufff6\134\ufff6\135\ufff6\136\055" +
    "\137\057\140\052\001\002\000\042\013\ufff7\015\ufff7\017" +
    "\ufff7\021\ufff7\023\ufff7\025\ufff7\027\ufff7\033\ufff7\035\ufff7" +
    "\043\ufff7\044\ufff7\134\ufff7\135\ufff7\136\055\137\057\140" +
    "\052\001\002\000\042\013\ufff3\015\ufff3\017\ufff3\021\ufff3" +
    "\023\ufff3\025\ufff3\027\ufff3\033\ufff3\035\ufff3\043\ufff3\044" +
    "\ufff3\134\ufff3\135\ufff3\136\ufff3\137\ufff3\140\ufff3\001\002" +
    "\000\042\013\ufff2\015\ufff2\017\ufff2\021\ufff2\023\ufff2\025" +
    "\ufff2\027\ufff2\033\ufff2\035\ufff2\043\ufff2\044\ufff2\134\053" +
    "\135\054\136\055\137\057\140\052\001\002\000\004\175" +
    "\067\001\002\000\014\045\027\046\031\047\032\050\026" +
    "\143\uffd7\001\002\000\004\143\uffdb\001\002\000\004\175" +
    "\072\001\002\000\014\045\027\046\031\047\032\050\026" +
    "\143\uffd7\001\002\000\004\143\uffd8\001\002\000\010\006" +
    "\ufffa\010\ufffa\011\ufffa\001\002\000\004\143\076\001\002" +
    "\000\016\173\044\174\042\175\043\176\045\177\046\200" +
    "\051\001\002\000\016\013\100\134\053\135\054\136\055" +
    "\137\057\140\052\001\002\000\032\006\uffea\010\uffea\011" +
    "\uffea\012\uffea\014\uffea\016\uffea\020\uffea\022\uffea\024\uffea" +
    "\030\uffea\042\uffea\044\uffea\001\002\000\004\143\102\001" +
    "\002\000\016\173\044\174\042\175\043\176\045\177\046" +
    "\200\051\001\002\000\016\021\104\134\053\135\054\136" +
    "\055\137\057\140\052\001\002\000\032\006\uffe7\010\uffe7" +
    "\011\uffe7\012\uffe7\014\uffe7\016\uffe7\020\uffe7\022\uffe7\024" +
    "\uffe7\030\uffe7\042\uffe7\044\uffe7\001\002\000\010\006\ufff9" +
    "\010\ufff9\011\ufff9\001\002\000\004\011\107\001\002\000" +
    "\012\005\ufffd\006\007\010\011\011\ufffd\001\002\000\006" +
    "\005\ufffe\011\ufffe\001\002\000\004\143\112\001\002\000" +
    "\016\173\044\174\042\175\043\176\045\177\046\200\051" +
    "\001\002\000\016\015\114\134\053\135\054\136\055\137" +
    "\057\140\052\001\002\000\032\006\uffe9\010\uffe9\011\uffe9" +
    "\012\uffe9\014\uffe9\016\uffe9\020\uffe9\022\uffe9\024\uffe9\030" +
    "\uffe9\042\uffe9\044\uffe9\001\002\000\004\143\116\001\002" +
    "\000\016\173\044\174\042\175\043\176\045\177\046\200" +
    "\051\001\002\000\016\023\120\134\053\135\054\136\055" +
    "\137\057\140\052\001\002\000\032\006\uffe6\010\uffe6\011" +
    "\uffe6\012\uffe6\014\uffe6\016\uffe6\020\uffe6\022\uffe6\024\uffe6" +
    "\030\uffe6\042\uffe6\044\uffe6\001\002\000\004\143\122\001" +
    "\002\000\020\043\uffdc\173\044\174\042\175\043\176\045" +
    "\177\046\200\051\001\002\000\004\043\127\001\002\000" +
    "\020\043\uffdd\044\125\134\053\135\054\136\055\137\057" +
    "\140\052\001\002\000\020\043\uffdc\173\044\174\042\175" +
    "\043\176\045\177\046\200\051\001\002\000\004\043\uffde" +
    "\001\002\000\032\006\uffdf\010\uffdf\011\uffdf\012\uffdf\014" +
    "\uffdf\016\uffdf\020\uffdf\022\uffdf\024\uffdf\030\uffdf\042\uffdf" +
    "\044\uffdf\001\002\000\010\006\ufffc\010\ufffc\011\ufffc\001" +
    "\002\000\004\143\132\001\002\000\006\031\uffe3\036\134" +
    "\001\002\000\004\031\155\001\002\000\014\045\027\046" +
    "\031\047\032\050\026\143\uffd7\001\002\000\004\143\136" +
    "\001\002\000\010\032\141\034\137\037\uffe0\001\002\000" +
    "\014\045\027\046\031\047\032\050\026\143\uffd7\001\002" +
    "\000\004\037\146\001\002\000\004\143\142\001\002\000" +
    "\016\173\044\174\042\175\043\176\045\177\046\200\051" +
    "\001\002\000\016\033\144\134\053\135\054\136\055\137" +
    "\057\140\052\001\002\000\010\032\141\034\137\037\uffe0" +
    "\001\002\000\004\037\uffe1\001\002\000\006\031\uffe3\036" +
    "\134\001\002\000\004\031\uffe4\001\002\000\004\143\151" +
    "\001\002\000\016\173\044\174\042\175\043\176\045\177" +
    "\046\200\051\001\002\000\016\035\153\134\053\135\054" +
    "\136\055\137\057\140\052\001\002\000\010\032\141\034" +
    "\137\037\uffe0\001\002\000\004\037\uffe2\001\002\000\032" +
    "\006\ufff8\010\ufff8\011\ufff8\012\023\014\017\016\012\020" +
    "\022\022\016\024\025\030\013\042\015\044\024\001\002" +
    "\000\010\006\ufffb\010\ufffb\011\ufffb\001\002\000\004\143" +
    "\160\001\002\000\016\173\044\174\042\175\043\176\045" +
    "\177\046\200\051\001\002\000\016\017\162\134\053\135" +
    "\054\136\055\137\057\140\052\001\002\000\032\006\uffe8" +
    "\010\uffe8\011\uffe8\012\uffe8\014\uffe8\016\uffe8\020\uffe8\022" +
    "\uffe8\024\uffe8\030\uffe8\042\uffe8\044\uffe8\001\002\000\004" +
    "\002\000\001\002\000\016\173\044\174\042\175\043\176" +
    "\045\177\046\200\051\001\002\000\016\027\166\134\053" +
    "\135\054\136\055\137\057\140\052\001\002\000\004\007" +
    "\167\001\002\000\012\005\ufffd\006\007\010\011\011\ufffd" +
    "\001\002\000\006\005\uffff\011\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\166\000\004\002\004\001\001\000\004\003\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\004\017\007\013\013\020\001" +
    "\001\000\004\010\156\001\001\000\004\010\130\001\001" +
    "\000\010\004\127\007\013\013\020\001\001\000\004\010" +
    "\120\001\001\000\004\010\114\001\001\000\004\010\110" +
    "\001\001\000\004\003\105\001\001\000\010\004\104\007" +
    "\013\013\020\001\001\000\004\010\100\001\001\000\004" +
    "\010\074\001\001\000\010\004\073\007\013\013\020\001" +
    "\001\000\004\010\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\037\001\001\000" +
    "\002\001\001\000\006\005\047\006\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\064\006\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\063\006" +
    "\046\001\001\000\006\005\062\006\046\001\001\000\006" +
    "\005\061\006\046\001\001\000\006\005\060\006\046\001" +
    "\001\000\002\001\001\000\006\005\057\006\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\076\006" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\102\006\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\107\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\112\006\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\116\006" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\123\006\046\014\122\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\005\123\006\046" +
    "\014\125\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\132\001\001" +
    "\000\002\001\001\000\004\010\134\001\001\000\002\001" +
    "\001\000\004\012\137\001\001\000\004\010\147\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\142\006" +
    "\046\001\001\000\002\001\001\000\004\012\144\001\001" +
    "\000\002\001\001\000\004\011\146\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\151\006\046\001\001" +
    "\000\002\001\001\000\004\012\153\001\001\000\002\001" +
    "\001\000\010\004\155\007\013\013\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\160\006\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\164\006\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\167\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public ArrayList al = new ArrayList();
    public ArrayList erroresS = new ArrayList();
    public ArrayList erroresS1 = new ArrayList();


    /**Metodo al que se llama automáticamente ante algún error sintactico.*/
    public void syntax_error(Symbol s){
        String lexema = s.value.toString();
        int fila = s.right+1;
        int columna = s.left+1;
        
        System.err.println("Error en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador '"
        +s.value + "' no reconocido." );


        erroresS.add("Error en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador '"
        +s.value + "' no reconocido.\n");
    }

    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de
    errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String lexema = s.value.toString();
        int fila = s.right+1;
        int columna = s.left+1;

        System.err.println("Error en la Línea " + (s.right+1)+ " Columna "+(s.left+1)+". Identificador '" +
        s.value + "' no reconocido.");
        
        erroresS1.add("Error en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador '"
        +s.value + "' no reconocido.\n");
    }

    /*public Nodo getRaiz(){
        return action_obj.raiz;
    }*/

    


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {


    //Nodo raiz=null;
    Sintactico sin = new Sintactico();
    ArrayList corchetes = new ArrayList();
    

  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ATRIBUTOS ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ATRIBUTOS ::= fon igual cadena ATRIBUTOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ATRIBUTOS ::= alig igual cadena ATRIBUTOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ATRIBUTOS ::= txtcol igual cadena ATRIBUTOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ATRIBUTOS ::= col igual cadena ATRIBUTOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CUERPOP ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOP",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CUERPOP ::= EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOP",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CUERPOP ::= EXP br CUERPOP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOP",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EP ::= pA ATRIBUTOS mayorq CUERPOP pC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ETDHA ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ETDHA",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ETDHA ::= thA mayorq EXP thC ETDHA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ETDHA",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ETDHA ::= tdA ATRIBUTOS mayorq EXP tdC ETDHA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ETDHA",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ETRA ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ETRA",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ETRA ::= trA ATRIBUTOS mayorq ETDHA trC ETRA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ETRA",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EHA ::= h6A ATRIBUTOS mayorq EXP h6C 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EHA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EHA ::= h5A ATRIBUTOS mayorq EXP h5C 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EHA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EHA ::= h4A ATRIBUTOS mayorq EXP h4C 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EHA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EHA ::= h3A ATRIBUTOS mayorq EXP h3C 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EHA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EHA ::= h2A ATRIBUTOS mayorq EXP h2C 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EHA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EHA ::= h1A ATRIBUTOS mayorq EXP h1C 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EHA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VALOR ::= caracter 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VALOR ::= iden 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VALOR ::= bool 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VALOR ::= cadena 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VALOR ::= decimal 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VALOR ::= entero 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EXP ::= VALOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EXP ::= VALOR EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EXP ::= EXP modulo EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EXP ::= EXP div EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // EXP ::= EXP mul EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // EXP ::= EXP menos EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // EXP ::= EXP mas EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CUERPOBODY ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOBODY",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CUERPOBODY ::= EP CUERPOBODY 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOBODY",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CUERPOBODY ::= br CUERPOBODY 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOBODY",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CUERPOBODY ::= tableA ATRIBUTOS mayorq ETRA tableC CUERPOBODY 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOBODY",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CUERPOBODY ::= EHA CUERPOBODY 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOBODY",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CUERPOHTML ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOHTML",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CUERPOHTML ::= bodyA CUERPOBODY CUERPOHTML bodyC CUERPOHTML 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOHTML",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CUERPOHTML ::= headA titleA EXP titleC headC CUERPOHTML 
            {
              Object RESULT =null;
		parser.al.add("Compilacion exitosa\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOHTML",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= htmlA CUERPOHTML htmlC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

