
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Mar 31 02:13:38 CST 2018
//----------------------------------------------------

package Analisis;

import java.util.ArrayList;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Mar 31 02:13:38 CST 2018
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\231\000\002\002\004\000\002\002\005\000\002\002" +
    "\003\000\002\003\010\000\002\003\007\000\002\003\002" +
    "\000\002\004\004\000\002\004\010\000\002\004\004\000" +
    "\002\004\004\000\002\004\004\000\002\004\004\000\002" +
    "\004\002\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\007\000\002\005\007\000\002\005\007\000" +
    "\002\005\007\000\002\005\007\000\002\005\004\000\002" +
    "\005\004\000\002\005\004\000\002\005\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\007\007\000" +
    "\002\007\007\000\002\007\007\000\002\007\007\000\002" +
    "\007\007\000\002\007\007\000\002\011\010\000\002\011" +
    "\002\000\002\012\010\000\002\012\007\000\002\012\002" +
    "\000\002\014\007\000\002\015\005\000\002\015\003\000" +
    "\002\015\002\000\002\016\007\000\002\017\003\000\002" +
    "\010\006\000\002\010\006\000\002\010\006\000\002\010" +
    "\006\000\002\010\010\000\002\010\010\000\002\010\010" +
    "\000\002\010\010\000\002\010\002\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\023\005\000\002\023\002\000\002\024\004\000\002\024" +
    "\004\000\002\024\004\000\002\024\002\000\002\027\007" +
    "\000\002\025\005\000\002\025\012\000\002\025\005\000" +
    "\002\025\007\000\002\025\007\000\002\025\012\000\002" +
    "\025\005\000\002\025\007\000\002\025\007\000\002\025" +
    "\012\000\002\025\005\000\002\025\007\000\002\025\007" +
    "\000\002\030\005\000\002\030\004\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\026\007\000\002" +
    "\026\006\000\002\026\011\000\002\026\010\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\032\005\000\002" +
    "\032\005\000\002\032\005\000\002\032\005\000\002\032" +
    "\005\000\002\032\005\000\002\032\002\000\002\033\004" +
    "\000\002\033\004\000\002\033\004\000\002\033\002\000" +
    "\002\013\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u013e\000\010\002\uff99\004\004\164\006\001\002\000" +
    "\010\005\ufffc\006\234\010\236\001\002\000\004\002\uffff" +
    "\001\002\000\040\125\032\126\030\127\026\130\023\131" +
    "\025\132\034\133\013\152\027\164\uff95\175\031\176\012" +
    "\177\011\200\022\201\035\202\020\001\002\000\004\002" +
    "\010\001\002\000\004\002\001\001\002\000\120\013\uffe3" +
    "\015\uffe3\017\uffe3\021\uffe3\023\uffe3\025\uffe3\027\uffe3\033" +
    "\uffe3\035\uffe3\043\uffe3\044\uffe3\135\uffe3\136\uffe3\137\uffe3" +
    "\140\uffe3\141\uffe3\142\uffe3\143\uffe3\144\uffe3\145\uffe3\146" +
    "\uffe3\147\uffe3\150\uffe3\151\uffe3\152\uffe3\153\uffe3\154\uffe3" +
    "\155\uffe3\157\uffe3\160\uffe3\161\uffe3\162\uffe3\163\uffe3\175" +
    "\uffe3\176\uffe3\177\uffe3\200\uffe3\201\uffe3\202\uffe3\001\002" +
    "\000\120\013\uffe4\015\uffe4\017\uffe4\021\uffe4\023\uffe4\025" +
    "\uffe4\027\uffe4\033\uffe4\035\uffe4\043\uffe4\044\uffe4\135\uffe4" +
    "\136\uffe4\137\uffe4\140\uffe4\141\uffe4\142\uffe4\143\uffe4\144" +
    "\uffe4\145\uffe4\146\uffe4\147\uffe4\150\uffe4\151\uffe4\152\uffe4" +
    "\153\uffe4\154\uffe4\155\uffe4\157\uffe4\160\uffe4\161\uffe4\162" +
    "\uffe4\163\uffe4\175\uffe4\176\uffe4\177\uffe4\200\uffe4\201\uffe4" +
    "\202\uffe4\001\002\000\004\156\177\001\002\000\040\125" +
    "\032\126\030\127\026\130\023\131\025\132\034\133\013" +
    "\152\027\164\uff95\175\031\176\012\177\011\200\022\201" +
    "\035\202\020\001\002\000\004\164\175\001\002\000\040" +
    "\125\032\126\030\127\026\130\023\131\025\132\034\133" +
    "\013\152\027\164\uff95\175\031\176\012\177\011\200\022" +
    "\201\035\202\020\001\002\000\026\135\066\136\055\137" +
    "\052\140\050\141\060\150\155\154\164\161\150\162\153" +
    "\163\152\001\002\000\120\013\uffe0\015\uffe0\017\uffe0\021" +
    "\uffe0\023\uffe0\025\uffe0\027\uffe0\033\uffe0\035\uffe0\043\uffe0" +
    "\044\uffe0\135\uffe0\136\uffe0\137\uffe0\140\uffe0\141\uffe0\142" +
    "\uffe0\143\uffe0\144\uffe0\145\uffe0\146\uffe0\147\uffe0\150\uffe0" +
    "\151\uffe0\152\uffe0\153\uffe0\154\uffe0\155\uffe0\157\uffe0\160" +
    "\uffe0\161\uffe0\162\uffe0\163\uffe0\175\uffe0\176\uffe0\177\uffe0" +
    "\200\uffe0\201\uffe0\202\uffe0\001\002\000\020\152\027\175" +
    "\031\176\012\177\011\200\022\201\035\202\020\001\002" +
    "\000\120\013\uffe2\015\uffe2\017\uffe2\021\uffe2\023\uffe2\025" +
    "\uffe2\027\uffe2\033\uffe2\035\uffe2\043\uffe2\044\uffe2\135\uffe2" +
    "\136\uffe2\137\uffe2\140\uffe2\141\uffe2\142\uffe2\143\uffe2\144" +
    "\uffe2\145\uffe2\146\uffe2\147\uffe2\150\uffe2\151\uffe2\152\uffe2" +
    "\153\uffe2\154\uffe2\155\uffe2\157\uffe2\160\uffe2\161\uffe2\162" +
    "\uffe2\163\uffe2\175\uffe2\176\uffe2\177\uffe2\200\uffe2\201\uffe2" +
    "\202\uffe2\001\002\000\020\152\uff79\175\uff79\176\uff79\177" +
    "\uff79\200\uff79\201\uff79\202\uff79\001\002\000\040\125\032" +
    "\126\030\127\026\130\023\131\025\132\034\133\013\152" +
    "\027\164\uff95\175\031\176\012\177\011\200\022\201\035" +
    "\202\020\001\002\000\020\152\uff7b\175\uff7b\176\uff7b\177" +
    "\uff7b\200\uff7b\201\uff7b\202\uff7b\001\002\000\020\152\uff7a" +
    "\175\uff7a\176\uff7a\177\uff7a\200\uff7a\201\uff7a\202\uff7a\001" +
    "\002\000\016\175\031\176\012\177\011\200\022\201\035" +
    "\202\020\001\002\000\020\152\uff7d\175\uff7d\176\uff7d\177" +
    "\uff7d\200\uff7d\201\uff7d\202\uff7d\001\002\000\120\013\uffe5" +
    "\015\uffe5\017\uffe5\021\uffe5\023\uffe5\025\uffe5\027\uffe5\033" +
    "\uffe5\035\uffe5\043\uffe5\044\uffe5\135\uffe5\136\uffe5\137\uffe5" +
    "\140\uffe5\141\uffe5\142\uffe5\143\uffe5\144\uffe5\145\uffe5\146" +
    "\uffe5\147\uffe5\150\uffe5\151\uffe5\152\uffe5\153\uffe5\154\uffe5" +
    "\155\uffe5\157\uffe5\160\uffe5\161\uffe5\162\uffe5\163\uffe5\175" +
    "\uffe5\176\uffe5\177\uffe5\200\uffe5\201\uffe5\202\uffe5\001\002" +
    "\000\020\152\uff7c\175\uff7c\176\uff7c\177\uff7c\200\uff7c\201" +
    "\uff7c\202\uff7c\001\002\000\120\013\uffe6\015\uffe6\017\uffe6" +
    "\021\uffe6\023\uffe6\025\uffe6\027\uffe6\033\uffe6\035\uffe6\043" +
    "\uffe6\044\uffe6\135\uffe6\136\uffe6\137\uffe6\140\uffe6\141\uffe6" +
    "\142\uffe6\143\uffe6\144\uffe6\145\uffe6\146\uffe6\147\uffe6\150" +
    "\uffe6\151\uffe6\152\027\153\uffe6\154\uffe6\155\uffe6\157\126" +
    "\160\124\161\uffe6\162\uffe6\163\uffe6\175\031\176\012\177" +
    "\011\200\022\201\035\202\020\001\002\000\004\152\036" +
    "\001\002\000\120\013\uffe1\015\uffe1\017\uffe1\021\uffe1\023" +
    "\uffe1\025\uffe1\027\uffe1\033\uffe1\035\uffe1\043\uffe1\044\uffe1" +
    "\135\uffe1\136\uffe1\137\uffe1\140\uffe1\141\uffe1\142\uffe1\143" +
    "\uffe1\144\uffe1\145\uffe1\146\uffe1\147\uffe1\150\uffe1\151\uffe1" +
    "\152\uffe1\153\uffe1\154\uffe1\155\uffe1\157\uffe1\160\uffe1\161" +
    "\uffe1\162\uffe1\163\uffe1\175\uffe1\176\uffe1\177\uffe1\200\uffe1" +
    "\201\uffe1\202\uffe1\001\002\000\032\133\013\152\041\153" +
    "\uff6a\165\043\166\042\167\040\175\031\176\012\177\011" +
    "\200\022\201\035\202\020\001\002\000\010\151\uff83\153" +
    "\uff83\155\uff83\001\002\000\004\152\112\001\002\000\020" +
    "\152\027\175\031\176\012\177\011\200\022\201\035\202" +
    "\020\001\002\000\004\152\112\001\002\000\004\152\112" +
    "\001\002\000\010\151\uff84\153\uff84\155\uff84\001\002\000" +
    "\004\153\107\001\002\000\010\151\uff82\153\uff82\155\uff82" +
    "\001\002\000\036\135\062\136\055\137\052\140\050\141" +
    "\060\142\056\143\057\144\063\145\051\146\053\147\054" +
    "\151\uff6e\153\uff6e\155\uff6e\001\002\000\020\152\027\175" +
    "\031\176\012\177\011\200\022\201\035\202\020\001\002" +
    "\000\020\152\027\175\031\176\012\177\011\200\022\201" +
    "\035\202\020\001\002\000\020\152\027\175\031\176\012" +
    "\177\011\200\022\201\035\202\020\001\002\000\020\152" +
    "\027\175\031\176\012\177\011\200\022\201\035\202\020" +
    "\001\002\000\020\152\027\175\031\176\012\177\011\200" +
    "\022\201\035\202\020\001\002\000\020\152\027\175\031" +
    "\176\012\177\011\200\022\201\035\202\020\001\002\000" +
    "\020\152\027\175\031\176\012\177\011\200\022\201\035" +
    "\202\020\001\002\000\020\152\027\175\031\176\012\177" +
    "\011\200\022\201\035\202\020\001\002\000\020\152\027" +
    "\175\031\176\012\177\011\200\022\201\035\202\020\001" +
    "\002\000\010\151\uff85\153\uff85\155\uff85\001\002\000\022" +
    "\133\013\152\027\175\031\176\012\177\011\200\022\201" +
    "\035\202\020\001\002\000\020\152\027\175\031\176\012" +
    "\177\011\200\022\201\035\202\020\001\002\000\036\135" +
    "\066\136\055\137\052\140\050\141\060\142\056\143\057" +
    "\144\063\145\051\146\053\147\054\151\uff6e\153\uff6e\155" +
    "\uff6e\001\002\000\010\151\uff73\153\uff73\155\uff73\001\002" +
    "\000\020\152\027\175\031\176\012\177\011\200\022\201" +
    "\035\202\020\001\002\000\076\013\ufff4\015\ufff4\017\ufff4" +
    "\021\ufff4\023\ufff4\025\ufff4\027\ufff4\033\ufff4\035\ufff4\043" +
    "\ufff4\044\ufff4\135\ufff4\136\ufff4\137\052\140\050\141\060" +
    "\142\ufff4\143\ufff4\144\ufff4\145\ufff4\146\ufff4\147\ufff4\150" +
    "\ufff4\151\ufff4\153\ufff4\154\ufff4\155\ufff4\161\ufff4\162\ufff4" +
    "\163\ufff4\001\002\000\010\151\uff86\153\uff86\155\uff86\001" +
    "\002\000\076\013\ufff0\015\ufff0\017\ufff0\021\ufff0\023\ufff0" +
    "\025\ufff0\027\ufff0\033\ufff0\035\ufff0\043\ufff0\044\ufff0\135" +
    "\ufff0\136\ufff0\137\ufff0\140\ufff0\141\ufff0\142\ufff0\143\ufff0" +
    "\144\ufff0\145\ufff0\146\ufff0\147\ufff0\150\ufff0\151\ufff0\153" +
    "\ufff0\154\ufff0\155\ufff0\161\ufff0\162\ufff0\163\ufff0\001\002" +
    "\000\036\135\066\136\055\137\052\140\050\141\060\142" +
    "\056\143\057\144\063\145\051\146\053\147\054\151\uff6e" +
    "\153\uff6e\155\uff6e\001\002\000\010\151\uff72\153\uff72\155" +
    "\uff72\001\002\000\036\135\066\136\055\137\052\140\050" +
    "\141\060\142\056\143\057\144\063\145\051\146\053\147" +
    "\054\151\uff6e\153\uff6e\155\uff6e\001\002\000\010\151\uff74" +
    "\153\uff74\155\uff74\001\002\000\076\013\ufff3\015\ufff3\017" +
    "\ufff3\021\ufff3\023\ufff3\025\ufff3\027\ufff3\033\ufff3\035\ufff3" +
    "\043\ufff3\044\ufff3\135\ufff3\136\ufff3\137\052\140\050\141" +
    "\060\142\ufff3\143\ufff3\144\ufff3\145\ufff3\146\ufff3\147\ufff3" +
    "\150\ufff3\151\ufff3\153\ufff3\154\ufff3\155\ufff3\161\ufff3\162" +
    "\ufff3\163\ufff3\001\002\000\036\135\066\136\055\137\052" +
    "\140\050\141\060\142\056\143\057\144\063\145\051\146" +
    "\053\147\054\151\uff6e\153\uff6e\155\uff6e\001\002\000\010" +
    "\151\uff6f\153\uff6f\155\uff6f\001\002\000\036\135\066\136" +
    "\055\137\052\140\050\141\060\142\056\143\057\144\063" +
    "\145\051\146\053\147\054\151\uff6e\153\uff6e\155\uff6e\001" +
    "\002\000\010\151\uff70\153\uff70\155\uff70\001\002\000\076" +
    "\013\ufff2\015\ufff2\017\ufff2\021\ufff2\023\ufff2\025\ufff2\027" +
    "\ufff2\033\ufff2\035\ufff2\043\ufff2\044\ufff2\135\ufff2\136\ufff2" +
    "\137\ufff2\140\ufff2\141\ufff2\142\ufff2\143\ufff2\144\ufff2\145" +
    "\ufff2\146\ufff2\147\ufff2\150\ufff2\151\ufff2\153\ufff2\154\ufff2" +
    "\155\ufff2\161\ufff2\162\ufff2\163\ufff2\001\002\000\036\135" +
    "\066\136\055\137\052\140\050\141\060\142\056\143\057" +
    "\144\063\145\051\146\053\147\054\151\uff6e\153\uff6e\155" +
    "\uff6e\001\002\000\010\151\uff71\153\uff71\155\uff71\001\002" +
    "\000\076\013\ufff1\015\ufff1\017\ufff1\021\ufff1\023\ufff1\025" +
    "\ufff1\027\ufff1\033\ufff1\035\ufff1\043\ufff1\044\ufff1\135\ufff1" +
    "\136\ufff1\137\ufff1\140\ufff1\141\ufff1\142\ufff1\143\ufff1\144" +
    "\ufff1\145\ufff1\146\ufff1\147\ufff1\150\ufff1\151\ufff1\153\ufff1" +
    "\154\ufff1\155\ufff1\161\ufff1\162\ufff1\163\ufff1\001\002\000" +
    "\004\151\110\001\002\000\040\125\uff94\126\uff94\127\uff94" +
    "\130\uff94\131\uff94\132\uff94\133\uff94\152\uff94\164\uff94\175" +
    "\uff94\176\uff94\177\uff94\200\uff94\201\uff94\202\uff94\001\002" +
    "\000\010\151\uff6d\153\uff6d\155\uff6d\001\002\000\020\152" +
    "\027\175\031\176\012\177\011\200\022\201\035\202\020" +
    "\001\002\000\032\135\066\136\055\137\052\140\050\141" +
    "\060\142\056\143\057\144\063\145\051\146\053\147\054" +
    "\153\uff6e\001\002\000\004\153\115\001\002\000\016\151" +
    "\uff6a\153\uff6a\155\uff6a\165\043\166\042\167\040\001\002" +
    "\000\010\151\uff69\153\uff69\155\uff69\001\002\000\010\151" +
    "\uff6c\153\uff6c\155\uff6c\001\002\000\054\135\131\136\125" +
    "\137\122\140\121\141\127\142\uffe6\143\uffe6\144\uffe6\145" +
    "\uffe6\146\uffe6\147\uffe6\152\027\153\123\157\126\160\124" +
    "\175\031\176\012\177\011\200\022\201\035\202\020\001" +
    "\002\000\020\152\027\175\031\176\012\177\011\200\022" +
    "\201\035\202\020\001\002\000\020\152\027\175\031\176" +
    "\012\177\011\200\022\201\035\202\020\001\002\000\076" +
    "\013\uffef\015\uffef\017\uffef\021\uffef\023\uffef\025\uffef\027" +
    "\uffef\033\uffef\035\uffef\043\uffef\044\uffef\135\uffef\136\uffef" +
    "\137\uffef\140\uffef\141\uffef\142\uffef\143\uffef\144\uffef\145" +
    "\uffef\146\uffef\147\uffef\150\uffef\151\uffef\153\uffef\154\uffef" +
    "\155\uffef\161\uffef\162\uffef\163\uffef\001\002\000\076\013" +
    "\uffe8\015\uffe8\017\uffe8\021\uffe8\023\uffe8\025\uffe8\027\uffe8" +
    "\033\uffe8\035\uffe8\043\uffe8\044\uffe8\135\uffe8\136\uffe8\137" +
    "\uffe8\140\uffe8\141\uffe8\142\uffe8\143\uffe8\144\uffe8\145\uffe8" +
    "\146\uffe8\147\uffe8\150\uffe8\151\uffe8\153\uffe8\154\uffe8\155" +
    "\uffe8\161\uffe8\162\uffe8\163\uffe8\001\002\000\020\152\027" +
    "\175\031\176\012\177\011\200\022\201\035\202\020\001" +
    "\002\000\076\013\uffe9\015\uffe9\017\uffe9\021\uffe9\023\uffe9" +
    "\025\uffe9\027\uffe9\033\uffe9\035\uffe9\043\uffe9\044\uffe9\135" +
    "\uffe9\136\uffe9\137\uffe9\140\uffe9\141\uffe9\142\uffe9\143\uffe9" +
    "\144\uffe9\145\uffe9\146\uffe9\147\uffe9\150\uffe9\151\uffe9\153" +
    "\uffe9\154\uffe9\155\uffe9\161\uffe9\162\uffe9\163\uffe9\001\002" +
    "\000\020\152\027\175\031\176\012\177\011\200\022\201" +
    "\035\202\020\001\002\000\076\013\uffe7\015\uffe7\017\uffe7" +
    "\021\uffe7\023\uffe7\025\uffe7\027\uffe7\033\uffe7\035\uffe7\043" +
    "\uffe7\044\uffe7\135\066\136\055\137\052\140\050\141\060" +
    "\142\uffe7\143\uffe7\144\uffe7\145\uffe7\146\uffe7\147\uffe7\150" +
    "\uffe7\151\uffe7\153\uffe7\154\uffe7\155\uffe7\161\uffe7\162\uffe7" +
    "\163\uffe7\001\002\000\020\152\027\175\031\176\012\177" +
    "\011\200\022\201\035\202\020\001\002\000\016\135\066" +
    "\136\055\137\052\140\050\141\060\153\133\001\002\000" +
    "\076\013\uffee\015\uffee\017\uffee\021\uffee\023\uffee\025\uffee" +
    "\027\uffee\033\uffee\035\uffee\043\uffee\044\uffee\135\uffee\136" +
    "\uffee\137\uffee\140\uffee\141\uffee\142\uffee\143\uffee\144\uffee" +
    "\145\uffee\146\uffee\147\uffee\150\uffee\151\uffee\153\uffee\154" +
    "\uffee\155\uffee\161\uffee\162\uffee\163\uffee\001\002\000\016" +
    "\135\066\136\055\137\052\140\050\141\060\153\135\001" +
    "\002\000\076\013\uffea\015\uffea\017\uffea\021\uffea\023\uffea" +
    "\025\uffea\027\uffea\033\uffea\035\uffea\043\uffea\044\uffea\135" +
    "\uffea\136\uffea\137\uffea\140\uffea\141\uffea\142\uffea\143\uffea" +
    "\144\uffea\145\uffea\146\uffea\147\uffea\150\uffea\151\uffea\153" +
    "\uffea\154\uffea\155\uffea\161\uffea\162\uffea\163\uffea\001\002" +
    "\000\016\135\066\136\055\137\052\140\050\141\060\153" +
    "\137\001\002\000\076\013\uffed\015\uffed\017\uffed\021\uffed" +
    "\023\uffed\025\uffed\027\uffed\033\uffed\035\uffed\043\uffed\044" +
    "\uffed\135\uffed\136\uffed\137\uffed\140\uffed\141\uffed\142\uffed" +
    "\143\uffed\144\uffed\145\uffed\146\uffed\147\uffed\150\uffed\151" +
    "\uffed\153\uffed\154\uffed\155\uffed\161\uffed\162\uffed\163\uffed" +
    "\001\002\000\016\135\066\136\055\137\052\140\050\141" +
    "\060\153\141\001\002\000\076\013\uffec\015\uffec\017\uffec" +
    "\021\uffec\023\uffec\025\uffec\027\uffec\033\uffec\035\uffec\043" +
    "\uffec\044\uffec\135\uffec\136\uffec\137\uffec\140\uffec\141\uffec" +
    "\142\uffec\143\uffec\144\uffec\145\uffec\146\uffec\147\uffec\150" +
    "\uffec\151\uffec\153\uffec\154\uffec\155\uffec\161\uffec\162\uffec" +
    "\163\uffec\001\002\000\016\135\066\136\055\137\052\140" +
    "\050\141\060\153\143\001\002\000\076\013\uffeb\015\uffeb" +
    "\017\uffeb\021\uffeb\023\uffeb\025\uffeb\027\uffeb\033\uffeb\035" +
    "\uffeb\043\uffeb\044\uffeb\135\uffeb\136\uffeb\137\uffeb\140\uffeb" +
    "\141\uffeb\142\uffeb\143\uffeb\144\uffeb\145\uffeb\146\uffeb\147" +
    "\uffeb\150\uffeb\151\uffeb\153\uffeb\154\uffeb\155\uffeb\161\uffeb" +
    "\162\uffeb\163\uffeb\001\002\000\010\151\uff6b\153\uff6b\155" +
    "\uff6b\001\002\000\016\135\131\136\125\137\122\140\121" +
    "\141\127\153\123\001\002\000\004\164\uff98\001\002\000" +
    "\026\135\066\136\055\137\052\140\050\141\060\150\155" +
    "\154\151\161\150\162\153\163\152\001\002\000\034\133" +
    "\uff78\151\uff78\152\uff78\155\uff78\165\uff78\166\uff78\167\uff78" +
    "\175\uff78\176\uff78\177\uff78\200\uff78\201\uff78\202\uff78\001" +
    "\002\000\012\150\155\161\150\162\153\163\152\001\002" +
    "\000\034\133\uff76\151\uff76\152\uff76\155\uff76\165\uff76\166" +
    "\uff76\167\uff76\175\uff76\176\uff76\177\uff76\200\uff76\201\uff76" +
    "\202\uff76\001\002\000\034\133\uff77\151\uff77\152\uff77\155" +
    "\uff77\165\uff77\166\uff77\167\uff77\175\uff77\176\uff77\177\uff77" +
    "\200\uff77\201\uff77\202\uff77\001\002\000\032\133\013\151" +
    "\uff6a\152\041\165\043\166\042\167\040\175\031\176\012" +
    "\177\011\200\022\201\035\202\020\001\002\000\034\133" +
    "\uff75\151\uff75\152\uff75\155\uff75\165\uff75\166\uff75\167\uff75" +
    "\175\uff75\176\uff75\177\uff75\200\uff75\201\uff75\202\uff75\001" +
    "\002\000\004\151\157\001\002\000\040\125\uff81\126\uff81" +
    "\127\uff81\130\uff81\131\uff81\132\uff81\133\uff81\152\uff81\164" +
    "\uff81\175\uff81\176\uff81\177\uff81\200\uff81\201\uff81\202\uff81" +
    "\001\002\000\032\133\013\152\041\155\uff6a\165\043\166" +
    "\042\167\040\175\031\176\012\177\011\200\022\201\035" +
    "\202\020\001\002\000\004\155\162\001\002\000\004\151" +
    "\163\001\002\000\040\125\uff7f\126\uff7f\127\uff7f\130\uff7f" +
    "\131\uff7f\132\uff7f\133\uff7f\152\uff7f\164\uff7f\175\uff7f\176" +
    "\uff7f\177\uff7f\200\uff7f\201\uff7f\202\uff7f\001\002\000\012" +
    "\150\155\161\150\162\153\163\152\001\002\000\032\133" +
    "\013\151\uff6a\152\041\165\043\166\042\167\040\175\031" +
    "\176\012\177\011\200\022\201\035\202\020\001\002\000" +
    "\004\151\167\001\002\000\040\125\uff80\126\uff80\127\uff80" +
    "\130\uff80\131\uff80\132\uff80\133\uff80\152\uff80\164\uff80\175" +
    "\uff80\176\uff80\177\uff80\200\uff80\201\uff80\202\uff80\001\002" +
    "\000\032\133\013\152\041\155\uff6a\165\043\166\042\167" +
    "\040\175\031\176\012\177\011\200\022\201\035\202\020" +
    "\001\002\000\004\155\172\001\002\000\004\151\173\001" +
    "\002\000\040\125\uff7e\126\uff7e\127\uff7e\130\uff7e\131\uff7e" +
    "\132\uff7e\133\uff7e\152\uff7e\164\uff7e\175\uff7e\176\uff7e\177" +
    "\uff7e\200\uff7e\201\uff7e\202\uff7e\001\002\000\004\164\uff96" +
    "\001\002\000\004\002\uff9a\001\002\000\004\164\uff97\001" +
    "\002\000\012\134\200\170\202\171\201\172\203\001\002" +
    "\000\046\125\uff93\126\uff93\127\uff93\130\uff93\131\uff93\132" +
    "\uff93\133\uff93\151\uff93\152\uff93\153\uff93\155\uff93\164\uff93" +
    "\175\uff93\176\uff93\177\uff93\200\uff93\201\uff93\202\uff93\001" +
    "\002\000\052\125\uff8d\126\uff8d\127\uff8d\130\uff8d\131\uff8d" +
    "\132\uff8d\133\uff8d\151\uff8d\152\uff8d\153\uff8d\154\225\155" +
    "\uff8d\156\224\164\uff8d\175\uff8d\176\uff8d\177\uff8d\200\uff8d" +
    "\201\uff8d\202\uff8d\001\002\000\052\125\uff91\126\uff91\127" +
    "\uff91\130\uff91\131\uff91\132\uff91\133\uff91\151\uff91\152\uff91" +
    "\153\uff91\154\215\155\uff91\156\214\164\uff91\175\uff91\176" +
    "\uff91\177\uff91\200\uff91\201\uff91\202\uff91\001\002\000\052" +
    "\125\uff89\126\uff89\127\uff89\130\uff89\131\uff89\132\uff89\133" +
    "\uff89\151\uff89\152\uff89\153\uff89\154\205\155\uff89\156\204" +
    "\164\uff89\175\uff89\176\uff89\177\uff89\200\uff89\201\uff89\202" +
    "\uff89\001\002\000\006\173\212\174\213\001\002\000\004" +
    "\175\206\001\002\000\004\155\207\001\002\000\004\156" +
    "\210\001\002\000\004\173\211\001\002\000\046\125\uff8a" +
    "\126\uff8a\127\uff8a\130\uff8a\131\uff8a\132\uff8a\133\uff8a\151" +
    "\uff8a\152\uff8a\153\uff8a\155\uff8a\164\uff8a\175\uff8a\176\uff8a" +
    "\177\uff8a\200\uff8a\201\uff8a\202\uff8a\001\002\000\046\125" +
    "\uff88\126\uff88\127\uff88\130\uff88\131\uff88\132\uff88\133\uff88" +
    "\151\uff88\152\uff88\153\uff88\155\uff88\164\uff88\175\uff88\176" +
    "\uff88\177\uff88\200\uff88\201\uff88\202\uff88\001\002\000\046" +
    "\125\uff87\126\uff87\127\uff87\130\uff87\131\uff87\132\uff87\133" +
    "\uff87\151\uff87\152\uff87\153\uff87\155\uff87\164\uff87\175\uff87" +
    "\176\uff87\177\uff87\200\uff87\201\uff87\202\uff87\001\002\000" +
    "\006\173\222\174\223\001\002\000\004\175\216\001\002" +
    "\000\004\155\217\001\002\000\004\156\220\001\002\000" +
    "\004\173\221\001\002\000\046\125\uff92\126\uff92\127\uff92" +
    "\130\uff92\131\uff92\132\uff92\133\uff92\151\uff92\152\uff92\153" +
    "\uff92\155\uff92\164\uff92\175\uff92\176\uff92\177\uff92\200\uff92" +
    "\201\uff92\202\uff92\001\002\000\046\125\uff90\126\uff90\127" +
    "\uff90\130\uff90\131\uff90\132\uff90\133\uff90\151\uff90\152\uff90" +
    "\153\uff90\155\uff90\164\uff90\175\uff90\176\uff90\177\uff90\200" +
    "\uff90\201\uff90\202\uff90\001\002\000\046\125\uff8f\126\uff8f" +
    "\127\uff8f\130\uff8f\131\uff8f\132\uff8f\133\uff8f\151\uff8f\152" +
    "\uff8f\153\uff8f\155\uff8f\164\uff8f\175\uff8f\176\uff8f\177\uff8f" +
    "\200\uff8f\201\uff8f\202\uff8f\001\002\000\006\173\232\174" +
    "\233\001\002\000\004\175\226\001\002\000\004\155\227" +
    "\001\002\000\004\156\230\001\002\000\004\173\231\001" +
    "\002\000\046\125\uff8e\126\uff8e\127\uff8e\130\uff8e\131\uff8e" +
    "\132\uff8e\133\uff8e\151\uff8e\152\uff8e\153\uff8e\155\uff8e\164" +
    "\uff8e\175\uff8e\176\uff8e\177\uff8e\200\uff8e\201\uff8e\202\uff8e" +
    "\001\002\000\046\125\uff8c\126\uff8c\127\uff8c\130\uff8c\131" +
    "\uff8c\132\uff8c\133\uff8c\151\uff8c\152\uff8c\153\uff8c\155\uff8c" +
    "\164\uff8c\175\uff8c\176\uff8c\177\uff8c\200\uff8c\201\uff8c\202" +
    "\uff8c\001\002\000\046\125\uff8b\126\uff8b\127\uff8b\130\uff8b" +
    "\131\uff8b\132\uff8b\133\uff8b\151\uff8b\152\uff8b\153\uff8b\155" +
    "\uff8b\164\uff8b\175\uff8b\176\uff8b\177\uff8b\200\uff8b\201\uff8b" +
    "\202\uff8b\001\002\000\004\026\u013c\001\002\000\004\005" +
    "\u013b\001\002\000\036\006\ufff5\010\ufff5\011\ufff5\012\251" +
    "\014\244\016\237\020\250\022\243\024\255\030\240\040" +
    "\252\042\242\044\254\045\253\001\002\000\014\046\257" +
    "\047\261\050\262\051\256\144\uffc6\001\002\000\014\046" +
    "\257\047\261\050\262\051\256\144\uffc6\001\002\000\040" +
    "\006\ufff5\010\ufff5\011\ufff5\012\251\014\244\016\237\020" +
    "\250\022\243\024\255\030\240\040\252\041\ufff5\042\242" +
    "\044\254\045\253\001\002\000\014\046\257\047\261\050" +
    "\262\051\256\144\uffc6\001\002\000\014\046\257\047\261" +
    "\050\262\051\256\144\uffc6\001\002\000\014\046\257\047" +
    "\261\050\262\051\256\144\uffc6\001\002\000\010\006\234" +
    "\010\236\011\ufffc\001\002\000\040\006\ufff5\010\ufff5\011" +
    "\ufff5\012\251\014\244\016\237\020\250\022\243\024\255" +
    "\030\240\040\252\041\ufff5\042\242\044\254\045\253\001" +
    "\002\000\040\006\ufff5\010\ufff5\011\ufff5\012\251\014\244" +
    "\016\237\020\250\022\243\024\255\030\240\040\252\041" +
    "\ufff5\042\242\044\254\045\253\001\002\000\014\046\257" +
    "\047\261\050\262\051\256\144\uffc6\001\002\000\014\046" +
    "\257\047\261\050\262\051\256\144\uffc6\001\002\000\014" +
    "\046\257\047\261\050\262\051\256\144\uffc6\001\002\000" +
    "\040\006\ufff5\010\ufff5\011\ufff5\012\251\014\244\016\237" +
    "\020\250\022\243\024\255\030\240\040\252\041\ufff5\042" +
    "\242\044\254\045\253\001\002\000\040\006\ufff5\010\ufff5" +
    "\011\ufff5\012\251\014\244\016\237\020\250\022\243\024" +
    "\255\030\240\040\252\041\ufff5\042\242\044\254\045\253" +
    "\001\002\000\014\046\257\047\261\050\262\051\256\144" +
    "\uffc6\001\002\000\004\150\325\001\002\000\004\150\316" +
    "\001\002\000\004\144\313\001\002\000\004\150\275\001" +
    "\002\000\004\150\263\001\002\000\006\177\264\203\265" +
    "\001\002\000\014\046\257\047\261\050\262\051\256\144" +
    "\uffc6\001\002\000\010\061\270\062\267\063\271\001\002" +
    "\000\004\203\272\001\002\000\004\203\uffbd\001\002\000" +
    "\004\203\uffbe\001\002\000\004\203\uffbc\001\002\000\014" +
    "\046\257\047\261\050\262\051\256\144\uffc6\001\002\000" +
    "\004\144\uffc8\001\002\000\004\144\uffcc\001\002\000\006" +
    "\177\276\203\277\001\002\000\014\046\257\047\261\050" +
    "\262\051\256\144\uffc6\001\002\000\020\052\306\053\307" +
    "\054\305\055\302\056\300\057\304\060\303\001\002\000" +
    "\004\203\uffc1\001\002\000\004\203\310\001\002\000\004" +
    "\203\uffc2\001\002\000\004\203\uffbf\001\002\000\004\203" +
    "\uffc0\001\002\000\004\203\uffc3\001\002\000\004\203\uffc5" +
    "\001\002\000\004\203\uffc4\001\002\000\014\046\257\047" +
    "\261\050\262\051\256\144\uffc6\001\002\000\004\144\uffc9" +
    "\001\002\000\004\144\uffcd\001\002\000\020\152\027\175" +
    "\031\176\012\177\011\200\022\201\035\202\020\001\002" +
    "\000\016\025\315\135\066\136\055\137\052\140\050\141" +
    "\060\001\002\000\040\006\uffda\010\uffda\011\uffda\012\uffda" +
    "\014\uffda\016\uffda\020\uffda\022\uffda\024\uffda\030\uffda\040" +
    "\uffda\041\uffda\042\uffda\044\uffda\045\uffda\001\002\000\006" +
    "\177\317\203\320\001\002\000\014\046\257\047\261\050" +
    "\262\051\256\144\uffc6\001\002\000\020\052\306\053\307" +
    "\054\305\055\302\056\300\057\304\060\303\001\002\000" +
    "\004\203\322\001\002\000\014\046\257\047\261\050\262" +
    "\051\256\144\uffc6\001\002\000\004\144\uffca\001\002\000" +
    "\004\144\uffce\001\002\000\006\177\326\203\327\001\002" +
    "\000\014\046\257\047\261\050\262\051\256\144\uffc6\001" +
    "\002\000\104\064\341\065\356\066\357\067\351\070\336" +
    "\071\335\072\332\073\364\074\365\075\346\076\345\077" +
    "\361\100\334\101\353\102\355\103\360\104\347\105\371" +
    "\106\354\107\331\110\333\111\370\112\342\113\330\114" +
    "\363\115\367\116\350\117\343\120\352\121\362\122\337" +
    "\123\344\124\340\001\002\000\004\203\uffa4\001\002\000" +
    "\004\203\uffa8\001\002\000\004\203\uffb5\001\002\000\004" +
    "\203\uffa7\001\002\000\004\203\uffaf\001\002\000\004\203" +
    "\uffb6\001\002\000\004\203\uffb7\001\002\000\004\203\uff9d" +
    "\001\002\000\004\203\uff9b\001\002\000\004\203\uffbb\001" +
    "\002\000\004\203\uffa5\001\002\000\004\203\uffa0\001\002" +
    "\000\004\203\uff9c\001\002\000\004\203\uffb1\001\002\000" +
    "\004\203\uffb2\001\002\000\004\203\uffab\001\002\000\004" +
    "\203\uffa1\001\002\000\004\203\uffb8\001\002\000\004\203" +
    "\uff9f\001\002\000\004\203\uffae\001\002\000\004\203\uffa9" +
    "\001\002\000\004\203\uffad\001\002\000\004\203\uffba\001" +
    "\002\000\004\203\uffb9\001\002\000\004\203\uffac\001\002" +
    "\000\004\203\uffb0\001\002\000\004\203\uff9e\001\002\000" +
    "\004\203\uffa3\001\002\000\004\203\uffb4\001\002\000\004" +
    "\203\uffb3\001\002\000\004\203\372\001\002\000\004\203" +
    "\uffa2\001\002\000\004\203\uffa6\001\002\000\004\203\uffaa" +
    "\001\002\000\014\046\257\047\261\050\262\051\256\144" +
    "\uffc6\001\002\000\004\144\uffc7\001\002\000\004\144\uffcb" +
    "\001\002\000\012\006\ufff9\010\ufff9\011\ufff9\041\ufff9\001" +
    "\002\000\012\006\ufff8\010\ufff8\011\ufff8\041\ufff8\001\002" +
    "\000\004\144\u0100\001\002\000\032\012\251\014\244\016" +
    "\237\020\250\022\243\024\255\030\240\040\252\041\ufff5" +
    "\042\242\044\254\045\253\001\002\000\004\041\u0103\001" +
    "\002\000\004\041\uffcf\001\002\000\040\006\uffd0\010\uffd0" +
    "\011\uffd0\012\uffd0\014\uffd0\016\uffd0\020\uffd0\022\uffd0\024" +
    "\uffd0\030\uffd0\040\uffd0\041\uffd0\042\uffd0\044\uffd0\045\uffd0" +
    "\001\002\000\004\144\u0105\001\002\000\020\152\027\175" +
    "\031\176\012\177\011\200\022\201\035\202\020\001\002" +
    "\000\016\013\u0107\135\066\136\055\137\052\140\050\141" +
    "\060\001\002\000\040\006\uffdf\010\uffdf\011\uffdf\012\uffdf" +
    "\014\uffdf\016\uffdf\020\uffdf\022\uffdf\024\uffdf\030\uffdf\040" +
    "\uffdf\041\uffdf\042\uffdf\044\uffdf\045\uffdf\001\002\000\004" +
    "\144\u0109\001\002\000\020\152\027\175\031\176\012\177" +
    "\011\200\022\201\035\202\020\001\002\000\016\021\u010b" +
    "\135\066\136\055\137\052\140\050\141\060\001\002\000" +
    "\040\006\uffdc\010\uffdc\011\uffdc\012\uffdc\014\uffdc\016\uffdc" +
    "\020\uffdc\022\uffdc\024\uffdc\030\uffdc\040\uffdc\041\uffdc\042" +
    "\uffdc\044\uffdc\045\uffdc\001\002\000\012\006\ufff6\010\ufff6" +
    "\011\ufff6\041\ufff6\001\002\000\012\006\ufff7\010\ufff7\011" +
    "\ufff7\041\ufff7\001\002\000\004\011\u010f\001\002\000\012" +
    "\005\ufffc\006\234\010\236\011\ufffc\001\002\000\006\005" +
    "\ufffd\011\ufffd\001\002\000\004\144\u0112\001\002\000\020" +
    "\152\027\175\031\176\012\177\011\200\022\201\035\202" +
    "\020\001\002\000\016\015\u0114\135\066\136\055\137\052" +
    "\140\050\141\060\001\002\000\040\006\uffde\010\uffde\011" +
    "\uffde\012\uffde\014\uffde\016\uffde\020\uffde\022\uffde\024\uffde" +
    "\030\uffde\040\uffde\041\uffde\042\uffde\044\uffde\045\uffde\001" +
    "\002\000\004\144\u0116\001\002\000\020\152\027\175\031" +
    "\176\012\177\011\200\022\201\035\202\020\001\002\000" +
    "\016\023\u0118\135\066\136\055\137\052\140\050\141\060" +
    "\001\002\000\040\006\uffdb\010\uffdb\011\uffdb\012\uffdb\014" +
    "\uffdb\016\uffdb\020\uffdb\022\uffdb\024\uffdb\030\uffdb\040\uffdb" +
    "\041\uffdb\042\uffdb\044\uffdb\045\uffdb\001\002\000\004\144" +
    "\u011a\001\002\000\022\043\uffd1\152\027\175\031\176\012" +
    "\177\011\200\022\201\035\202\020\001\002\000\004\043" +
    "\u011f\001\002\000\020\043\uffd2\044\u011d\135\066\136\055" +
    "\137\052\140\050\141\060\001\002\000\022\043\uffd1\152" +
    "\027\175\031\176\012\177\011\200\022\201\035\202\020" +
    "\001\002\000\004\043\uffd3\001\002\000\040\006\uffd4\010" +
    "\uffd4\011\uffd4\012\uffd4\014\uffd4\016\uffd4\020\uffd4\022\uffd4" +
    "\024\uffd4\030\uffd4\040\uffd4\041\uffd4\042\uffd4\044\uffd4\045" +
    "\uffd4\001\002\000\012\006\ufffb\010\ufffb\011\ufffb\041\ufffb" +
    "\001\002\000\004\144\u0122\001\002\000\006\031\uffd8\036" +
    "\u0123\001\002\000\014\046\257\047\261\050\262\051\256" +
    "\144\uffc6\001\002\000\004\031\u0125\001\002\000\040\006" +
    "\ufff5\010\ufff5\011\ufff5\012\251\014\244\016\237\020\250" +
    "\022\243\024\255\030\240\040\252\041\ufff5\042\242\044" +
    "\254\045\253\001\002\000\012\006\ufffa\010\ufffa\011\ufffa" +
    "\041\ufffa\001\002\000\004\144\u0128\001\002\000\010\032" +
    "\u012b\034\u0129\037\uffd5\001\002\000\014\046\257\047\261" +
    "\050\262\051\256\144\uffc6\001\002\000\004\037\u0130\001" +
    "\002\000\004\144\u012c\001\002\000\020\152\027\175\031" +
    "\176\012\177\011\200\022\201\035\202\020\001\002\000" +
    "\016\033\u012e\135\066\136\055\137\052\140\050\141\060" +
    "\001\002\000\010\032\u012b\034\u0129\037\uffd5\001\002\000" +
    "\004\037\uffd6\001\002\000\006\031\uffd8\036\u0123\001\002" +
    "\000\004\031\uffd9\001\002\000\004\144\u0133\001\002\000" +
    "\020\152\027\175\031\176\012\177\011\200\022\201\035" +
    "\202\020\001\002\000\016\035\u0135\135\066\136\055\137" +
    "\052\140\050\141\060\001\002\000\010\032\u012b\034\u0129" +
    "\037\uffd5\001\002\000\004\037\uffd7\001\002\000\004\144" +
    "\u0138\001\002\000\020\152\027\175\031\176\012\177\011" +
    "\200\022\201\035\202\020\001\002\000\016\017\u013a\135" +
    "\066\136\055\137\052\140\050\141\060\001\002\000\040" +
    "\006\uffdd\010\uffdd\011\uffdd\012\uffdd\014\uffdd\016\uffdd\020" +
    "\uffdd\022\uffdd\024\uffdd\030\uffdd\040\uffdd\041\uffdd\042\uffdd" +
    "\044\uffdd\045\uffdd\001\002\000\004\002\000\001\002\000" +
    "\020\152\027\175\031\176\012\177\011\200\022\201\035" +
    "\202\020\001\002\000\016\027\u013e\135\066\136\055\137" +
    "\052\140\050\141\060\001\002\000\004\007\u013f\001\002" +
    "\000\012\005\ufffc\006\234\010\236\011\ufffc\001\002\000" +
    "\006\005\ufffe\011\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u013e\000\006\002\006\023\004\001\001\000\004\003" +
    "\234\001\001\000\002\001\001\000\020\005\016\006\032" +
    "\024\014\025\023\026\013\027\015\031\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\005\016\006\032\024" +
    "\175\025\023\026\013\027\015\031\020\001\001\000\002" +
    "\001\001\000\020\005\016\006\032\024\173\025\023\026" +
    "\013\027\015\031\020\001\001\000\004\034\164\001\001" +
    "\000\002\001\001\000\006\005\146\006\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\005\016\006\032" +
    "\024\145\025\023\026\013\027\015\031\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\144\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\127\006\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\005\046\006\032\013\045\025\043\030" +
    "\044\033\036\001\001\000\002\001\001\000\004\013\143" +
    "\001\001\000\006\005\112\006\117\001\001\000\004\013" +
    "\116\001\001\000\004\013\110\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\060\001" +
    "\001\000\006\005\105\006\032\001\001\000\006\005\103" +
    "\006\032\001\001\000\006\005\102\006\032\001\001\000" +
    "\006\005\100\006\032\001\001\000\006\005\076\006\032" +
    "\001\001\000\006\005\075\006\032\001\001\000\006\005" +
    "\073\006\032\001\001\000\006\005\071\006\032\001\001" +
    "\000\006\005\070\006\032\001\001\000\002\001\001\000" +
    "\010\005\066\006\032\025\067\001\001\000\006\005\063" +
    "\006\032\001\001\000\004\032\064\001\001\000\002\001" +
    "\001\000\006\005\066\006\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\072\001" +
    "\001\000\002\001\001\000\004\032\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\077\001\001\000" +
    "\002\001\001\000\004\032\101\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\112\006\032\001\001\000" +
    "\004\032\113\001\001\000\002\001\001\000\004\033\115" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\127\006\032\001\001\000\006\005\141\006\032\001\001" +
    "\000\006\005\137\006\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\135\006\032\001\001\000\002" +
    "\001\001\000\006\005\133\006\032\001\001\000\002\001" +
    "\001\000\006\005\131\006\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\034\153" +
    "\001\001\000\002\001\001\000\004\034\157\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\005\046\006\032" +
    "\013\045\025\043\030\155\033\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\005\046" +
    "\006\032\013\045\025\043\030\160\033\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\034\167\001\001\000\016\005\046\006\032\013\045\025" +
    "\043\030\165\033\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\005\046\006\032\013\045\025\043\030" +
    "\170\033\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\004" +
    "\244\007\240\014\245\016\246\001\001\000\004\010\u0136" +
    "\001\001\000\004\010\u0120\001\001\000\012\004\u011f\007" +
    "\240\014\245\016\246\001\001\000\004\010\u0118\001\001" +
    "\000\004\010\u0114\001\001\000\004\010\u0110\001\001\000" +
    "\004\003\u010d\001\001\000\012\004\u010c\007\240\014\245" +
    "\016\246\001\001\000\012\004\u010b\007\240\014\245\016" +
    "\246\001\001\000\004\010\u0107\001\001\000\004\010\u0103" +
    "\001\001\000\004\010\376\001\001\000\012\004\375\007" +
    "\240\014\245\016\246\001\001\000\012\004\374\007\240" +
    "\014\245\016\246\001\001\000\004\010\257\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\273\001\001\000\004\021\265\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\272\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\311\001\001\000\004\020" +
    "\300\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\310" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\313\006\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\323\001\001\000\004\020" +
    "\320\001\001\000\002\001\001\000\004\010\322\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\373\001\001\000\004\022\365\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\372\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\004\u0101\007\240\014\245\016" +
    "\246\017\u0100\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\u0105\006" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\u0109\006\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\u010f\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\u0112\006\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\u0116\006\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\005\u011b\006\032\015" +
    "\u011a\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\u011b\006\032\015\u011d\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\u0123\001\001\000\004\010\u0126\001\001\000\002\001" +
    "\001\000\012\004\u0125\007\240\014\245\016\246\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\u0129\001" +
    "\001\000\004\010\u0131\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\u012c\006\032\001\001\000\002\001" +
    "\001\000\004\012\u012e\001\001\000\002\001\001\000\004" +
    "\011\u0130\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\u0133\006\032\001\001\000\002\001\001\000\004" +
    "\012\u0135\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\u0138\006\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\u013c\006\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\u013f" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public ArrayList al = new ArrayList();
    public ArrayList erroresS = new ArrayList();
    public ArrayList erroresS1 = new ArrayList();


    /**Metodo al que se llama automáticamente ante algún error sintactico.*/
    public void syntax_error(Symbol s){
        String lexema = s.value.toString();
        int fila = s.right+1;
        int columna = s.left+1;
        
        System.err.println("Error en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador '"
        +s.value + "' no reconocido." );


        erroresS.add("Error en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador '"
        +s.value + "' no reconocido.\n");
    }

    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de
    errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String lexema = s.value.toString();
        int fila = s.right+1;
        int columna = s.left+1;

        System.err.println("Error en la Línea " + (s.right+1)+ " Columna "+(s.left+1)+". Identificador '" +
        s.value + "' no reconocido.");
        
        erroresS1.add("Error en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador '"
        +s.value + "' no reconocido.\n");
    }

    /*public Nodo getRaiz(){
        return action_obj.raiz;
    }*/

    


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {


    //Nodo raiz=null;
    Sintactico sin = new Sintactico();
    ArrayList corchetes = new ArrayList();
    

  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // ARIT ::= parA EXP OPREL parC OPLOG 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARIT",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // OPLOG ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPLOG",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // OPLOG ::= not ARIT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPLOG",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // OPLOG ::= or ARIT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPLOG",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // OPLOG ::= and ARIT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPLOG",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // OPREL ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPREL",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // OPREL ::= noIgual EXP OPREL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPREL",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // OPREL ::= igualIgual EXP OPREL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPREL",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // OPREL ::= mayorIgual EXP OPREL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPREL",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // OPREL ::= menorIgual EXP OPREL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPREL",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // OPREL ::= mayorq EXP OPREL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPREL",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // OPREL ::= menorq EXP OPREL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPREL",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // OPASIG ::= igual 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPASIG",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // OPASIG ::= mulIgual 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPASIG",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // OPASIG ::= menosIgual 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPASIG",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // OPASIG ::= masIgual 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPASIG",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // TIPO ::= resChar 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // TIPO ::= resDouble 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // TIPO ::= resBoolean 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // TIPO ::= resString 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // TIPO ::= resInt 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // DECLARACION ::= EXP corA OPASIG CONTPRINT corC puntoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // DECLARACION ::= TIPO EXP corA OPASIG CONTPRINT corC puntoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // DECLARACION ::= EXP OPASIG CONTPRINT puntoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // DECLARACION ::= TIPO EXP OPASIG CONTPRINT puntoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // CONTPRINT ::= ARIT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTPRINT",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // CONTPRINT ::= OPLOG 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTPRINT",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // CONTPRINT ::= ACCESOVARIABLE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTPRINT",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // CONTPRINT ::= EXP OPREL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTPRINT",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // CONTPRINT ::= EXP mas ACCESOVARIABLE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTPRINT",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ACCESOVARIABLE ::= resResult punto resClases punto resCant 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESOVARIABLE",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ACCESOVARIABLE ::= resResult punto resClases punto resNom 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESOVARIABLE",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ACCESOVARIABLE ::= resResult punto resClases 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESOVARIABLE",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ACCESOVARIABLE ::= resResult punto resClases corA entero corC punto resNom 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESOVARIABLE",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ACCESOVARIABLE ::= resResult punto resMet punto resCant 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESOVARIABLE",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ACCESOVARIABLE ::= resResult punto resMet punto resNom 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESOVARIABLE",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ACCESOVARIABLE ::= resResult punto resMet 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESOVARIABLE",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ACCESOVARIABLE ::= resResult punto resMet corA entero corC punto resNom 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESOVARIABLE",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ACCESOVARIABLE ::= resResult punto resVar punto resCant 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESOVARIABLE",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ACCESOVARIABLE ::= resResult punto resVar punto resNom 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESOVARIABLE",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ACCESOVARIABLE ::= resResult punto resVar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESOVARIABLE",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ACCESOVARIABLE ::= resResult punto resVar corA entero corC punto resNom 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESOVARIABLE",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ACCESOVARIABLE ::= resResult punto resScore 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESOVARIABLE",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // FUNCPRINT ::= resPrint parA CONTPRINT parC puntoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCPRINT",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // CUERPOCPR ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOCPR",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CUERPOCPR ::= FUNCPRINT CUERPOCPR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOCPR",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CUERPOCPR ::= DECLARACION CUERPOCPR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOCPR",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CUERPOCPR ::= ACCESOVARIABLE CUERPOCPR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOCPR",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CPREPORT ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CPREPORT",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CPREPORT ::= dobleDolar CUERPOCPR dobleDolar 
            {
              Object RESULT =null;
		parser.al.add("Compilacion exitosa\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CPREPORT",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // FUENTE ::= ver 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // FUENTE ::= tcm 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // FUENTE ::= tnr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // FUENTE ::= tms 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // FUENTE ::= swss 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // FUENTE ::= scri 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // FUENTE ::= serif 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // FUENTE ::= sanss 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // FUENTE ::= roman 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // FUENTE ::= pala 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // FUENTE ::= os 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // FUENTE ::= monos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // FUENTE ::= modern 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // FUENTE ::= minion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // FUENTE ::= impact 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // FUENTE ::= helve 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // FUENTE ::= georg 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // FUENTE ::= garam 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // FUENTE ::= frank 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // FUENTE ::= fanta 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // FUENTE ::= deco 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // FUENTE ::= curs 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // FUENTE ::= cour 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // FUENTE ::= csm 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // FUENTE ::= calib 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // FUENTE ::= bv 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // FUENTE ::= bl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // FUENTE ::= bg 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // FUENTE ::= bf 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // FUENTE ::= arial 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // FUENTE ::= archi 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // FUENTE ::= antiq 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // FUENTE ::= afb 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ALINEACION ::= centrado 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ALINEACION",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ALINEACION ::= derecha 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ALINEACION",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ALINEACION ::= izquierda 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ALINEACION",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // COLOR ::= morado 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLOR",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // COLOR ::= anaranjado 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLOR",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // COLOR ::= gris 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLOR",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // COLOR ::= verde 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLOR",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // COLOR ::= azul 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLOR",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // COLOR ::= amarillo 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLOR",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // COLOR ::= rojo 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLOR",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ATRIBUTOS ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ATRIBUTOS ::= fon igual comia FUENTE comia ATRIBUTOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ATRIBUTOS ::= alig igual comia ALINEACION comia ATRIBUTOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ATRIBUTOS ::= txtcol igual comia COLOR comia ATRIBUTOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ATRIBUTOS ::= col igual comia COLOR comia ATRIBUTOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ATRIBUTOS ::= fon igual cadena ATRIBUTOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ATRIBUTOS ::= alig igual cadena ATRIBUTOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ATRIBUTOS ::= txtcol igual cadena ATRIBUTOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ATRIBUTOS ::= col igual cadena ATRIBUTOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CUERPODIV ::= CUERPOBODY 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPODIV",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EDIV ::= divA ATRIBUTOS mayorq CUERPODIV divC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EDIV",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CUERPOP ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CUERPOP ::= EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CUERPOP ::= EXP br CUERPOP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EP ::= pA ATRIBUTOS mayorq CUERPOP pC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EP",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ETDHA ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ETDHA",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ETDHA ::= thA mayorq EXP thC ETDHA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ETDHA",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ETDHA ::= tdA ATRIBUTOS mayorq EXP tdC ETDHA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ETDHA",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ETRA ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ETRA",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ETRA ::= trA ATRIBUTOS mayorq ETDHA trC ETRA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ETRA",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EHA ::= h6A ATRIBUTOS mayorq EXP h6C 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EHA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EHA ::= h5A ATRIBUTOS mayorq EXP h5C 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EHA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EHA ::= h4A ATRIBUTOS mayorq EXP h4C 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EHA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EHA ::= h3A ATRIBUTOS mayorq EXP h3C 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EHA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EHA ::= h2A ATRIBUTOS mayorq EXP h2C 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EHA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EHA ::= h1A ATRIBUTOS mayorq EXP h1C 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EHA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // VALOR ::= caracter 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VALOR ::= iden 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // VALOR ::= bool 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // VALOR ::= cadena 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // VALOR ::= decimal 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VALOR ::= entero 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXP ::= VALOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXP ::= VALOR EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXP ::= VALOR decre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXP ::= VALOR incre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXP ::= parA VALOR modulo EXP parC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXP ::= parA VALOR div EXP parC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXP ::= parA VALOR mul EXP parC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXP ::= parA VALOR menos EXP parC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXP ::= parA VALOR mas EXP parC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EXP ::= parA VALOR parC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EXP ::= EXP modulo EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EXP ::= EXP div EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EXP ::= EXP mul EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EXP ::= EXP menos EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EXP ::= EXP mas EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CUERPOBODY ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOBODY",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CUERPOBODY ::= EDIV CUERPOBODY 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOBODY",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CUERPOBODY ::= EP CUERPOBODY 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOBODY",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CUERPOBODY ::= hr CUERPOBODY 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOBODY",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CUERPOBODY ::= br CUERPOBODY 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOBODY",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CUERPOBODY ::= tableA ATRIBUTOS mayorq ETRA tableC CUERPOBODY 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOBODY",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CUERPOBODY ::= EHA CUERPOBODY 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOBODY",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CUERPOHTML ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOHTML",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CUERPOHTML ::= bodyA CUERPOBODY CUERPOHTML bodyC CUERPOHTML 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOHTML",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CUERPOHTML ::= headA titleA EXP titleC headC CUERPOHTML 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOHTML",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= CPREPORT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= htmlA CUERPOHTML htmlC 
            {
              Object RESULT =null;
		parser.al.add("Compilacion exitosa\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

