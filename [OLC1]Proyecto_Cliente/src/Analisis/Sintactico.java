
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Apr 01 19:34:56 CST 2018
//----------------------------------------------------

package Analisis;

import java.util.ArrayList;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Apr 01 19:34:56 CST 2018
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\243\000\002\002\004\000\002\002\005\000\002\002" +
    "\003\000\002\003\010\000\002\003\010\000\002\003\007" +
    "\000\002\003\004\000\002\003\002\000\002\004\004\000" +
    "\002\004\010\000\002\004\004\000\002\004\004\000\002" +
    "\004\004\000\002\004\004\000\002\004\004\000\002\004" +
    "\002\000\002\035\004\000\002\035\004\000\002\035\002" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\007\000\002\005\007\000\002\005\007\000\002\005" +
    "\007\000\002\005\007\000\002\005\004\000\002\005\004" +
    "\000\002\005\004\000\002\005\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\007\007\000\002\007" +
    "\007\000\002\007\007\000\002\007\007\000\002\007\007" +
    "\000\002\007\007\000\002\011\010\000\002\011\002\000" +
    "\002\012\010\000\002\012\007\000\002\012\002\000\002" +
    "\014\007\000\002\015\005\000\002\015\004\000\002\015" +
    "\005\000\002\015\004\000\002\015\002\000\002\016\007" +
    "\000\002\017\003\000\002\010\006\000\002\010\006\000" +
    "\002\010\006\000\002\010\006\000\002\010\010\000\002" +
    "\010\010\000\002\010\010\000\002\010\010\000\002\010" +
    "\002\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\023\006\000\002\024\004\000" +
    "\002\024\004\000\002\024\004\000\002\024\004\000\002" +
    "\024\002\000\002\027\007\000\002\025\005\000\002\025" +
    "\012\000\002\025\005\000\002\025\007\000\002\025\007" +
    "\000\002\025\012\000\002\025\005\000\002\025\007\000" +
    "\002\025\007\000\002\025\012\000\002\025\005\000\002" +
    "\025\007\000\002\025\007\000\002\030\005\000\002\030" +
    "\004\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\026\007\000\002\026\006\000\002\026\011\000" +
    "\002\026\010\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\032\005\000\002\032\005\000\002\032\005\000" +
    "\002\032\005\000\002\032\005\000\002\032\005\000\002" +
    "\032\002\000\002\033\004\000\002\033\004\000\002\033" +
    "\004\000\002\033\002\000\002\013\007\000\002\036\003" +
    "\000\002\036\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0152\000\006\004\004\164\006\001\002\000\012\005" +
    "\ufffa\006\237\010\242\164\006\001\002\000\004\002\uffff" +
    "\001\002\000\042\125\032\126\030\127\026\130\023\131" +
    "\025\132\034\133\014\151\uff8d\152\027\164\uff8d\175\031" +
    "\176\012\177\011\200\022\201\035\202\020\001\002\000" +
    "\004\002\010\001\002\000\004\002\001\001\002\000\140" +
    "\013\uffdd\015\uffdd\017\uffdd\021\uffdd\023\uffdd\025\uffdd\027" +
    "\uffdd\033\uffdd\035\uffdd\043\uffdd\044\uffdd\125\uffdd\126\uffdd" +
    "\127\uffdd\130\uffdd\131\uffdd\132\uffdd\133\uffdd\135\uffdd\136" +
    "\uffdd\137\uffdd\140\uffdd\141\uffdd\142\uffdd\143\uffdd\144\uffdd" +
    "\145\uffdd\146\uffdd\147\uffdd\150\uffdd\151\uffdd\152\uffdd\153" +
    "\uffdd\154\uffdd\155\uffdd\157\uffdd\160\uffdd\161\uffdd\162\uffdd" +
    "\163\uffdd\164\uffdd\175\uffdd\176\uffdd\177\uffdd\200\uffdd\201" +
    "\uffdd\202\uffdd\001\002\000\140\013\uffde\015\uffde\017\uffde" +
    "\021\uffde\023\uffde\025\uffde\027\uffde\033\uffde\035\uffde\043" +
    "\uffde\044\uffde\125\uffde\126\uffde\127\uffde\130\uffde\131\uffde" +
    "\132\uffde\133\uffde\135\uffde\136\uffde\137\uffde\140\uffde\141" +
    "\uffde\142\uffde\143\uffde\144\uffde\145\uffde\146\uffde\147\uffde" +
    "\150\uffde\151\uffde\152\uffde\153\uffde\154\uffde\155\uffde\157" +
    "\uffde\160\uffde\161\uffde\162\uffde\163\uffde\164\uffde\175\uffde" +
    "\176\uffde\177\uffde\200\uffde\201\uffde\202\uffde\001\002\000" +
    "\042\125\032\126\030\127\026\130\023\131\025\132\034" +
    "\133\014\151\uff8d\152\027\164\uff8d\175\031\176\012\177" +
    "\011\200\022\201\035\202\020\001\002\000\004\156\201" +
    "\001\002\000\006\151\176\164\uff5f\001\002\000\042\125" +
    "\032\126\030\127\026\130\023\131\025\132\034\133\014" +
    "\151\uff8d\152\027\164\uff8d\175\031\176\012\177\011\200" +
    "\022\201\035\202\020\001\002\000\066\125\032\126\030" +
    "\127\026\130\023\131\025\132\034\133\014\135\066\136" +
    "\055\137\053\140\050\141\060\150\155\151\uff8d\152\027" +
    "\154\165\161\150\162\154\163\152\164\uff8d\175\031\176" +
    "\012\177\011\200\022\201\035\202\020\001\002\000\140" +
    "\013\uffda\015\uffda\017\uffda\021\uffda\023\uffda\025\uffda\027" +
    "\uffda\033\uffda\035\uffda\043\uffda\044\uffda\125\uffda\126\uffda" +
    "\127\uffda\130\uffda\131\uffda\132\uffda\133\uffda\135\uffda\136" +
    "\uffda\137\uffda\140\uffda\141\uffda\142\uffda\143\uffda\144\uffda" +
    "\145\uffda\146\uffda\147\uffda\150\uffda\151\uffda\152\uffda\153" +
    "\uffda\154\uffda\155\uffda\157\uffda\160\uffda\161\uffda\162\uffda" +
    "\163\uffda\164\uffda\175\uffda\176\uffda\177\uffda\200\uffda\201" +
    "\uffda\202\uffda\001\002\000\020\152\027\175\031\176\012" +
    "\177\011\200\022\201\035\202\020\001\002\000\140\013" +
    "\uffdc\015\uffdc\017\uffdc\021\uffdc\023\uffdc\025\uffdc\027\uffdc" +
    "\033\uffdc\035\uffdc\043\uffdc\044\uffdc\125\uffdc\126\uffdc\127" +
    "\uffdc\130\uffdc\131\uffdc\132\uffdc\133\uffdc\135\uffdc\136\uffdc" +
    "\137\uffdc\140\uffdc\141\uffdc\142\uffdc\143\uffdc\144\uffdc\145" +
    "\uffdc\146\uffdc\147\uffdc\150\uffdc\151\uffdc\152\uffdc\153\uffdc" +
    "\154\uffdc\155\uffdc\157\uffdc\160\uffdc\161\uffdc\162\uffdc\163" +
    "\uffdc\164\uffdc\175\uffdc\176\uffdc\177\uffdc\200\uffdc\201\uffdc" +
    "\202\uffdc\001\002\000\020\152\uff71\175\uff71\176\uff71\177" +
    "\uff71\200\uff71\201\uff71\202\uff71\001\002\000\042\125\032" +
    "\126\030\127\026\130\023\131\025\132\034\133\014\151" +
    "\uff8d\152\027\164\uff8d\175\031\176\012\177\011\200\022" +
    "\201\035\202\020\001\002\000\020\152\uff73\175\uff73\176" +
    "\uff73\177\uff73\200\uff73\201\uff73\202\uff73\001\002\000\020" +
    "\152\uff72\175\uff72\176\uff72\177\uff72\200\uff72\201\uff72\202" +
    "\uff72\001\002\000\016\175\031\176\012\177\011\200\022" +
    "\201\035\202\020\001\002\000\020\152\uff75\175\uff75\176" +
    "\uff75\177\uff75\200\uff75\201\uff75\202\uff75\001\002\000\140" +
    "\013\uffdf\015\uffdf\017\uffdf\021\uffdf\023\uffdf\025\uffdf\027" +
    "\uffdf\033\uffdf\035\uffdf\043\uffdf\044\uffdf\125\uffdf\126\uffdf" +
    "\127\uffdf\130\uffdf\131\uffdf\132\uffdf\133\uffdf\135\uffdf\136" +
    "\uffdf\137\uffdf\140\uffdf\141\uffdf\142\uffdf\143\uffdf\144\uffdf" +
    "\145\uffdf\146\uffdf\147\uffdf\150\uffdf\151\uffdf\152\uffdf\153" +
    "\uffdf\154\uffdf\155\uffdf\157\uffdf\160\uffdf\161\uffdf\162\uffdf" +
    "\163\uffdf\164\uffdf\175\uffdf\176\uffdf\177\uffdf\200\uffdf\201" +
    "\uffdf\202\uffdf\001\002\000\020\152\uff74\175\uff74\176\uff74" +
    "\177\uff74\200\uff74\201\uff74\202\uff74\001\002\000\140\013" +
    "\uffe0\015\uffe0\017\uffe0\021\uffe0\023\uffe0\025\uffe0\027\uffe0" +
    "\033\uffe0\035\uffe0\043\uffe0\044\uffe0\125\uffe0\126\uffe0\127" +
    "\uffe0\130\uffe0\131\uffe0\132\uffe0\133\uffe0\135\uffe0\136\uffe0" +
    "\137\uffe0\140\uffe0\141\uffe0\142\uffe0\143\uffe0\144\uffe0\145" +
    "\uffe0\146\uffe0\147\uffe0\150\uffe0\151\uffe0\152\027\153\uffe0" +
    "\154\uffe0\155\uffe0\157\126\160\124\161\uffe0\162\uffe0\163" +
    "\uffe0\164\uffe0\175\031\176\012\177\011\200\022\201\035" +
    "\202\020\001\002\000\004\152\036\001\002\000\140\013" +
    "\uffdb\015\uffdb\017\uffdb\021\uffdb\023\uffdb\025\uffdb\027\uffdb" +
    "\033\uffdb\035\uffdb\043\uffdb\044\uffdb\125\uffdb\126\uffdb\127" +
    "\uffdb\130\uffdb\131\uffdb\132\uffdb\133\uffdb\135\uffdb\136\uffdb" +
    "\137\uffdb\140\uffdb\141\uffdb\142\uffdb\143\uffdb\144\uffdb\145" +
    "\uffdb\146\uffdb\147\uffdb\150\uffdb\151\uffdb\152\uffdb\153\uffdb" +
    "\154\uffdb\155\uffdb\157\uffdb\160\uffdb\161\uffdb\162\uffdb\163" +
    "\uffdb\164\uffdb\175\uffdb\176\uffdb\177\uffdb\200\uffdb\201\uffdb" +
    "\202\uffdb\001\002\000\032\133\014\152\041\153\uff62\165" +
    "\043\166\042\167\040\175\031\176\012\177\011\200\022" +
    "\201\035\202\020\001\002\000\010\151\uff7b\153\uff7b\155" +
    "\uff7b\001\002\000\004\152\112\001\002\000\020\152\027" +
    "\175\031\176\012\177\011\200\022\201\035\202\020\001" +
    "\002\000\004\152\112\001\002\000\004\152\112\001\002" +
    "\000\010\151\uff7c\153\uff7c\155\uff7c\001\002\000\004\153" +
    "\107\001\002\000\010\151\uff7a\153\uff7a\155\uff7a\001\002" +
    "\000\036\135\062\136\055\137\053\140\050\141\060\142" +
    "\056\143\057\144\063\145\051\146\052\147\054\151\uff66" +
    "\153\uff66\155\uff66\001\002\000\020\152\027\175\031\176" +
    "\012\177\011\200\022\201\035\202\020\001\002\000\020" +
    "\152\027\175\031\176\012\177\011\200\022\201\035\202" +
    "\020\001\002\000\020\152\027\175\031\176\012\177\011" +
    "\200\022\201\035\202\020\001\002\000\020\152\027\175" +
    "\031\176\012\177\011\200\022\201\035\202\020\001\002" +
    "\000\020\152\027\175\031\176\012\177\011\200\022\201" +
    "\035\202\020\001\002\000\020\152\027\175\031\176\012" +
    "\177\011\200\022\201\035\202\020\001\002\000\020\152" +
    "\027\175\031\176\012\177\011\200\022\201\035\202\020" +
    "\001\002\000\020\152\027\175\031\176\012\177\011\200" +
    "\022\201\035\202\020\001\002\000\020\152\027\175\031" +
    "\176\012\177\011\200\022\201\035\202\020\001\002\000" +
    "\010\151\uff7d\153\uff7d\155\uff7d\001\002\000\022\133\014" +
    "\152\027\175\031\176\012\177\011\200\022\201\035\202" +
    "\020\001\002\000\020\152\027\175\031\176\012\177\011" +
    "\200\022\201\035\202\020\001\002\000\036\135\066\136" +
    "\055\137\053\140\050\141\060\142\056\143\057\144\063" +
    "\145\051\146\052\147\054\151\uff66\153\uff66\155\uff66\001" +
    "\002\000\010\151\uff6b\153\uff6b\155\uff6b\001\002\000\020" +
    "\152\027\175\031\176\012\177\011\200\022\201\035\202" +
    "\020\001\002\000\134\013\uffee\015\uffee\017\uffee\021\uffee" +
    "\023\uffee\025\uffee\027\uffee\033\uffee\035\uffee\043\uffee\044" +
    "\uffee\125\uffee\126\uffee\127\uffee\130\uffee\131\uffee\132\uffee" +
    "\133\uffee\135\uffee\136\uffee\137\053\140\050\141\060\142" +
    "\uffee\143\uffee\144\uffee\145\uffee\146\uffee\147\uffee\150\uffee" +
    "\151\uffee\152\uffee\153\uffee\154\uffee\155\uffee\161\uffee\162" +
    "\uffee\163\uffee\164\uffee\175\uffee\176\uffee\177\uffee\200\uffee" +
    "\201\uffee\202\uffee\001\002\000\010\151\uff7e\153\uff7e\155" +
    "\uff7e\001\002\000\134\013\uffea\015\uffea\017\uffea\021\uffea" +
    "\023\uffea\025\uffea\027\uffea\033\uffea\035\uffea\043\uffea\044" +
    "\uffea\125\uffea\126\uffea\127\uffea\130\uffea\131\uffea\132\uffea" +
    "\133\uffea\135\uffea\136\uffea\137\uffea\140\uffea\141\uffea\142" +
    "\uffea\143\uffea\144\uffea\145\uffea\146\uffea\147\uffea\150\uffea" +
    "\151\uffea\152\uffea\153\uffea\154\uffea\155\uffea\161\uffea\162" +
    "\uffea\163\uffea\164\uffea\175\uffea\176\uffea\177\uffea\200\uffea" +
    "\201\uffea\202\uffea\001\002\000\036\135\066\136\055\137" +
    "\053\140\050\141\060\142\056\143\057\144\063\145\051" +
    "\146\052\147\054\151\uff66\153\uff66\155\uff66\001\002\000" +
    "\010\151\uff6a\153\uff6a\155\uff6a\001\002\000\036\135\066" +
    "\136\055\137\053\140\050\141\060\142\056\143\057\144" +
    "\063\145\051\146\052\147\054\151\uff66\153\uff66\155\uff66" +
    "\001\002\000\010\151\uff6c\153\uff6c\155\uff6c\001\002\000" +
    "\134\013\uffed\015\uffed\017\uffed\021\uffed\023\uffed\025\uffed" +
    "\027\uffed\033\uffed\035\uffed\043\uffed\044\uffed\125\uffed\126" +
    "\uffed\127\uffed\130\uffed\131\uffed\132\uffed\133\uffed\135\uffed" +
    "\136\uffed\137\053\140\050\141\060\142\uffed\143\uffed\144" +
    "\uffed\145\uffed\146\uffed\147\uffed\150\uffed\151\uffed\152\uffed" +
    "\153\uffed\154\uffed\155\uffed\161\uffed\162\uffed\163\uffed\164" +
    "\uffed\175\uffed\176\uffed\177\uffed\200\uffed\201\uffed\202\uffed" +
    "\001\002\000\036\135\066\136\055\137\053\140\050\141" +
    "\060\142\056\143\057\144\063\145\051\146\052\147\054" +
    "\151\uff66\153\uff66\155\uff66\001\002\000\010\151\uff67\153" +
    "\uff67\155\uff67\001\002\000\134\013\uffec\015\uffec\017\uffec" +
    "\021\uffec\023\uffec\025\uffec\027\uffec\033\uffec\035\uffec\043" +
    "\uffec\044\uffec\125\uffec\126\uffec\127\uffec\130\uffec\131\uffec" +
    "\132\uffec\133\uffec\135\uffec\136\uffec\137\uffec\140\uffec\141" +
    "\uffec\142\uffec\143\uffec\144\uffec\145\uffec\146\uffec\147\uffec" +
    "\150\uffec\151\uffec\152\uffec\153\uffec\154\uffec\155\uffec\161" +
    "\uffec\162\uffec\163\uffec\164\uffec\175\uffec\176\uffec\177\uffec" +
    "\200\uffec\201\uffec\202\uffec\001\002\000\036\135\066\136" +
    "\055\137\053\140\050\141\060\142\056\143\057\144\063" +
    "\145\051\146\052\147\054\151\uff66\153\uff66\155\uff66\001" +
    "\002\000\010\151\uff68\153\uff68\155\uff68\001\002\000\036" +
    "\135\066\136\055\137\053\140\050\141\060\142\056\143" +
    "\057\144\063\145\051\146\052\147\054\151\uff66\153\uff66" +
    "\155\uff66\001\002\000\010\151\uff69\153\uff69\155\uff69\001" +
    "\002\000\134\013\uffeb\015\uffeb\017\uffeb\021\uffeb\023\uffeb" +
    "\025\uffeb\027\uffeb\033\uffeb\035\uffeb\043\uffeb\044\uffeb\125" +
    "\uffeb\126\uffeb\127\uffeb\130\uffeb\131\uffeb\132\uffeb\133\uffeb" +
    "\135\uffeb\136\uffeb\137\uffeb\140\uffeb\141\uffeb\142\uffeb\143" +
    "\uffeb\144\uffeb\145\uffeb\146\uffeb\147\uffeb\150\uffeb\151\uffeb" +
    "\152\uffeb\153\uffeb\154\uffeb\155\uffeb\161\uffeb\162\uffeb\163" +
    "\uffeb\164\uffeb\175\uffeb\176\uffeb\177\uffeb\200\uffeb\201\uffeb" +
    "\202\uffeb\001\002\000\004\151\110\001\002\000\042\125" +
    "\uff8c\126\uff8c\127\uff8c\130\uff8c\131\uff8c\132\uff8c\133\uff8c" +
    "\151\uff8c\152\uff8c\164\uff8c\175\uff8c\176\uff8c\177\uff8c\200" +
    "\uff8c\201\uff8c\202\uff8c\001\002\000\010\151\uff65\153\uff65" +
    "\155\uff65\001\002\000\020\152\027\175\031\176\012\177" +
    "\011\200\022\201\035\202\020\001\002\000\032\135\066" +
    "\136\055\137\053\140\050\141\060\142\056\143\057\144" +
    "\063\145\051\146\052\147\054\153\uff66\001\002\000\004" +
    "\153\115\001\002\000\016\151\uff62\153\uff62\155\uff62\165" +
    "\043\166\042\167\040\001\002\000\010\151\uff61\153\uff61" +
    "\155\uff61\001\002\000\010\151\uff64\153\uff64\155\uff64\001" +
    "\002\000\054\135\131\136\125\137\122\140\121\141\127" +
    "\142\uffe0\143\uffe0\144\uffe0\145\uffe0\146\uffe0\147\uffe0\152" +
    "\027\153\123\157\126\160\124\175\031\176\012\177\011" +
    "\200\022\201\035\202\020\001\002\000\020\152\027\175" +
    "\031\176\012\177\011\200\022\201\035\202\020\001\002" +
    "\000\020\152\027\175\031\176\012\177\011\200\022\201" +
    "\035\202\020\001\002\000\134\013\uffe9\015\uffe9\017\uffe9" +
    "\021\uffe9\023\uffe9\025\uffe9\027\uffe9\033\uffe9\035\uffe9\043" +
    "\uffe9\044\uffe9\125\uffe9\126\uffe9\127\uffe9\130\uffe9\131\uffe9" +
    "\132\uffe9\133\uffe9\135\uffe9\136\uffe9\137\uffe9\140\uffe9\141" +
    "\uffe9\142\uffe9\143\uffe9\144\uffe9\145\uffe9\146\uffe9\147\uffe9" +
    "\150\uffe9\151\uffe9\152\uffe9\153\uffe9\154\uffe9\155\uffe9\161" +
    "\uffe9\162\uffe9\163\uffe9\164\uffe9\175\uffe9\176\uffe9\177\uffe9" +
    "\200\uffe9\201\uffe9\202\uffe9\001\002\000\134\013\uffe2\015" +
    "\uffe2\017\uffe2\021\uffe2\023\uffe2\025\uffe2\027\uffe2\033\uffe2" +
    "\035\uffe2\043\uffe2\044\uffe2\125\uffe2\126\uffe2\127\uffe2\130" +
    "\uffe2\131\uffe2\132\uffe2\133\uffe2\135\uffe2\136\uffe2\137\uffe2" +
    "\140\uffe2\141\uffe2\142\uffe2\143\uffe2\144\uffe2\145\uffe2\146" +
    "\uffe2\147\uffe2\150\uffe2\151\uffe2\152\uffe2\153\uffe2\154\uffe2" +
    "\155\uffe2\161\uffe2\162\uffe2\163\uffe2\164\uffe2\175\uffe2\176" +
    "\uffe2\177\uffe2\200\uffe2\201\uffe2\202\uffe2\001\002\000\020" +
    "\152\027\175\031\176\012\177\011\200\022\201\035\202" +
    "\020\001\002\000\134\013\uffe3\015\uffe3\017\uffe3\021\uffe3" +
    "\023\uffe3\025\uffe3\027\uffe3\033\uffe3\035\uffe3\043\uffe3\044" +
    "\uffe3\125\uffe3\126\uffe3\127\uffe3\130\uffe3\131\uffe3\132\uffe3" +
    "\133\uffe3\135\uffe3\136\uffe3\137\uffe3\140\uffe3\141\uffe3\142" +
    "\uffe3\143\uffe3\144\uffe3\145\uffe3\146\uffe3\147\uffe3\150\uffe3" +
    "\151\uffe3\152\uffe3\153\uffe3\154\uffe3\155\uffe3\161\uffe3\162" +
    "\uffe3\163\uffe3\164\uffe3\175\uffe3\176\uffe3\177\uffe3\200\uffe3" +
    "\201\uffe3\202\uffe3\001\002\000\020\152\027\175\031\176" +
    "\012\177\011\200\022\201\035\202\020\001\002\000\134" +
    "\013\uffe1\015\uffe1\017\uffe1\021\uffe1\023\uffe1\025\uffe1\027" +
    "\uffe1\033\uffe1\035\uffe1\043\uffe1\044\uffe1\125\uffe1\126\uffe1" +
    "\127\uffe1\130\uffe1\131\uffe1\132\uffe1\133\uffe1\135\066\136" +
    "\055\137\053\140\050\141\060\142\uffe1\143\uffe1\144\uffe1" +
    "\145\uffe1\146\uffe1\147\uffe1\150\uffe1\151\uffe1\152\uffe1\153" +
    "\uffe1\154\uffe1\155\uffe1\161\uffe1\162\uffe1\163\uffe1\164\uffe1" +
    "\175\uffe1\176\uffe1\177\uffe1\200\uffe1\201\uffe1\202\uffe1\001" +
    "\002\000\020\152\027\175\031\176\012\177\011\200\022" +
    "\201\035\202\020\001\002\000\016\135\066\136\055\137" +
    "\053\140\050\141\060\153\133\001\002\000\134\013\uffe8" +
    "\015\uffe8\017\uffe8\021\uffe8\023\uffe8\025\uffe8\027\uffe8\033" +
    "\uffe8\035\uffe8\043\uffe8\044\uffe8\125\uffe8\126\uffe8\127\uffe8" +
    "\130\uffe8\131\uffe8\132\uffe8\133\uffe8\135\uffe8\136\uffe8\137" +
    "\uffe8\140\uffe8\141\uffe8\142\uffe8\143\uffe8\144\uffe8\145\uffe8" +
    "\146\uffe8\147\uffe8\150\uffe8\151\uffe8\152\uffe8\153\uffe8\154" +
    "\uffe8\155\uffe8\161\uffe8\162\uffe8\163\uffe8\164\uffe8\175\uffe8" +
    "\176\uffe8\177\uffe8\200\uffe8\201\uffe8\202\uffe8\001\002\000" +
    "\016\135\066\136\055\137\053\140\050\141\060\153\135" +
    "\001\002\000\134\013\uffe4\015\uffe4\017\uffe4\021\uffe4\023" +
    "\uffe4\025\uffe4\027\uffe4\033\uffe4\035\uffe4\043\uffe4\044\uffe4" +
    "\125\uffe4\126\uffe4\127\uffe4\130\uffe4\131\uffe4\132\uffe4\133" +
    "\uffe4\135\uffe4\136\uffe4\137\uffe4\140\uffe4\141\uffe4\142\uffe4" +
    "\143\uffe4\144\uffe4\145\uffe4\146\uffe4\147\uffe4\150\uffe4\151" +
    "\uffe4\152\uffe4\153\uffe4\154\uffe4\155\uffe4\161\uffe4\162\uffe4" +
    "\163\uffe4\164\uffe4\175\uffe4\176\uffe4\177\uffe4\200\uffe4\201" +
    "\uffe4\202\uffe4\001\002\000\016\135\066\136\055\137\053" +
    "\140\050\141\060\153\137\001\002\000\134\013\uffe7\015" +
    "\uffe7\017\uffe7\021\uffe7\023\uffe7\025\uffe7\027\uffe7\033\uffe7" +
    "\035\uffe7\043\uffe7\044\uffe7\125\uffe7\126\uffe7\127\uffe7\130" +
    "\uffe7\131\uffe7\132\uffe7\133\uffe7\135\uffe7\136\uffe7\137\uffe7" +
    "\140\uffe7\141\uffe7\142\uffe7\143\uffe7\144\uffe7\145\uffe7\146" +
    "\uffe7\147\uffe7\150\uffe7\151\uffe7\152\uffe7\153\uffe7\154\uffe7" +
    "\155\uffe7\161\uffe7\162\uffe7\163\uffe7\164\uffe7\175\uffe7\176" +
    "\uffe7\177\uffe7\200\uffe7\201\uffe7\202\uffe7\001\002\000\016" +
    "\135\066\136\055\137\053\140\050\141\060\153\141\001" +
    "\002\000\134\013\uffe6\015\uffe6\017\uffe6\021\uffe6\023\uffe6" +
    "\025\uffe6\027\uffe6\033\uffe6\035\uffe6\043\uffe6\044\uffe6\125" +
    "\uffe6\126\uffe6\127\uffe6\130\uffe6\131\uffe6\132\uffe6\133\uffe6" +
    "\135\uffe6\136\uffe6\137\uffe6\140\uffe6\141\uffe6\142\uffe6\143" +
    "\uffe6\144\uffe6\145\uffe6\146\uffe6\147\uffe6\150\uffe6\151\uffe6" +
    "\152\uffe6\153\uffe6\154\uffe6\155\uffe6\161\uffe6\162\uffe6\163" +
    "\uffe6\164\uffe6\175\uffe6\176\uffe6\177\uffe6\200\uffe6\201\uffe6" +
    "\202\uffe6\001\002\000\016\135\066\136\055\137\053\140" +
    "\050\141\060\153\143\001\002\000\134\013\uffe5\015\uffe5" +
    "\017\uffe5\021\uffe5\023\uffe5\025\uffe5\027\uffe5\033\uffe5\035" +
    "\uffe5\043\uffe5\044\uffe5\125\uffe5\126\uffe5\127\uffe5\130\uffe5" +
    "\131\uffe5\132\uffe5\133\uffe5\135\uffe5\136\uffe5\137\uffe5\140" +
    "\uffe5\141\uffe5\142\uffe5\143\uffe5\144\uffe5\145\uffe5\146\uffe5" +
    "\147\uffe5\150\uffe5\151\uffe5\152\uffe5\153\uffe5\154\uffe5\155" +
    "\uffe5\161\uffe5\162\uffe5\163\uffe5\164\uffe5\175\uffe5\176\uffe5" +
    "\177\uffe5\200\uffe5\201\uffe5\202\uffe5\001\002\000\010\151" +
    "\uff63\153\uff63\155\uff63\001\002\000\016\135\131\136\125" +
    "\137\122\140\121\141\127\153\123\001\002\000\006\151" +
    "\uff91\164\uff91\001\002\000\026\135\066\136\055\137\053" +
    "\140\050\141\060\150\155\154\151\161\150\162\154\163" +
    "\152\001\002\000\034\133\uff70\151\uff70\152\uff70\155\uff70" +
    "\165\uff70\166\uff70\167\uff70\175\uff70\176\uff70\177\uff70\200" +
    "\uff70\201\uff70\202\uff70\001\002\000\012\150\155\161\150" +
    "\162\154\163\152\001\002\000\034\133\uff6e\151\uff6e\152" +
    "\uff6e\155\uff6e\165\uff6e\166\uff6e\167\uff6e\175\uff6e\176\uff6e" +
    "\177\uff6e\200\uff6e\201\uff6e\202\uff6e\001\002\000\032\133" +
    "\014\151\uff62\152\041\165\043\166\042\167\040\175\031" +
    "\176\012\177\011\200\022\201\035\202\020\001\002\000" +
    "\034\133\uff6f\151\uff6f\152\uff6f\155\uff6f\165\uff6f\166\uff6f" +
    "\167\uff6f\175\uff6f\176\uff6f\177\uff6f\200\uff6f\201\uff6f\202" +
    "\uff6f\001\002\000\034\133\uff6d\151\uff6d\152\uff6d\155\uff6d" +
    "\165\uff6d\166\uff6d\167\uff6d\175\uff6d\176\uff6d\177\uff6d\200" +
    "\uff6d\201\uff6d\202\uff6d\001\002\000\004\151\157\001\002" +
    "\000\042\125\uff79\126\uff79\127\uff79\130\uff79\131\uff79\132" +
    "\uff79\133\uff79\151\uff79\152\uff79\164\uff79\175\uff79\176\uff79" +
    "\177\uff79\200\uff79\201\uff79\202\uff79\001\002\000\032\133" +
    "\014\152\041\155\uff62\165\043\166\042\167\040\175\031" +
    "\176\012\177\011\200\022\201\035\202\020\001\002\000" +
    "\004\155\162\001\002\000\004\151\163\001\002\000\042" +
    "\125\uff77\126\uff77\127\uff77\130\uff77\131\uff77\132\uff77\133" +
    "\uff77\151\uff77\152\uff77\164\uff77\175\uff77\176\uff77\177\uff77" +
    "\200\uff77\201\uff77\202\uff77\001\002\000\006\151\uff8e\164" +
    "\uff8e\001\002\000\012\150\155\161\150\162\154\163\152" +
    "\001\002\000\032\133\014\151\uff62\152\041\165\043\166" +
    "\042\167\040\175\031\176\012\177\011\200\022\201\035" +
    "\202\020\001\002\000\004\151\170\001\002\000\042\125" +
    "\uff78\126\uff78\127\uff78\130\uff78\131\uff78\132\uff78\133\uff78" +
    "\151\uff78\152\uff78\164\uff78\175\uff78\176\uff78\177\uff78\200" +
    "\uff78\201\uff78\202\uff78\001\002\000\032\133\014\152\041" +
    "\155\uff62\165\043\166\042\167\040\175\031\176\012\177" +
    "\011\200\022\201\035\202\020\001\002\000\004\155\173" +
    "\001\002\000\004\151\174\001\002\000\042\125\uff76\126" +
    "\uff76\127\uff76\130\uff76\131\uff76\132\uff76\133\uff76\151\uff76" +
    "\152\uff76\164\uff76\175\uff76\176\uff76\177\uff76\200\uff76\201" +
    "\uff76\202\uff76\001\002\000\006\151\uff8f\164\uff8f\001\002" +
    "\000\004\164\uff60\001\002\000\004\164\200\001\002\000" +
    "\110\002\uff92\005\uff92\006\uff92\010\uff92\011\uff92\012\uff92" +
    "\013\uff92\014\uff92\015\uff92\016\uff92\017\uff92\020\uff92\021" +
    "\uff92\022\uff92\023\uff92\024\uff92\025\uff92\027\uff92\030\uff92" +
    "\033\uff92\035\uff92\040\uff92\041\uff92\042\uff92\043\uff92\044" +
    "\uff92\045\uff92\152\uff92\164\uff92\175\uff92\176\uff92\177\uff92" +
    "\200\uff92\201\uff92\202\uff92\001\002\000\012\134\202\170" +
    "\204\171\203\172\205\001\002\000\046\125\uff8b\126\uff8b" +
    "\127\uff8b\130\uff8b\131\uff8b\132\uff8b\133\uff8b\151\uff8b\152" +
    "\uff8b\153\uff8b\155\uff8b\164\uff8b\175\uff8b\176\uff8b\177\uff8b" +
    "\200\uff8b\201\uff8b\202\uff8b\001\002\000\052\125\uff85\126" +
    "\uff85\127\uff85\130\uff85\131\uff85\132\uff85\133\uff85\151\uff85" +
    "\152\uff85\153\uff85\154\227\155\uff85\156\226\164\uff85\175" +
    "\uff85\176\uff85\177\uff85\200\uff85\201\uff85\202\uff85\001\002" +
    "\000\052\125\uff89\126\uff89\127\uff89\130\uff89\131\uff89\132" +
    "\uff89\133\uff89\151\uff89\152\uff89\153\uff89\154\217\155\uff89" +
    "\156\216\164\uff89\175\uff89\176\uff89\177\uff89\200\uff89\201" +
    "\uff89\202\uff89\001\002\000\052\125\uff81\126\uff81\127\uff81" +
    "\130\uff81\131\uff81\132\uff81\133\uff81\151\uff81\152\uff81\153" +
    "\uff81\154\207\155\uff81\156\206\164\uff81\175\uff81\176\uff81" +
    "\177\uff81\200\uff81\201\uff81\202\uff81\001\002\000\006\173" +
    "\214\174\215\001\002\000\004\175\210\001\002\000\004" +
    "\155\211\001\002\000\004\156\212\001\002\000\004\173" +
    "\213\001\002\000\046\125\uff82\126\uff82\127\uff82\130\uff82" +
    "\131\uff82\132\uff82\133\uff82\151\uff82\152\uff82\153\uff82\155" +
    "\uff82\164\uff82\175\uff82\176\uff82\177\uff82\200\uff82\201\uff82" +
    "\202\uff82\001\002\000\046\125\uff80\126\uff80\127\uff80\130" +
    "\uff80\131\uff80\132\uff80\133\uff80\151\uff80\152\uff80\153\uff80" +
    "\155\uff80\164\uff80\175\uff80\176\uff80\177\uff80\200\uff80\201" +
    "\uff80\202\uff80\001\002\000\046\125\uff7f\126\uff7f\127\uff7f" +
    "\130\uff7f\131\uff7f\132\uff7f\133\uff7f\151\uff7f\152\uff7f\153" +
    "\uff7f\155\uff7f\164\uff7f\175\uff7f\176\uff7f\177\uff7f\200\uff7f" +
    "\201\uff7f\202\uff7f\001\002\000\006\173\224\174\225\001" +
    "\002\000\004\175\220\001\002\000\004\155\221\001\002" +
    "\000\004\156\222\001\002\000\004\173\223\001\002\000" +
    "\046\125\uff8a\126\uff8a\127\uff8a\130\uff8a\131\uff8a\132\uff8a" +
    "\133\uff8a\151\uff8a\152\uff8a\153\uff8a\155\uff8a\164\uff8a\175" +
    "\uff8a\176\uff8a\177\uff8a\200\uff8a\201\uff8a\202\uff8a\001\002" +
    "\000\046\125\uff88\126\uff88\127\uff88\130\uff88\131\uff88\132" +
    "\uff88\133\uff88\151\uff88\152\uff88\153\uff88\155\uff88\164\uff88" +
    "\175\uff88\176\uff88\177\uff88\200\uff88\201\uff88\202\uff88\001" +
    "\002\000\046\125\uff87\126\uff87\127\uff87\130\uff87\131\uff87" +
    "\132\uff87\133\uff87\151\uff87\152\uff87\153\uff87\155\uff87\164" +
    "\uff87\175\uff87\176\uff87\177\uff87\200\uff87\201\uff87\202\uff87" +
    "\001\002\000\006\173\234\174\235\001\002\000\004\175" +
    "\230\001\002\000\004\155\231\001\002\000\004\156\232" +
    "\001\002\000\004\173\233\001\002\000\046\125\uff86\126" +
    "\uff86\127\uff86\130\uff86\131\uff86\132\uff86\133\uff86\151\uff86" +
    "\152\uff86\153\uff86\155\uff86\164\uff86\175\uff86\176\uff86\177" +
    "\uff86\200\uff86\201\uff86\202\uff86\001\002\000\046\125\uff84" +
    "\126\uff84\127\uff84\130\uff84\131\uff84\132\uff84\133\uff84\151" +
    "\uff84\152\uff84\153\uff84\155\uff84\164\uff84\175\uff84\176\uff84" +
    "\177\uff84\200\uff84\201\uff84\202\uff84\001\002\000\046\125" +
    "\uff83\126\uff83\127\uff83\130\uff83\131\uff83\132\uff83\133\uff83" +
    "\151\uff83\152\uff83\153\uff83\155\uff83\164\uff83\175\uff83\176" +
    "\uff83\177\uff83\200\uff83\201\uff83\202\uff83\001\002\000\006" +
    "\151\uff90\164\uff90\001\002\000\004\026\u014c\001\002\000" +
    "\014\005\ufffa\006\237\010\242\011\ufffa\164\006\001\002" +
    "\000\004\005\u014a\001\002\000\040\006\ufff2\010\ufff2\011" +
    "\ufff2\012\256\014\250\016\243\020\255\022\247\024\262" +
    "\030\244\040\260\042\246\044\261\045\257\164\006\001" +
    "\002\000\014\046\264\047\266\050\267\051\263\144\uffbe" +
    "\001\002\000\014\046\264\047\266\050\267\051\263\144" +
    "\uffbe\001\002\000\042\006\ufff2\010\ufff2\011\ufff2\012\256" +
    "\014\250\016\243\020\255\022\247\024\262\030\244\040" +
    "\260\041\ufff2\042\246\044\261\045\257\164\006\001\002" +
    "\000\014\046\264\047\266\050\267\051\263\144\uffbe\001" +
    "\002\000\014\046\264\047\266\050\267\051\263\144\uffbe" +
    "\001\002\000\014\046\264\047\266\050\267\051\263\144" +
    "\uffbe\001\002\000\012\006\237\010\242\011\ufffa\164\006" +
    "\001\002\000\042\006\ufff2\010\ufff2\011\ufff2\012\256\014" +
    "\250\016\243\020\255\022\247\024\262\030\244\040\260" +
    "\041\ufff2\042\246\044\261\045\257\164\006\001\002\000" +
    "\042\006\ufff2\010\ufff2\011\ufff2\012\256\014\250\016\243" +
    "\020\255\022\247\024\262\030\244\040\260\041\ufff2\042" +
    "\246\044\261\045\257\164\006\001\002\000\042\006\ufff2" +
    "\010\ufff2\011\ufff2\012\256\014\250\016\243\020\255\022" +
    "\247\024\262\030\244\040\260\041\ufff2\042\246\044\261" +
    "\045\257\164\006\001\002\000\014\046\264\047\266\050" +
    "\267\051\263\144\uffbe\001\002\000\014\046\264\047\266" +
    "\050\267\051\263\144\uffbe\001\002\000\042\006\ufff2\010" +
    "\ufff2\011\ufff2\012\256\014\250\016\243\020\255\022\247" +
    "\024\262\030\244\040\260\041\ufff2\042\246\044\261\045" +
    "\257\164\006\001\002\000\014\046\264\047\266\050\267" +
    "\051\263\144\uffbe\001\002\000\042\006\ufff2\010\ufff2\011" +
    "\ufff2\012\256\014\250\016\243\020\255\022\247\024\262" +
    "\030\244\040\260\041\ufff2\042\246\044\261\045\257\164" +
    "\006\001\002\000\014\046\264\047\266\050\267\051\263" +
    "\144\uffbe\001\002\000\004\150\336\001\002\000\004\150" +
    "\327\001\002\000\004\144\320\001\002\000\004\150\302" +
    "\001\002\000\004\150\270\001\002\000\006\177\271\203" +
    "\272\001\002\000\014\046\264\047\266\050\267\051\263" +
    "\144\uffbe\001\002\000\010\061\275\062\273\063\276\001" +
    "\002\000\004\203\uffb5\001\002\000\004\203\277\001\002" +
    "\000\004\203\uffb6\001\002\000\004\203\uffb4\001\002\000" +
    "\014\046\264\047\266\050\267\051\263\144\uffbe\001\002" +
    "\000\004\144\uffc0\001\002\000\004\144\uffc4\001\002\000" +
    "\006\177\303\203\304\001\002\000\014\046\264\047\266" +
    "\050\267\051\263\144\uffbe\001\002\000\020\052\313\053" +
    "\314\054\312\055\307\056\305\057\310\060\311\001\002" +
    "\000\004\203\uffb9\001\002\000\004\203\315\001\002\000" +
    "\004\203\uffba\001\002\000\004\203\uffb8\001\002\000\004" +
    "\203\uffb7\001\002\000\004\203\uffbb\001\002\000\004\203" +
    "\uffbd\001\002\000\004\203\uffbc\001\002\000\014\046\264" +
    "\047\266\050\267\051\263\144\uffbe\001\002\000\004\144" +
    "\uffc1\001\002\000\004\144\uffc5\001\002\000\024\025\uffef" +
    "\152\027\164\006\175\031\176\012\177\011\200\022\201" +
    "\035\202\020\001\002\000\004\025\326\001\002\000\042" +
    "\013\uffef\015\uffef\017\uffef\021\uffef\023\uffef\025\uffef\033" +
    "\uffef\035\uffef\152\027\164\006\175\031\176\012\177\011" +
    "\200\022\201\035\202\020\001\002\000\054\013\uffef\015" +
    "\uffef\017\uffef\021\uffef\023\uffef\025\uffef\033\uffef\035\uffef" +
    "\135\066\136\055\137\053\140\050\141\060\152\027\164" +
    "\006\175\031\176\012\177\011\200\022\201\035\202\020" +
    "\001\002\000\022\013\ufff1\015\ufff1\017\ufff1\021\ufff1\023" +
    "\ufff1\025\ufff1\033\ufff1\035\ufff1\001\002\000\022\013\ufff0" +
    "\015\ufff0\017\ufff0\021\ufff0\023\ufff0\025\ufff0\033\ufff0\035" +
    "\ufff0\001\002\000\042\006\uffd4\010\uffd4\011\uffd4\012\uffd4" +
    "\014\uffd4\016\uffd4\020\uffd4\022\uffd4\024\uffd4\030\uffd4\040" +
    "\uffd4\041\uffd4\042\uffd4\044\uffd4\045\uffd4\164\uffd4\001\002" +
    "\000\006\177\330\203\331\001\002\000\014\046\264\047" +
    "\266\050\267\051\263\144\uffbe\001\002\000\020\052\313" +
    "\053\314\054\312\055\307\056\305\057\310\060\311\001" +
    "\002\000\004\203\333\001\002\000\014\046\264\047\266" +
    "\050\267\051\263\144\uffbe\001\002\000\004\144\uffc2\001" +
    "\002\000\004\144\uffc6\001\002\000\006\177\337\203\340" +
    "\001\002\000\014\046\264\047\266\050\267\051\263\144" +
    "\uffbe\001\002\000\104\064\352\065\366\066\371\067\361" +
    "\070\350\071\346\072\342\073\374\074\376\075\357\076" +
    "\355\077\372\100\345\101\364\102\367\103\370\104\360" +
    "\105\u0102\106\365\107\343\110\344\111\u0101\112\353\113" +
    "\341\114\375\115\u0100\116\362\117\354\120\363\121\373" +
    "\122\347\123\356\124\351\001\002\000\004\203\uff9c\001" +
    "\002\000\004\203\uffad\001\002\000\004\203\uffa0\001\002" +
    "\000\004\203\uff9f\001\002\000\004\203\uffa7\001\002\000" +
    "\004\203\uffae\001\002\000\004\203\uff95\001\002\000\004" +
    "\203\uffaf\001\002\000\004\203\uff93\001\002\000\004\203" +
    "\uffb3\001\002\000\004\203\uff9d\001\002\000\004\203\uff98" +
    "\001\002\000\004\203\uffa9\001\002\000\004\203\uff94\001" +
    "\002\000\004\203\uffaa\001\002\000\004\203\uffa3\001\002" +
    "\000\004\203\uffb0\001\002\000\004\203\uff99\001\002\000" +
    "\004\203\uff97\001\002\000\004\203\uffa6\001\002\000\004" +
    "\203\uffa1\001\002\000\004\203\uffb2\001\002\000\004\203" +
    "\uffa5\001\002\000\004\203\uffa4\001\002\000\004\203\uffb1" +
    "\001\002\000\004\203\uffa8\001\002\000\004\203\uff96\001" +
    "\002\000\004\203\uffac\001\002\000\004\203\uff9b\001\002" +
    "\000\004\203\uffab\001\002\000\004\203\u0103\001\002\000" +
    "\004\203\uff9a\001\002\000\004\203\uff9e\001\002\000\004" +
    "\203\uffa2\001\002\000\014\046\264\047\266\050\267\051" +
    "\263\144\uffbe\001\002\000\004\144\uffbf\001\002\000\004" +
    "\144\uffc3\001\002\000\014\006\ufff7\010\ufff7\011\ufff7\041" +
    "\ufff7\164\ufff7\001\002\000\004\144\u0108\001\002\000\034" +
    "\012\256\014\250\016\243\020\255\022\247\024\262\030" +
    "\244\040\260\041\ufff2\042\246\044\261\045\257\164\006" +
    "\001\002\000\004\041\u010b\001\002\000\004\041\uffc7\001" +
    "\002\000\042\006\uffc8\010\uffc8\011\uffc8\012\uffc8\014\uffc8" +
    "\016\uffc8\020\uffc8\022\uffc8\024\uffc8\030\uffc8\040\uffc8\041" +
    "\uffc8\042\uffc8\044\uffc8\045\uffc8\164\uffc8\001\002\000\014" +
    "\006\ufff6\010\ufff6\011\ufff6\041\ufff6\164\ufff6\001\002\000" +
    "\004\144\u010e\001\002\000\024\013\uffef\152\027\164\006" +
    "\175\031\176\012\177\011\200\022\201\035\202\020\001" +
    "\002\000\004\013\u0110\001\002\000\042\006\uffd9\010\uffd9" +
    "\011\uffd9\012\uffd9\014\uffd9\016\uffd9\020\uffd9\022\uffd9\024" +
    "\uffd9\030\uffd9\040\uffd9\041\uffd9\042\uffd9\044\uffd9\045\uffd9" +
    "\164\uffd9\001\002\000\004\144\u0112\001\002\000\024\021" +
    "\uffef\152\027\164\006\175\031\176\012\177\011\200\022" +
    "\201\035\202\020\001\002\000\004\021\u0114\001\002\000" +
    "\042\006\uffd6\010\uffd6\011\uffd6\012\uffd6\014\uffd6\016\uffd6" +
    "\020\uffd6\022\uffd6\024\uffd6\030\uffd6\040\uffd6\041\uffd6\042" +
    "\uffd6\044\uffd6\045\uffd6\164\uffd6\001\002\000\014\006\ufff4" +
    "\010\ufff4\011\ufff4\041\ufff4\164\ufff4\001\002\000\014\006" +
    "\ufff3\010\ufff3\011\ufff3\041\ufff3\164\ufff3\001\002\000\014" +
    "\006\ufff5\010\ufff5\011\ufff5\041\ufff5\164\ufff5\001\002\000" +
    "\004\011\u0119\001\002\000\014\005\ufffa\006\237\010\242" +
    "\011\ufffa\164\006\001\002\000\006\005\ufffc\011\ufffc\001" +
    "\002\000\004\144\u011c\001\002\000\024\015\uffef\152\027" +
    "\164\006\175\031\176\012\177\011\200\022\201\035\202" +
    "\020\001\002\000\004\015\u011e\001\002\000\042\006\uffd8" +
    "\010\uffd8\011\uffd8\012\uffd8\014\uffd8\016\uffd8\020\uffd8\022" +
    "\uffd8\024\uffd8\030\uffd8\040\uffd8\041\uffd8\042\uffd8\044\uffd8" +
    "\045\uffd8\164\uffd8\001\002\000\004\144\u0120\001\002\000" +
    "\024\023\uffef\152\027\164\006\175\031\176\012\177\011" +
    "\200\022\201\035\202\020\001\002\000\004\023\u0122\001" +
    "\002\000\042\006\uffd5\010\uffd5\011\uffd5\012\uffd5\014\uffd5" +
    "\016\uffd5\020\uffd5\022\uffd5\024\uffd5\030\uffd5\040\uffd5\041" +
    "\uffd5\042\uffd5\044\uffd5\045\uffd5\164\uffd5\001\002\000\004" +
    "\144\u0124\001\002\000\024\043\uffc9\152\027\164\006\175" +
    "\031\176\012\177\011\200\022\201\035\202\020\001\002" +
    "\000\004\043\u012e\001\002\000\026\043\uffc9\044\u012c\152" +
    "\027\164\006\175\031\176\012\177\011\200\022\201\035" +
    "\202\020\001\002\000\040\043\uffc9\044\u0129\135\066\136" +
    "\055\137\053\140\050\141\060\152\027\164\006\175\031" +
    "\176\012\177\011\200\022\201\035\202\020\001\002\000" +
    "\004\043\uffcc\001\002\000\024\043\uffc9\152\027\164\006" +
    "\175\031\176\012\177\011\200\022\201\035\202\020\001" +
    "\002\000\004\043\uffcd\001\002\000\004\043\uffca\001\002" +
    "\000\024\043\uffc9\152\027\164\006\175\031\176\012\177" +
    "\011\200\022\201\035\202\020\001\002\000\004\043\uffcb" +
    "\001\002\000\042\006\uffce\010\uffce\011\uffce\012\uffce\014" +
    "\uffce\016\uffce\020\uffce\022\uffce\024\uffce\030\uffce\040\uffce" +
    "\041\uffce\042\uffce\044\uffce\045\uffce\164\uffce\001\002\000" +
    "\014\006\ufff9\010\ufff9\011\ufff9\041\ufff9\164\ufff9\001\002" +
    "\000\004\144\u0131\001\002\000\006\031\uffd2\036\u0133\001" +
    "\002\000\004\031\u0144\001\002\000\014\046\264\047\266" +
    "\050\267\051\263\144\uffbe\001\002\000\004\144\u0135\001" +
    "\002\000\010\032\u0138\034\u0136\037\uffcf\001\002\000\014" +
    "\046\264\047\266\050\267\051\263\144\uffbe\001\002\000" +
    "\004\037\u013d\001\002\000\004\144\u0139\001\002\000\024" +
    "\033\uffef\152\027\164\006\175\031\176\012\177\011\200" +
    "\022\201\035\202\020\001\002\000\004\033\u013b\001\002" +
    "\000\010\032\u0138\034\u0136\037\uffcf\001\002\000\004\037" +
    "\uffd0\001\002\000\006\031\uffd2\036\u0133\001\002\000\004" +
    "\031\uffd3\001\002\000\004\144\u0140\001\002\000\024\035" +
    "\uffef\152\027\164\006\175\031\176\012\177\011\200\022" +
    "\201\035\202\020\001\002\000\004\035\u0142\001\002\000" +
    "\010\032\u0138\034\u0136\037\uffcf\001\002\000\004\037\uffd1" +
    "\001\002\000\042\006\ufff2\010\ufff2\011\ufff2\012\256\014" +
    "\250\016\243\020\255\022\247\024\262\030\244\040\260" +
    "\041\ufff2\042\246\044\261\045\257\164\006\001\002\000" +
    "\014\006\ufff8\010\ufff8\011\ufff8\041\ufff8\164\ufff8\001\002" +
    "\000\004\144\u0147\001\002\000\024\017\uffef\152\027\164" +
    "\006\175\031\176\012\177\011\200\022\201\035\202\020" +
    "\001\002\000\004\017\u0149\001\002\000\042\006\uffd7\010" +
    "\uffd7\011\uffd7\012\uffd7\014\uffd7\016\uffd7\020\uffd7\022\uffd7" +
    "\024\uffd7\030\uffd7\040\uffd7\041\uffd7\042\uffd7\044\uffd7\045" +
    "\uffd7\164\uffd7\001\002\000\004\002\000\001\002\000\006" +
    "\005\ufffb\011\ufffb\001\002\000\022\152\027\164\006\175" +
    "\031\176\012\177\011\200\022\201\035\202\020\001\002" +
    "\000\004\027\u0152\001\002\000\016\027\u014f\135\066\136" +
    "\055\137\053\140\050\141\060\001\002\000\004\007\u0150" +
    "\001\002\000\014\005\ufffa\006\237\010\242\011\ufffa\164" +
    "\006\001\002\000\006\005\ufffe\011\ufffe\001\002\000\004" +
    "\007\u0153\001\002\000\014\005\ufffa\006\237\010\242\011" +
    "\ufffa\164\006\001\002\000\006\005\ufffd\011\ufffd\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0152\000\006\002\006\023\004\001\001\000\006\003" +
    "\240\023\237\001\001\000\002\001\001\000\020\005\016" +
    "\006\032\024\014\025\023\026\012\027\015\031\020\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\005\016\006\032\024\235\025" +
    "\023\026\012\027\015\031\020\001\001\000\002\001\001" +
    "\000\004\036\176\001\001\000\020\005\016\006\032\024" +
    "\174\025\023\026\012\027\015\031\020\001\001\000\022" +
    "\005\016\006\032\024\163\025\023\026\012\027\015\031" +
    "\020\034\165\001\001\000\002\001\001\000\006\005\146" +
    "\006\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\005\016\006\032\024\145\025\023\026\012\027\015" +
    "\031\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\144\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\127\006\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\005\046\006\032" +
    "\013\045\025\043\030\044\033\036\001\001\000\002\001" +
    "\001\000\004\013\143\001\001\000\006\005\112\006\117" +
    "\001\001\000\004\013\116\001\001\000\004\013\110\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\032\060\001\001\000\006\005\105\006\032\001" +
    "\001\000\006\005\103\006\032\001\001\000\006\005\101" +
    "\006\032\001\001\000\006\005\100\006\032\001\001\000" +
    "\006\005\076\006\032\001\001\000\006\005\075\006\032" +
    "\001\001\000\006\005\073\006\032\001\001\000\006\005" +
    "\071\006\032\001\001\000\006\005\070\006\032\001\001" +
    "\000\002\001\001\000\010\005\066\006\032\025\067\001" +
    "\001\000\006\005\063\006\032\001\001\000\004\032\064" +
    "\001\001\000\002\001\001\000\006\005\066\006\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\032\072\001\001\000\002\001\001\000\004\032" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\102\001\001\000\002\001\001\000\004\032\104" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\112" +
    "\006\032\001\001\000\004\032\113\001\001\000\002\001" +
    "\001\000\004\033\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\127\006\032\001\001\000\006\005" +
    "\141\006\032\001\001\000\006\005\137\006\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\135\006" +
    "\032\001\001\000\002\001\001\000\006\005\133\006\032" +
    "\001\001\000\002\001\001\000\006\005\131\006\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\034\152\001\001\000\002\001\001\000\004" +
    "\034\157\001\001\000\002\001\001\000\016\005\046\006" +
    "\032\013\045\025\043\030\155\033\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\005\046\006\032\013\045\025\043\030\160" +
    "\033\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\034\170\001\001" +
    "\000\016\005\046\006\032\013\045\025\043\030\166\033" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\005\046\006\032\013\045\025\043\030\171\033\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\u014a\023\237\001\001\000\002\001\001\000\014\004\250" +
    "\007\244\014\251\016\253\023\252\001\001\000\004\010" +
    "\u0145\001\001\000\004\010\u012f\001\001\000\014\004\u012e" +
    "\007\244\014\251\016\253\023\252\001\001\000\004\010" +
    "\u0122\001\001\000\004\010\u011e\001\001\000\004\010\u011a" +
    "\001\001\000\006\003\u0117\023\237\001\001\000\014\004" +
    "\u0116\007\244\014\251\016\253\023\252\001\001\000\014" +
    "\004\u0115\007\244\014\251\016\253\023\252\001\001\000" +
    "\014\004\u0114\007\244\014\251\016\253\023\252\001\001" +
    "\000\004\010\u0110\001\001\000\004\010\u010c\001\001\000" +
    "\014\004\u010b\007\244\014\251\016\253\023\252\001\001" +
    "\000\004\010\u0106\001\001\000\014\004\u0105\007\244\014" +
    "\251\016\253\023\252\001\001\000\004\010\264\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\300\001\001\000\004\021\273\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\277\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\316\001\001\000\004" +
    "\020\305\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\315\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\005\322\006\032\023\321\035\320\001\001\000\002\001" +
    "\001\000\012\005\322\006\032\023\321\035\324\001\001" +
    "\000\012\005\322\006\032\023\321\035\323\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\334\001\001\000\004\020\331\001" +
    "\001\000\002\001\001\000\004\010\333\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\u0104\001\001\000\004\022\376\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\u0103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\004\u0109\007\244\014\251\016\253\017\u0108\023\252\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\005\322\006" +
    "\032\023\321\035\u010e\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\005\322\006\032\023" +
    "\321\035\u0112\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\u0119\023\237\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\005\322\006\032\023" +
    "\321\035\u011c\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\005\322\006\032\023\321\035" +
    "\u0120\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\005\u0126\006\032\015\u0124\023\u0125\001" +
    "\001\000\002\001\001\000\012\005\u0126\006\032\015\u012a" +
    "\023\u0125\001\001\000\012\005\u0126\006\032\015\u0127\023" +
    "\u0125\001\001\000\002\001\001\000\012\005\u0126\006\032" +
    "\015\u0129\023\u0125\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\005\u0126\006\032\015\u012c\023\u0125\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\u0131\001\001\000\002\001\001" +
    "\000\004\010\u0133\001\001\000\002\001\001\000\004\012" +
    "\u0136\001\001\000\004\010\u013e\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\005\322\006\032\023\321\035" +
    "\u0139\001\001\000\002\001\001\000\004\012\u013b\001\001" +
    "\000\002\001\001\000\004\011\u013d\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\005\322\006\032\023\321" +
    "\035\u0140\001\001\000\002\001\001\000\004\012\u0142\001" +
    "\001\000\002\001\001\000\014\004\u0144\007\244\014\251" +
    "\016\253\023\252\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\005\322\006\032\023\321\035\u0147\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\u014d\006\032\023\u014c\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\u0150\023\237\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\u0153\023\237\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public ArrayList al = new ArrayList();
    public ArrayList erroresS = new ArrayList();
    public ArrayList erroresS1 = new ArrayList();


    /**Metodo al que se llama automáticamente ante algún error sintactico.*/
    public void syntax_error(Symbol s){
        String lexema = s.value.toString();
        int fila = s.right+1;
        int columna = s.left+1;
        
        System.err.println("Error en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador '"
        +s.value + "' no reconocido." );


        erroresS.add("Error en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador '"
        +s.value + "' no reconocido.\n");
    }

    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de
    errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String lexema = s.value.toString();
        int fila = s.right+1;
        int columna = s.left+1;

        System.err.println("Error en la Línea " + (s.right+1)+ " Columna "+(s.left+1)+". Identificador '" +
        s.value + "' no reconocido.");
        
        erroresS1.add("Error en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador '"
        +s.value + "' no reconocido.\n");
    }

    /*public Nodo getRaiz(){
        return action_obj.raiz;
    }*/

    


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {


    //Nodo raiz=null;
    Sintactico sin = new Sintactico();
    ArrayList corchetes = new ArrayList();
    

  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // PYC ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PYC",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // PYC ::= puntoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PYC",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // ARIT ::= parA EXP OPREL parC OPLOG 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARIT",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // OPLOG ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPLOG",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // OPLOG ::= not ARIT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPLOG",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // OPLOG ::= or ARIT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPLOG",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // OPLOG ::= and ARIT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPLOG",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // OPREL ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPREL",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // OPREL ::= noIgual EXP OPREL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPREL",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // OPREL ::= igualIgual EXP OPREL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPREL",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // OPREL ::= mayorIgual EXP OPREL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPREL",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // OPREL ::= menorIgual EXP OPREL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPREL",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // OPREL ::= mayorq EXP OPREL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPREL",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // OPREL ::= menorq EXP OPREL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPREL",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // OPASIG ::= igual 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPASIG",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // OPASIG ::= mulIgual 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPASIG",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // OPASIG ::= menosIgual 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPASIG",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // OPASIG ::= masIgual 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPASIG",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // TIPO ::= resChar 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // TIPO ::= resDouble 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // TIPO ::= resBoolean 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // TIPO ::= resString 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // TIPO ::= resInt 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // DECLARACION ::= EXP corA OPASIG CONTPRINT corC puntoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // DECLARACION ::= TIPO EXP corA OPASIG CONTPRINT corC puntoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // DECLARACION ::= EXP OPASIG CONTPRINT puntoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // DECLARACION ::= TIPO EXP OPASIG CONTPRINT puntoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // CONTPRINT ::= ARIT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTPRINT",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // CONTPRINT ::= OPLOG 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTPRINT",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // CONTPRINT ::= ACCESOVARIABLE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTPRINT",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // CONTPRINT ::= EXP OPREL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTPRINT",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // CONTPRINT ::= EXP mas ACCESOVARIABLE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTPRINT",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // ACCESOVARIABLE ::= resResult punto resClases punto resCant 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESOVARIABLE",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // ACCESOVARIABLE ::= resResult punto resClases punto resNom 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESOVARIABLE",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ACCESOVARIABLE ::= resResult punto resClases 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESOVARIABLE",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ACCESOVARIABLE ::= resResult punto resClases corA entero corC punto resNom 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESOVARIABLE",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ACCESOVARIABLE ::= resResult punto resMet punto resCant 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESOVARIABLE",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ACCESOVARIABLE ::= resResult punto resMet punto resNom 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESOVARIABLE",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ACCESOVARIABLE ::= resResult punto resMet 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESOVARIABLE",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ACCESOVARIABLE ::= resResult punto resMet corA entero corC punto resNom 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESOVARIABLE",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ACCESOVARIABLE ::= resResult punto resVar punto resCant 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESOVARIABLE",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ACCESOVARIABLE ::= resResult punto resVar punto resNom 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESOVARIABLE",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ACCESOVARIABLE ::= resResult punto resVar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESOVARIABLE",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ACCESOVARIABLE ::= resResult punto resVar corA entero corC punto resNom 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESOVARIABLE",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ACCESOVARIABLE ::= resResult punto resScore 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESOVARIABLE",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // FUNCPRINT ::= resPrint parA CONTPRINT parC puntoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCPRINT",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CUERPOCPR ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOCPR",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // CUERPOCPR ::= EXP CUERPOCPR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOCPR",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CUERPOCPR ::= FUNCPRINT CUERPOCPR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOCPR",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // CUERPOCPR ::= DECLARACION CUERPOCPR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOCPR",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // CUERPOCPR ::= ACCESOVARIABLE CUERPOCPR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOCPR",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // CPREPORT ::= dobleDolar CUERPOCPR PYC dobleDolar 
            {
              Object RESULT =null;
		parser.al.add("Compilacion exitosa\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CPREPORT",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // FUENTE ::= ver 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // FUENTE ::= tcm 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // FUENTE ::= tnr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // FUENTE ::= tms 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // FUENTE ::= swss 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // FUENTE ::= scri 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // FUENTE ::= serif 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // FUENTE ::= sanss 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // FUENTE ::= roman 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // FUENTE ::= pala 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // FUENTE ::= os 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // FUENTE ::= monos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // FUENTE ::= modern 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // FUENTE ::= minion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // FUENTE ::= impact 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // FUENTE ::= helve 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // FUENTE ::= georg 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // FUENTE ::= garam 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // FUENTE ::= frank 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // FUENTE ::= fanta 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // FUENTE ::= deco 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // FUENTE ::= curs 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // FUENTE ::= cour 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // FUENTE ::= csm 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // FUENTE ::= calib 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // FUENTE ::= bv 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // FUENTE ::= bl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // FUENTE ::= bg 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // FUENTE ::= bf 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // FUENTE ::= arial 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // FUENTE ::= archi 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // FUENTE ::= antiq 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // FUENTE ::= afb 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ALINEACION ::= centrado 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ALINEACION",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ALINEACION ::= derecha 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ALINEACION",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ALINEACION ::= izquierda 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ALINEACION",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // COLOR ::= morado 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLOR",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // COLOR ::= anaranjado 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLOR",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // COLOR ::= gris 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLOR",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // COLOR ::= verde 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLOR",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // COLOR ::= azul 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLOR",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // COLOR ::= amarillo 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLOR",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // COLOR ::= rojo 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLOR",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ATRIBUTOS ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ATRIBUTOS ::= fon igual comia FUENTE comia ATRIBUTOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ATRIBUTOS ::= alig igual comia ALINEACION comia ATRIBUTOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ATRIBUTOS ::= txtcol igual comia COLOR comia ATRIBUTOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ATRIBUTOS ::= col igual comia COLOR comia ATRIBUTOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ATRIBUTOS ::= fon igual cadena ATRIBUTOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ATRIBUTOS ::= alig igual cadena ATRIBUTOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ATRIBUTOS ::= txtcol igual cadena ATRIBUTOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ATRIBUTOS ::= col igual cadena ATRIBUTOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CUERPODIV ::= CUERPOBODY 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPODIV",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EDIV ::= divA ATRIBUTOS mayorq CUERPODIV divC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EDIV",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CUERPOP ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CUERPOP ::= CPREPORT CUERPOP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CUERPOP ::= CPREPORT br CUERPOP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CUERPOP ::= EXP CUERPOP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CUERPOP ::= EXP br CUERPOP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOP",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EP ::= pA ATRIBUTOS mayorq CUERPOP pC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EP",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ETDHA ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ETDHA",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ETDHA ::= thA mayorq CUERPO thC ETDHA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ETDHA",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ETDHA ::= tdA ATRIBUTOS mayorq CUERPO tdC ETDHA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ETDHA",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ETRA ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ETRA",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ETRA ::= trA ATRIBUTOS mayorq ETDHA trC ETRA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ETRA",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EHA ::= h6A ATRIBUTOS mayorq CUERPO h6C 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EHA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EHA ::= h5A ATRIBUTOS mayorq CUERPO h5C 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EHA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EHA ::= h4A ATRIBUTOS mayorq CUERPO h4C 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EHA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EHA ::= h3A ATRIBUTOS mayorq CUERPO h3C 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EHA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EHA ::= h2A ATRIBUTOS mayorq CUERPO h2C 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EHA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EHA ::= h1A ATRIBUTOS mayorq CUERPO h1C 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EHA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VALOR ::= caracter 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // VALOR ::= iden 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VALOR ::= bool 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VALOR ::= cadena 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VALOR ::= decimal 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // VALOR ::= entero 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXP ::= VALOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXP ::= VALOR EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXP ::= VALOR decre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXP ::= VALOR incre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXP ::= parA VALOR modulo EXP parC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXP ::= parA VALOR div EXP parC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXP ::= parA VALOR mul EXP parC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXP ::= parA VALOR menos EXP parC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXP ::= parA VALOR mas EXP parC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXP ::= parA VALOR parC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXP ::= EXP modulo EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXP ::= EXP div EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXP ::= EXP mul EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXP ::= EXP menos EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXP ::= EXP mas EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CUERPO ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CUERPO ::= CPREPORT CUERPO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CUERPO ::= EXP CUERPO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CUERPOBODY ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOBODY",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CUERPOBODY ::= CPREPORT CUERPOBODY 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOBODY",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CUERPOBODY ::= EDIV CUERPOBODY 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOBODY",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CUERPOBODY ::= EP CUERPOBODY 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOBODY",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CUERPOBODY ::= hr CUERPOBODY 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOBODY",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CUERPOBODY ::= br CUERPOBODY 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOBODY",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CUERPOBODY ::= tableA ATRIBUTOS mayorq ETRA tableC CUERPOBODY 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOBODY",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CUERPOBODY ::= EHA CUERPOBODY 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOBODY",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CUERPOHTML ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOHTML",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CUERPOHTML ::= CPREPORT CUERPOHTML 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOHTML",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CUERPOHTML ::= bodyA CUERPOBODY CUERPOHTML bodyC CUERPOHTML 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOHTML",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CUERPOHTML ::= headA titleA CPREPORT titleC headC CUERPOHTML 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOHTML",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CUERPOHTML ::= headA titleA EXP titleC headC CUERPOHTML 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOHTML",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= CPREPORT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= htmlA CUERPOHTML htmlC 
            {
              Object RESULT =null;
		parser.al.add("Compilacion exitosa\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

