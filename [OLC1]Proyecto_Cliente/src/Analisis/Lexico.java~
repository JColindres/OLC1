/* The following code was generated by JFlex 1.6.1 */


package Analisis;
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java.util.ArrayList;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/Analisis/Scanner.jflex</tt>
 */
public class Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMENTARIO1 = 2;
  public static final int COMENTARIO2 = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\101\1\4\1\102\1\101\1\101\22\0\1\7\1\64\1\3"+
    "\1\0\1\76\1\62\1\77\1\10\1\70\1\71\1\61\1\60\1\65"+
    "\1\56\1\2\1\31\1\1\1\23\1\34\1\35\1\36\1\37\1\40"+
    "\3\1\1\67\1\66\1\24\1\63\1\30\2\0\1\15\1\32\1\44"+
    "\1\14\1\12\1\17\1\46\1\25\1\42\1\50\1\55\1\20\1\27"+
    "\1\47\1\16\1\43\1\53\1\13\1\22\1\26\1\52\1\11\1\57"+
    "\1\45\1\33\1\51\1\72\1\0\1\73\1\0\1\6\1\0\1\15"+
    "\1\32\1\44\1\14\1\12\1\17\1\46\1\25\1\42\1\50\1\55"+
    "\1\20\1\27\1\47\1\16\1\43\1\53\1\13\1\22\1\26\1\52"+
    "\1\11\1\57\1\45\1\33\1\51\1\74\1\100\1\75\7\0\1\102"+
    "\113\0\1\5\37\0\1\5\76\0\2\41\115\0\1\21\u1ea8\0\1\102"+
    "\1\102\u0100\0\1\54\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\1\1\4\1\5\1\1"+
    "\6\5\1\1\1\5\1\6\3\5\1\7\1\10\1\5"+
    "\1\1\4\5\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\3\1\1\30\1\1\1\31\1\32\1\0\1\33"+
    "\1\0\17\5\5\0\5\5\3\0\1\34\1\0\1\35"+
    "\1\36\2\5\1\0\3\5\1\0\1\5\1\37\3\5"+
    "\3\0\15\5\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\5\1\0"+
    "\6\5\1\0\2\5\1\0\13\5\6\0\6\5\2\0"+
    "\1\54\1\0\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\0\1\64\6\0\1\65\1\0\2\5\1\0"+
    "\5\5\1\0\4\5\1\0\1\66\1\0\1\5\1\66"+
    "\1\5\1\0\12\5\1\0\3\5\1\0\2\5\1\67"+
    "\3\5\1\0\2\5\1\0\4\5\1\0\1\5\1\70"+
    "\2\5\1\0\2\5\1\71\6\0\6\5\1\72\23\0"+
    "\1\73\1\0\2\5\1\0\5\5\1\0\1\5\1\0"+
    "\4\5\2\0\2\5\1\0\3\5\1\0\2\5\1\0"+
    "\2\5\1\74\1\0\2\5\2\75\1\5\1\76\1\5"+
    "\1\0\1\5\1\77\3\5\2\100\1\0\1\5\2\101"+
    "\1\0\3\5\1\0\2\5\1\0\1\5\2\102\1\5"+
    "\1\103\3\0\1\104\1\105\1\103\2\5\1\104\1\105"+
    "\6\0\1\106\1\0\1\107\1\110\1\111\1\112\1\113"+
    "\1\114\1\115\1\0\1\116\3\0\2\5\2\117\3\5"+
    "\1\0\1\5\1\0\1\5\2\0\3\5\1\0\2\5"+
    "\2\0\2\5\2\120\2\5\1\0\1\5\1\121\1\0"+
    "\1\5\1\0\1\5\1\0\5\5\2\122\2\5\1\123"+
    "\1\0\1\5\1\0\3\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\124\1\125\1\124"+
    "\1\125\1\126\1\127\1\130\1\0\1\131\5\0\1\132"+
    "\2\5\1\0\2\5\1\133\1\134\1\0\1\5\2\135"+
    "\2\0\3\5\1\0\2\5\1\136\1\0\1\136\1\5"+
    "\1\0\2\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\3\5\1\137\1\140\1\5\1\0"+
    "\1\5\1\0\3\5\2\141\1\0\1\5\1\0\1\5"+
    "\2\142\1\0\1\143\1\144\1\145\2\0\1\146\1\0"+
    "\2\5\1\0\2\5\1\0\1\5\2\0\2\5\1\147"+
    "\1\0\2\5\1\0\1\5\1\0\2\5\2\150\1\0"+
    "\1\5\2\151\2\152\2\153\1\5\1\0\1\5\1\0"+
    "\1\5\2\154\2\5\1\0\1\5\2\155\1\0\1\156"+
    "\1\157\1\0\2\5\1\0\2\5\1\0\1\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\5\1\0\1\5\2\160"+
    "\1\161\1\0\1\5\1\162\1\0\1\5\2\163\1\164"+
    "\1\5\2\165\1\0\2\166\1\167\1\0\1\5\1\170"+
    "\2\171\2\0\2\5\1\0\1\5\2\172\2\173\1\0"+
    "\1\5\2\174\1\175\1\176\1\0\1\5\1\0\1\177"+
    "\1\5\1\177\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\2\200\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\2\201"+
    "\1\0\1\5\2\202\2\203";

  private static int [] zzUnpackAction() {
    int [] result = new int[645];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\311\0\u014f\0\u0192"+
    "\0\u01d5\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0367\0\u03aa"+
    "\0\u03ed\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u053c\0\u057f\0\311"+
    "\0\u05c2\0\u0605\0\u0648\0\u068b\0\u06ce\0\u0711\0\u0754\0\u0797"+
    "\0\u07da\0\311\0\u081d\0\u0860\0\311\0\311\0\311\0\311"+
    "\0\311\0\311\0\311\0\311\0\311\0\u08a3\0\u08e6\0\u0929"+
    "\0\311\0\u096c\0\311\0\u09af\0\u014f\0\311\0\u09f2\0\u0a35"+
    "\0\u0a78\0\u0abb\0\u0afe\0\u0b41\0\u0b84\0\u0bc7\0\u0c0a\0\u0c4d"+
    "\0\u0c90\0\u0cd3\0\u0d16\0\u0d59\0\u0d9c\0\u0ddf\0\u0e22\0\u0e65"+
    "\0\u0ea8\0\u0eeb\0\u0f2e\0\u0f71\0\u0fb4\0\u0ff7\0\u103a\0\u107d"+
    "\0\u10c0\0\u1103\0\u1146\0\u1189\0\u11cc\0\311\0\311\0\u120f"+
    "\0\u1252\0\u1295\0\u12d8\0\u131b\0\u135e\0\u13a1\0\u13e4\0\311"+
    "\0\u1427\0\u146a\0\u14ad\0\u14f0\0\u1533\0\u1576\0\u15b9\0\u15fc"+
    "\0\u163f\0\u1682\0\u16c5\0\u1708\0\u174b\0\u178e\0\u17d1\0\u1814"+
    "\0\u1857\0\u189a\0\u18dd\0\311\0\311\0\311\0\311\0\311"+
    "\0\311\0\311\0\311\0\311\0\311\0\311\0\311\0\u1920"+
    "\0\u1963\0\u19a6\0\u19e9\0\u1a2c\0\u1a6f\0\u1ab2\0\u1af5\0\u1b38"+
    "\0\u1b7b\0\u1bbe\0\u1c01\0\u1c44\0\u1c87\0\u1cca\0\u1d0d\0\u1d50"+
    "\0\u1d93\0\u1dd6\0\u1e19\0\u1e5c\0\u1e9f\0\u1ee2\0\u1f25\0\u1f68"+
    "\0\u1fab\0\u1fee\0\u2031\0\u2074\0\u20b7\0\u20fa\0\u213d\0\u2180"+
    "\0\u21c3\0\u2206\0\u2249\0\u228c\0\311\0\u22cf\0\311\0\311"+
    "\0\311\0\311\0\311\0\311\0\311\0\u2312\0\311\0\u2355"+
    "\0\u2398\0\u23db\0\u241e\0\u2461\0\u24a4\0\311\0\u24e7\0\u252a"+
    "\0\u256d\0\u25b0\0\u25f3\0\u2636\0\u2679\0\u26bc\0\u26ff\0\u2742"+
    "\0\u2785\0\u27c8\0\u280b\0\u284e\0\u2891\0\311\0\u28d4\0\u2917"+
    "\0\u01d5\0\u295a\0\u299d\0\u29e0\0\u2a23\0\u2a66\0\u2aa9\0\u2aec"+
    "\0\u2b2f\0\u2b72\0\u2bb5\0\u2bf8\0\u2c3b\0\u2c7e\0\u2cc1\0\u2d04"+
    "\0\u2d47\0\u2d8a\0\u2dcd\0\u2e10\0\u01d5\0\u2e53\0\u2e96\0\u2ed9"+
    "\0\u2f1c\0\u2f5f\0\u2fa2\0\u2fe5\0\u3028\0\u306b\0\u30ae\0\u30f1"+
    "\0\u3134\0\u3177\0\u01d5\0\u31ba\0\u31fd\0\u3240\0\u3283\0\u32c6"+
    "\0\u01d5\0\u3309\0\u334c\0\u338f\0\u33d2\0\u3415\0\u3458\0\u349b"+
    "\0\u34de\0\u3521\0\u3564\0\u35a7\0\u35ea\0\311\0\u362d\0\u3670"+
    "\0\u36b3\0\u36f6\0\u3739\0\u377c\0\u37bf\0\u3802\0\u3845\0\u3888"+
    "\0\u38cb\0\u390e\0\u3951\0\u3994\0\u39d7\0\u3a1a\0\u3a5d\0\u3aa0"+
    "\0\u3ae3\0\311\0\u3b26\0\u3b69\0\u3bac\0\u3bef\0\u3c32\0\u3c75"+
    "\0\u3cb8\0\u3cfb\0\u3d3e\0\u3d81\0\u3dc4\0\u3e07\0\u3e4a\0\u3e8d"+
    "\0\u3ed0\0\u3f13\0\u3f56\0\u3f99\0\u3fdc\0\u401f\0\u4062\0\u40a5"+
    "\0\u40e8\0\u412b\0\u416e\0\u41b1\0\u41f4\0\u4237\0\u427a\0\u42bd"+
    "\0\u01d5\0\u4300\0\u4343\0\u4386\0\311\0\u01d5\0\u43c9\0\u01d5"+
    "\0\u440c\0\u444f\0\u4492\0\u01d5\0\u44d5\0\u4518\0\u455b\0\311"+
    "\0\u01d5\0\u459e\0\u45e1\0\311\0\u01d5\0\u4624\0\u4667\0\u46aa"+
    "\0\u46ed\0\u4730\0\u4773\0\u47b6\0\u47f9\0\u483c\0\311\0\u01d5"+
    "\0\u487f\0\311\0\u48c2\0\u4905\0\u4948\0\311\0\311\0\u01d5"+
    "\0\u498b\0\u49ce\0\u01d5\0\u01d5\0\u4a11\0\u4a54\0\u4a97\0\u4ada"+
    "\0\u4b1d\0\u4b60\0\311\0\u4ba3\0\311\0\311\0\311\0\311"+
    "\0\311\0\311\0\311\0\u4be6\0\311\0\u4c29\0\u4c6c\0\u4caf"+
    "\0\u4cf2\0\u4d35\0\u4d78\0\u4dbb\0\u4dfe\0\u4e41\0\u4e84\0\u4ec7"+
    "\0\u4f0a\0\u4f4d\0\u4f90\0\u4fd3\0\u5016\0\u5059\0\u509c\0\u50df"+
    "\0\u5122\0\u5165\0\u51a8\0\u51eb\0\u522e\0\u5271\0\u52b4\0\311"+
    "\0\u01d5\0\u52f7\0\u533a\0\u537d\0\u53c0\0\u01d5\0\u5403\0\u5446"+
    "\0\u5489\0\u54cc\0\u550f\0\u5552\0\u5595\0\u55d8\0\u561b\0\u565e"+
    "\0\311\0\u01d5\0\u56a1\0\u56e4\0\u01d5\0\u5727\0\u576a\0\u57ad"+
    "\0\u57f0\0\u5833\0\u5876\0\u58b9\0\u58fc\0\u593f\0\u5982\0\u59c5"+
    "\0\u5a08\0\u5a4b\0\u5a8e\0\u5ad1\0\311\0\311\0\u01d5\0\u01d5"+
    "\0\311\0\311\0\311\0\u5b14\0\311\0\u5b57\0\u5b9a\0\u5bdd"+
    "\0\u5c20\0\u5c63\0\311\0\u5ca6\0\u5ce9\0\u5d2c\0\u5d6f\0\u5db2"+
    "\0\u01d5\0\u01d5\0\u5df5\0\u5e38\0\311\0\u01d5\0\u5e7b\0\u5ebe"+
    "\0\u5f01\0\u5f44\0\u5f87\0\u5fca\0\u600d\0\u6050\0\311\0\u6093"+
    "\0\u01d5\0\u60d6\0\u6119\0\u615c\0\u619f\0\u61e2\0\u6225\0\u6268"+
    "\0\u62ab\0\u62ee\0\u6331\0\u6374\0\u63b7\0\u63fa\0\u643d\0\u6480"+
    "\0\u64c3\0\u01d5\0\u01d5\0\u6506\0\u6549\0\u658c\0\u65cf\0\u6612"+
    "\0\u6655\0\u6698\0\311\0\u01d5\0\u66db\0\u671e\0\u6761\0\u67a4"+
    "\0\311\0\u01d5\0\u67e7\0\311\0\311\0\311\0\u682a\0\u686d"+
    "\0\311\0\u68b0\0\u68f3\0\u6936\0\u6979\0\u69bc\0\u69ff\0\u6a42"+
    "\0\u6a85\0\u6ac8\0\u6b0b\0\u6b4e\0\u6b91\0\u01d5\0\u6bd4\0\u6c17"+
    "\0\u6c5a\0\u6c9d\0\u6ce0\0\u6d23\0\u6d66\0\u6da9\0\311\0\u01d5"+
    "\0\u6dec\0\u6e2f\0\311\0\u01d5\0\311\0\u01d5\0\311\0\u01d5"+
    "\0\u6e72\0\u6eb5\0\u6ef8\0\u6f3b\0\u6f7e\0\311\0\u01d5\0\u6fc1"+
    "\0\u7004\0\u7047\0\u708a\0\311\0\u01d5\0\u70cd\0\311\0\311"+
    "\0\u7110\0\u7153\0\u7196\0\u71d9\0\u721c\0\u725f\0\u72a2\0\u72e5"+
    "\0\u7328\0\u736b\0\u73ae\0\u73f1\0\u7434\0\u7477\0\u74ba\0\u74fd"+
    "\0\u7540\0\u7583\0\311\0\u01d5\0\u01d5\0\u75c6\0\u7609\0\u01d5"+
    "\0\u764c\0\u768f\0\311\0\u01d5\0\u01d5\0\u76d2\0\311\0\u01d5"+
    "\0\u7715\0\311\0\u01d5\0\u01d5\0\u7758\0\u779b\0\u01d5\0\311"+
    "\0\u01d5\0\u77de\0\u7821\0\u7864\0\u78a7\0\u78ea\0\u792d\0\311"+
    "\0\u01d5\0\311\0\u01d5\0\u7970\0\u79b3\0\311\0\u01d5\0\u01d5"+
    "\0\311\0\u79f6\0\u7a39\0\u7a7c\0\311\0\u7abf\0\u01d5\0\u7b02"+
    "\0\u7b45\0\u7b88\0\u7bcb\0\u7c0e\0\u7c51\0\u7c94\0\u7cd7\0\311"+
    "\0\u01d5\0\u7d1a\0\u7d5d\0\u7da0\0\u7de3\0\u7e26\0\u7e69\0\u7eac"+
    "\0\u7eef\0\u7f32\0\u7f75\0\u7fb8\0\u7ffb\0\311\0\u01d5\0\u803e"+
    "\0\u8081\0\311\0\u01d5\0\311\0\u01d5";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[645];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\4\1\10"+
    "\1\12\1\13\1\11\1\14\1\15\1\16\1\17\1\20"+
    "\1\11\1\21\1\22\1\5\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\11\5\5\1\32\1\33\1\34"+
    "\1\35\1\11\1\36\5\11\1\4\1\11\1\37\1\11"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\10\1\0\30\61\1\4\1\62\55\61\1\63"+
    "\76\61\104\0\1\5\1\64\20\0\1\5\10\0\5\5"+
    "\42\0\3\65\2\66\76\65\4\0\1\10\2\0\1\10"+
    "\71\0\1\10\2\0\1\11\3\0\3\11\1\0\10\11"+
    "\1\0\2\11\1\0\3\11\2\0\7\11\1\0\12\11"+
    "\1\0\1\11\1\0\1\11\23\0\103\67\1\0\1\11"+
    "\3\0\3\11\1\0\1\11\1\70\6\11\1\0\2\11"+
    "\1\0\3\11\2\0\7\11\1\0\12\11\1\0\1\11"+
    "\1\0\1\11\24\0\1\11\3\0\3\11\1\0\1\11"+
    "\1\71\3\11\1\72\2\11\1\0\2\11\1\0\3\11"+
    "\2\0\7\11\1\0\12\11\1\0\1\11\1\0\1\11"+
    "\24\0\1\11\3\0\3\11\1\0\1\11\1\73\3\11"+
    "\1\74\2\11\1\0\2\11\1\0\3\11\2\0\7\11"+
    "\1\0\12\11\1\0\1\11\1\0\1\11\24\0\1\11"+
    "\3\0\3\11\1\0\2\11\1\75\4\11\1\76\1\0"+
    "\2\11\1\0\2\11\1\77\2\0\7\11\1\0\4\11"+
    "\1\100\1\101\1\11\1\102\2\11\1\0\1\11\1\0"+
    "\1\11\24\0\1\11\3\0\3\11\1\0\10\11\1\0"+
    "\2\11\1\0\3\11\2\0\7\11\1\0\1\11\1\103"+
    "\10\11\1\0\1\11\1\0\1\11\24\0\1\11\3\0"+
    "\3\11\1\0\2\11\1\104\1\11\1\105\1\106\2\11"+
    "\1\0\2\11\1\0\3\11\2\0\7\11\1\0\12\11"+
    "\1\0\1\11\1\0\1\11\35\0\1\107\2\0\1\110"+
    "\10\0\1\111\15\0\1\112\12\0\1\113\24\0\1\11"+
    "\3\0\3\11\1\0\1\11\1\114\2\11\1\115\3\11"+
    "\1\0\2\11\1\0\1\11\1\116\1\11\2\0\7\11"+
    "\1\0\2\11\1\117\7\11\1\0\1\11\1\0\1\120"+
    "\37\0\1\121\10\0\1\122\1\123\2\0\1\124\1\125"+
    "\10\0\1\126\17\0\1\127\20\0\1\11\3\0\3\11"+
    "\1\0\1\11\1\130\6\11\1\0\2\11\1\0\3\11"+
    "\2\0\7\11\1\0\12\11\1\0\1\11\1\0\1\11"+
    "\24\0\1\11\3\0\3\11\1\0\1\11\1\131\6\11"+
    "\1\0\2\11\1\0\3\11\2\0\7\11\1\132\1\133"+
    "\11\11\1\0\1\11\1\0\1\134\24\0\1\11\3\0"+
    "\3\11\1\0\5\11\1\135\2\11\1\0\2\11\1\0"+
    "\3\11\2\0\7\11\1\136\1\137\11\11\1\0\1\11"+
    "\1\0\1\11\106\0\1\140\20\0\1\11\3\0\3\11"+
    "\1\0\4\11\1\141\1\142\1\11\1\143\1\0\2\11"+
    "\1\0\3\11\2\0\7\11\1\0\12\11\1\0\1\11"+
    "\1\0\1\11\52\0\1\144\17\0\1\145\1\0\1\146"+
    "\32\0\1\11\3\0\3\11\1\0\10\11\1\0\2\11"+
    "\1\0\2\11\1\147\2\0\7\11\1\0\5\11\1\150"+
    "\1\11\1\151\2\11\1\0\1\11\1\0\1\11\24\0"+
    "\1\11\3\0\3\11\1\0\2\11\1\152\1\11\1\153"+
    "\3\11\1\0\2\11\1\0\3\11\2\0\7\11\1\0"+
    "\12\11\1\0\1\11\1\0\1\11\24\0\1\11\3\0"+
    "\3\11\1\0\1\11\1\154\2\11\1\155\1\156\2\11"+
    "\1\0\2\11\1\0\1\157\2\11\2\0\7\11\1\0"+
    "\10\11\1\160\1\11\1\0\1\11\1\0\1\11\24\0"+
    "\1\11\3\0\3\11\1\0\1\11\1\161\1\162\1\11"+
    "\1\163\3\11\1\0\2\11\1\0\3\11\2\0\7\11"+
    "\1\0\12\11\1\0\1\11\1\0\1\11\53\0\1\164"+
    "\25\0\1\165\4\0\1\166\77\0\1\167\2\0\1\170"+
    "\102\0\1\171\102\0\1\172\102\0\1\173\115\0\1\174"+
    "\103\0\1\175\103\0\1\176\32\0\1\63\53\0\1\64"+
    "\21\0\1\64\10\0\5\64\52\0\1\177\73\0\1\11"+
    "\3\0\3\11\1\0\2\11\1\200\5\11\1\0\2\11"+
    "\1\0\3\11\2\0\7\11\1\0\12\11\1\0\1\11"+
    "\1\0\1\11\24\0\1\11\3\0\3\11\1\0\10\11"+
    "\1\201\1\202\1\11\1\0\3\11\2\0\7\11\1\0"+
    "\12\11\1\0\1\11\1\0\1\11\24\0\1\11\3\0"+
    "\3\11\1\0\10\11\1\0\2\11\1\0\2\11\1\203"+
    "\2\0\7\11\1\0\6\11\1\204\3\11\1\0\1\11"+
    "\1\0\1\11\24\0\1\11\3\0\3\11\1\0\2\11"+
    "\1\205\5\11\1\0\2\11\1\0\3\11\2\0\7\11"+
    "\1\0\2\11\1\206\7\11\1\0\1\11\1\0\1\11"+
    "\24\0\1\11\3\0\3\11\1\0\10\11\1\0\2\11"+
    "\1\0\3\11\2\0\7\11\1\0\10\11\1\207\1\11"+
    "\1\0\1\11\1\0\1\11\24\0\1\11\3\0\3\11"+
    "\1\0\10\11\1\0\2\11\1\0\3\11\2\0\7\11"+
    "\1\210\1\211\1\11\1\212\7\11\1\0\1\11\1\0"+
    "\1\11\24\0\1\11\3\0\3\11\1\0\10\11\1\0"+
    "\2\11\1\0\3\11\2\0\7\11\1\213\1\214\11\11"+
    "\1\0\1\11\1\0\1\11\24\0\1\11\3\0\3\11"+
    "\1\0\4\11\1\215\3\11\1\0\2\11\1\0\3\11"+
    "\2\0\7\11\1\0\12\11\1\0\1\11\1\0\1\11"+
    "\24\0\1\11\3\0\3\11\1\0\1\11\1\216\6\11"+
    "\1\0\2\11\1\0\3\11\2\0\7\11\1\0\12\11"+
    "\1\0\1\11\1\0\1\11\24\0\1\11\3\0\3\11"+
    "\1\0\4\11\1\217\3\11\1\0\2\11\1\0\1\11"+
    "\1\220\1\11\2\0\7\11\1\0\12\11\1\0\1\11"+
    "\1\0\1\11\24\0\1\11\3\0\3\11\1\0\10\11"+
    "\1\0\2\11\1\0\3\11\2\0\7\11\1\0\10\11"+
    "\1\221\1\11\1\0\1\11\1\0\1\11\24\0\1\11"+
    "\3\0\3\11\1\0\1\11\1\222\6\11\1\0\2\11"+
    "\1\0\3\11\2\0\7\11\1\0\12\11\1\0\1\11"+
    "\1\0\1\11\24\0\1\11\3\0\3\11\1\0\4\11"+
    "\1\223\3\11\1\0\2\11\1\0\3\11\2\0\7\11"+
    "\1\0\12\11\1\0\1\11\1\0\1\11\24\0\1\11"+
    "\3\0\3\11\1\0\7\11\1\224\1\0\2\11\1\0"+
    "\3\11\2\0\7\11\1\0\5\11\1\225\4\11\1\0"+
    "\1\11\1\0\1\11\24\0\1\11\3\0\3\11\1\0"+
    "\10\11\1\0\2\11\1\0\3\11\2\0\7\11\1\0"+
    "\5\11\1\226\4\11\1\0\1\11\1\0\1\11\36\0"+
    "\1\227\136\0\1\230\46\0\1\231\102\0\1\232\2\0"+
    "\1\233\125\0\2\234\41\0\1\11\3\0\3\11\1\0"+
    "\2\11\1\235\5\11\1\0\2\11\1\0\3\11\2\0"+
    "\7\11\1\0\12\11\1\0\1\11\1\0\1\11\24\0"+
    "\1\11\3\0\3\11\1\0\10\11\1\0\2\11\1\0"+
    "\3\11\2\0\7\11\1\0\5\11\1\236\4\11\1\0"+
    "\1\11\1\0\1\11\24\0\1\11\3\0\3\11\1\0"+
    "\2\11\1\237\5\11\1\0\2\11\1\0\3\11\2\0"+
    "\7\11\1\0\12\11\1\0\1\11\1\0\1\11\24\0"+
    "\1\11\3\0\3\11\1\0\2\11\1\240\2\11\1\241"+
    "\2\11\1\0\2\11\1\0\3\11\2\0\7\11\1\0"+
    "\12\11\1\0\1\11\1\0\1\11\24\0\1\11\3\0"+
    "\3\11\1\0\10\11\1\0\2\11\1\0\3\11\2\0"+
    "\7\11\1\234\1\242\11\11\1\0\1\11\1\0\1\11"+
    "\64\0\2\243\52\0\1\244\10\0\1\245\2\0\1\246"+
    "\5\0\1\247\1\250\1\251\1\252\1\253\55\0\1\254"+
    "\1\255\1\256\7\0\1\257\13\0\2\260\54\0\1\261"+
    "\10\0\1\262\1\263\3\0\1\264\10\0\1\265\52\0"+
    "\1\266\2\0\1\267\65\0\1\11\3\0\3\11\1\0"+
    "\7\11\1\270\1\0\2\11\1\0\3\11\2\0\7\11"+
    "\1\0\12\11\1\0\1\11\1\0\1\11\24\0\1\11"+
    "\3\0\3\11\1\0\10\11\1\0\2\11\1\0\3\11"+
    "\2\0\7\11\1\0\3\11\1\271\6\11\1\0\1\11"+
    "\1\0\1\11\52\0\1\272\54\0\1\11\3\0\3\11"+
    "\1\0\10\11\1\0\2\11\1\0\2\11\1\273\2\0"+
    "\7\11\1\0\12\11\1\0\1\11\1\0\1\11\24\0"+
    "\1\11\3\0\2\11\1\274\1\0\10\11\1\0\2\11"+
    "\1\0\3\11\2\0\7\11\1\0\12\11\1\0\1\11"+
    "\1\0\1\11\24\0\1\11\3\0\3\11\1\0\2\11"+
    "\1\275\1\276\4\11\1\0\2\11\1\0\3\11\2\0"+
    "\7\11\1\0\5\11\1\277\4\11\1\0\1\11\1\0"+
    "\1\11\72\0\1\300\34\0\1\11\3\0\3\11\1\0"+
    "\10\11\1\0\2\11\1\0\3\11\2\0\7\11\1\0"+
    "\5\11\1\301\4\11\1\0\1\11\1\0\1\11\24\0"+
    "\1\11\3\0\3\11\1\0\10\11\1\0\2\11\1\0"+
    "\3\11\2\0\7\11\1\0\5\11\1\302\4\11\1\0"+
    "\1\11\1\0\1\11\24\0\1\11\3\0\3\11\1\0"+
    "\5\11\1\303\2\11\1\0\2\11\1\0\3\11\2\0"+
    "\7\11\1\0\12\11\1\0\1\11\1\0\1\11\24\0"+
    "\1\11\3\0\3\11\1\0\4\11\1\304\3\11\1\0"+
    "\2\11\1\0\3\11\2\0\7\11\1\0\12\11\1\0"+
    "\1\11\1\0\1\11\66\0\1\305\65\0\1\306\127\0"+
    "\1\307\30\0\1\11\3\0\3\11\1\0\10\11\1\0"+
    "\2\11\1\0\3\11\2\0\7\11\1\0\1\11\1\310"+
    "\10\11\1\0\1\11\1\0\1\11\24\0\1\11\3\0"+
    "\3\11\1\0\10\11\1\0\2\11\1\0\1\11\1\311"+
    "\1\11\2\0\7\11\1\0\12\11\1\0\1\11\1\0"+
    "\1\11\24\0\1\11\3\0\3\11\1\0\10\11\1\0"+
    "\2\11\1\0\3\11\2\0\7\11\1\0\11\11\1\312"+
    "\1\0\1\11\1\0\1\11\24\0\1\11\3\0\3\11"+
    "\1\0\10\11\1\0\2\11\1\0\3\11\2\0\7\11"+
    "\1\313\1\314\11\11\1\0\1\11\1\0\1\11\24\0"+
    "\1\11\3\0\3\11\1\0\7\11\1\315\1\0\2\11"+
    "\1\0\3\11\2\0\7\11\1\0\12\11\1\0\1\11"+
    "\1\0\1\11\24\0\1\11\3\0\3\11\1\0\10\11"+
    "\1\0\2\11\1\0\3\11\2\0\7\11\1\0\5\11"+
    "\1\316\4\11\1\0\1\11\1\0\1\11\24\0\1\11"+
    "\3\0\3\11\1\0\7\11\1\317\1\0\2\11\1\0"+
    "\3\11\2\0\7\11\1\0\12\11\1\0\1\11\1\0"+
    "\1\11\24\0\1\11\3\0\3\11\1\0\7\11\1\320"+
    "\1\0\2\11\1\0\2\11\1\321\2\0\7\11\1\0"+
    "\10\11\1\322\1\11\1\0\1\11\1\0\1\11\24\0"+
    "\1\11\3\0\3\11\1\0\4\11\1\323\3\11\1\0"+
    "\2\11\1\0\3\11\2\0\7\11\1\0\12\11\1\0"+
    "\1\11\1\0\1\11\24\0\1\11\3\0\3\11\1\0"+
    "\2\11\1\324\5\11\1\0\2\11\1\0\3\11\2\0"+
    "\7\11\1\0\12\11\1\0\1\11\1\0\1\11\24\0"+
    "\1\11\3\0\3\11\1\0\5\11\1\325\2\11\1\0"+
    "\2\11\1\0\3\11\2\0\7\11\1\0\12\11\1\0"+
    "\1\11\1\0\1\11\24\0\1\11\3\0\3\11\1\0"+
    "\10\11\1\0\2\11\1\0\3\11\2\0\7\11\1\326"+
    "\1\327\11\11\1\0\1\11\1\0\1\11\24\0\1\11"+
    "\3\0\3\11\1\0\2\11\1\330\5\11\1\0\2\11"+
    "\1\0\3\11\2\0\7\11\1\0\12\11\1\0\1\11"+
    "\1\0\1\11\24\0\1\11\3\0\3\11\1\0\3\11"+
    "\1\331\4\11\1\0\2\11\1\0\3\11\2\0\7\11"+
    "\1\0\12\11\1\0\1\11\1\0\1\11\75\0\1\332"+
    "\31\0\1\11\3\0\3\11\1\0\10\11\1\0\2\11"+
    "\1\0\3\11\2\0\7\11\1\0\10\11\1\333\1\11"+
    "\1\0\1\11\1\0\1\11\24\0\1\11\3\0\3\11"+
    "\1\0\4\11\1\334\3\11\1\0\2\11\1\0\3\11"+
    "\2\0\7\11\1\0\12\11\1\0\1\11\1\0\1\11"+
    "\24\0\1\11\3\0\3\11\1\0\5\11\1\335\2\11"+
    "\1\0\2\11\1\0\3\11\2\0\7\11\1\0\12\11"+
    "\1\0\1\11\1\0\1\11\24\0\1\11\3\0\3\11"+
    "\1\0\1\11\1\336\6\11\1\0\2\11\1\0\3\11"+
    "\2\0\7\11\1\0\12\11\1\0\1\11\1\0\1\11"+
    "\24\0\1\11\3\0\3\11\1\0\5\11\1\337\2\11"+
    "\1\0\2\11\1\0\3\11\2\0\7\11\1\0\12\11"+
    "\1\0\1\11\1\0\1\11\24\0\1\11\3\0\3\11"+
    "\1\0\10\11\1\0\2\11\1\0\3\11\2\0\1\340"+
    "\6\11\1\0\12\11\1\0\1\11\1\0\1\11\40\0"+
    "\1\341\66\0\1\11\3\0\3\11\1\0\4\11\1\342"+
    "\3\11\1\0\2\11\1\0\3\11\2\0\7\11\1\0"+
    "\12\11\1\0\1\11\1\0\1\11\24\0\1\11\3\0"+
    "\3\11\1\0\10\11\1\0\2\11\1\0\1\343\2\11"+
    "\2\0\7\11\1\0\12\11\1\0\1\11\1\0\1\11"+
    "\71\0\1\344\35\0\1\11\3\0\3\11\1\0\10\11"+
    "\1\0\2\11\1\0\3\11\2\0\7\11\1\0\4\11"+
    "\1\345\5\11\1\0\1\11\1\0\1\11\24\0\1\11"+
    "\3\0\3\11\1\0\2\11\1\346\5\11\1\0\2\11"+
    "\1\0\3\11\2\0\7\11\1\0\12\11\1\0\1\11"+
    "\1\0\1\11\24\0\1\11\3\0\3\11\1\0\10\11"+
    "\1\0\2\11\1\0\3\11\2\0\7\11\1\0\5\11"+
    "\1\347\4\11\1\0\1\11\1\0\1\11\24\0\1\11"+
    "\3\0\3\11\1\0\2\11\1\350\5\11\1\0\2\11"+
    "\1\0\3\11\2\0\7\11\1\0\12\11\1\0\1\11"+
    "\1\0\1\11\24\0\1\11\3\0\3\11\1\0\10\11"+
    "\1\0\2\11\1\0\3\11\2\0\7\11\1\351\1\352"+
    "\11\11\1\0\1\11\1\0\1\11\24\0\1\11\3\0"+
    "\3\11\1\0\7\11\1\353\1\0\2\11\1\0\3\11"+
    "\2\0\7\11\1\0\12\11\1\0\1\11\1\0\1\11"+
    "\24\0\1\11\3\0\3\11\1\0\10\11\1\0\2\11"+
    "\1\0\3\11\2\0\7\11\1\0\5\11\1\354\4\11"+
    "\1\0\1\11\1\0\1\11\24\0\1\11\3\0\3\11"+
    "\1\0\10\11\1\0\2\11\1\0\3\11\2\0\7\11"+
    "\1\0\5\11\1\355\4\11\1\0\1\11\1\0\1\11"+
    "\24\0\1\11\3\0\3\11\1\0\10\11\1\356\1\357"+
    "\1\11\1\0\3\11\2\0\7\11\1\0\12\11\1\0"+
    "\1\11\1\0\1\11\24\0\1\11\3\0\3\11\1\0"+
    "\10\11\1\0\2\11\1\0\1\11\1\360\1\11\2\0"+
    "\7\11\1\0\12\11\1\0\1\11\1\0\1\11\24\0"+
    "\1\11\3\0\3\11\1\0\10\11\1\0\2\11\1\0"+
    "\1\11\1\361\1\11\2\0\7\11\1\0\12\11\1\0"+
    "\1\11\1\0\1\11\64\0\2\362\61\0\2\363\121\0"+
    "\2\364\101\0\2\365\53\0\1\366\110\0\2\367\61\0"+
    "\1\11\3\0\3\11\1\0\10\11\1\0\2\11\1\0"+
    "\3\11\2\0\7\11\1\362\1\370\11\11\1\0\1\11"+
    "\1\0\1\11\24\0\1\11\3\0\3\11\1\0\10\11"+
    "\1\363\1\371\1\11\1\0\3\11\2\0\7\11\1\0"+
    "\12\11\1\0\1\11\1\0\1\11\24\0\1\11\3\0"+
    "\3\11\1\0\10\11\1\0\2\11\1\0\3\11\2\0"+
    "\7\11\1\364\1\372\11\11\1\0\1\11\1\0\1\11"+
    "\24\0\1\11\3\0\3\11\1\0\10\11\1\0\2\11"+
    "\1\0\3\11\2\0\7\11\1\365\1\373\11\11\1\0"+
    "\1\11\1\0\1\11\24\0\1\11\3\0\3\11\1\0"+
    "\2\11\1\374\5\11\1\0\2\11\1\0\3\11\2\0"+
    "\7\11\1\0\12\11\1\0\1\11\1\0\1\11\24\0"+
    "\1\11\3\0\3\11\1\0\10\11\1\367\1\375\1\11"+
    "\1\0\3\11\2\0\7\11\1\0\12\11\1\0\1\11"+
    "\1\0\1\11\34\0\1\376\106\0\1\377\114\0\1\u0100"+
    "\105\0\1\u0101\76\0\1\u0102\115\0\2\u0103\52\0\1\u0104"+
    "\10\0\1\u0105\2\0\1\u0106\5\0\1\u0107\1\u0108\1\u0109"+
    "\1\u010a\1\u010b\55\0\1\u010c\1\u010d\1\u010e\7\0\1\u010f"+
    "\13\0\2\u0110\56\0\1\u0111\114\0\1\u0112\66\0\1\u0113"+
    "\67\0\1\11\3\0\3\11\1\0\1\u0114\7\11\1\0"+
    "\2\11\1\0\3\11\2\0\7\11\1\0\12\11\1\0"+
    "\1\11\1\0\1\11\24\0\1\11\3\0\3\11\1\0"+
    "\10\11\1\0\2\11\1\0\1\11\1\u0115\1\11\2\0"+
    "\7\11\1\0\12\11\1\0\1\11\1\0\1\11\35\0"+
    "\1\u0116\71\0\1\11\3\0\3\11\1\0\1\11\1\u0117"+
    "\6\11\1\0\2\11\1\0\3\11\2\0\7\11\1\0"+
    "\12\11\1\0\1\11\1\0\1\11\24\0\1\11\3\0"+
    "\3\11\1\0\10\11\1\0\2\11\1\0\3\11\2\0"+
    "\7\11\1\0\2\11\1\u0118\7\11\1\0\1\11\1\0"+
    "\1\11\24\0\1\11\3\0\3\11\1\0\4\11\1\u0119"+
    "\3\11\1\0\2\11\1\0\3\11\2\0\7\11\1\0"+
    "\12\11\1\0\1\11\1\0\1\11\24\0\1\11\3\0"+
    "\3\11\1\0\1\11\1\u011a\6\11\1\0\2\11\1\0"+
    "\3\11\2\0\7\11\1\0\12\11\1\0\1\11\1\0"+
    "\1\11\24\0\1\11\3\0\3\11\1\0\5\11\1\u011b"+
    "\2\11\1\0\2\11\1\0\3\11\2\0\7\11\1\0"+
    "\12\11\1\0\1\11\1\0\1\11\64\0\2\u011c\41\0"+
    "\1\11\3\0\3\11\1\0\10\11\1\0\2\11\1\0"+
    "\3\11\2\0\7\11\1\u011c\1\u011d\11\11\1\0\1\11"+
    "\1\0\1\11\24\0\1\11\3\0\3\11\1\0\10\11"+
    "\1\0\2\11\1\0\3\11\2\0\7\11\1\0\12\11"+
    "\1\u011e\1\u011f\1\0\1\11\24\0\1\11\3\0\3\11"+
    "\1\0\7\11\1\u0120\1\0\2\11\1\0\3\11\2\0"+
    "\7\11\1\0\12\11\1\0\1\11\1\0\1\11\24\0"+
    "\1\11\3\0\3\11\1\0\10\11\1\0\2\11\1\0"+
    "\3\11\2\0\7\11\1\0\2\11\1\u0121\1\11\1\u0122"+
    "\5\11\1\0\1\11\1\0\1\11\40\0\1\u0123\137\0"+
    "\1\u0124\31\0\1\11\3\0\3\11\1\0\4\11\1\u0125"+
    "\3\11\1\0\2\11\1\0\3\11\2\0\7\11\1\0"+
    "\12\11\1\0\1\11\1\0\1\11\24\0\1\11\3\0"+
    "\3\11\1\0\10\11\1\0\2\11\1\0\3\11\2\0"+
    "\7\11\1\0\10\11\1\u0126\1\11\1\0\1\11\1\0"+
    "\1\11\72\0\1\u0127\34\0\1\11\3\0\3\11\1\0"+
    "\10\11\1\0\2\11\1\0\3\11\2\0\7\11\1\0"+
    "\5\11\1\u0128\4\11\1\0\1\11\1\0\1\11\24\0"+
    "\1\11\3\0\3\11\1\0\4\11\1\u0129\3\11\1\0"+
    "\2\11\1\0\3\11\2\0\7\11\1\0\12\11\1\0"+
    "\1\11\1\0\1\11\24\0\1\11\3\0\3\11\1\0"+
    "\10\11\1\0\2\11\1\0\1\11\1\u012a\1\11\2\0"+
    "\7\11\1\0\12\11\1\0\1\11\1\0\1\11\24\0"+
    "\1\11\3\0\3\11\1\0\10\11\1\0\2\11\1\0"+
    "\3\11\2\0\7\11\1\u012b\1\u012c\11\11\1\0\1\11"+
    "\1\0\1\11\24\0\1\11\3\0\3\11\1\0\5\11"+
    "\1\u012d\2\11\1\0\2\11\1\0\3\11\2\0\7\11"+
    "\1\0\12\11\1\0\1\11\1\0\1\11\24\0\1\11"+
    "\3\0\3\11\1\0\10\11\1\0\2\11\1\0\3\11"+
    "\2\0\7\11\1\u012e\1\u012f\11\11\1\0\1\11\1\0"+
    "\1\11\24\0\1\11\3\0\3\11\1\0\2\11\1\u0130"+
    "\5\11\1\0\2\11\1\0\3\11\2\0\7\11\1\0"+
    "\12\11\1\0\1\11\1\0\1\11\24\0\1\11\3\0"+
    "\3\11\1\0\2\11\1\u0131\5\11\1\0\2\11\1\0"+
    "\3\11\2\0\7\11\1\0\12\11\1\0\1\11\1\0"+
    "\1\11\24\0\1\11\3\0\3\11\1\0\10\11\1\u0132"+
    "\1\u0133\1\11\1\0\3\11\2\0\7\11\1\0\12\11"+
    "\1\0\1\11\1\0\1\11\24\0\1\11\3\0\3\11"+
    "\1\0\2\11\1\u0134\5\11\1\0\2\11\1\0\3\11"+
    "\2\0\7\11\1\0\12\11\1\0\1\11\1\0\1\11"+
    "\44\0\2\u0135\61\0\1\11\3\0\3\11\1\0\10\11"+
    "\1\u0135\1\u0136\1\11\1\0\3\11\2\0\7\11\1\0"+
    "\12\11\1\0\1\11\1\0\1\11\24\0\1\11\3\0"+
    "\3\11\1\0\4\11\1\u0137\3\11\1\0\2\11\1\0"+
    "\3\11\2\0\7\11\1\0\12\11\1\0\1\11\1\0"+
    "\1\11\24\0\1\11\3\0\3\11\1\0\1\11\1\u0138"+
    "\2\11\1\u0139\3\11\1\0\2\11\1\0\3\11\2\0"+
    "\7\11\1\0\12\11\1\0\1\11\1\0\1\11\43\0"+
    "\1\u013a\63\0\1\11\3\0\3\11\1\0\7\11\1\u013b"+
    "\1\0\2\11\1\0\3\11\2\0\7\11\1\0\12\11"+
    "\1\0\1\11\1\0\1\11\24\0\1\11\3\0\3\11"+
    "\1\0\10\11\1\0\2\11\1\0\3\11\2\0\7\11"+
    "\1\0\5\11\1\u013c\4\11\1\0\1\11\1\0\1\11"+
    "\24\0\1\11\3\0\3\11\1\0\10\11\1\0\2\11"+
    "\1\0\3\11\2\0\7\11\1\0\2\11\1\u013d\7\11"+
    "\1\0\1\11\1\0\1\11\24\0\1\11\3\0\3\11"+
    "\1\0\2\11\1\u013e\5\11\1\0\2\11\1\0\3\11"+
    "\2\0\7\11\1\0\12\11\1\0\1\11\1\0\1\11"+
    "\24\0\1\11\3\0\3\11\1\0\7\11\1\u013f\1\0"+
    "\2\11\1\0\3\11\2\0\7\11\1\0\12\11\1\0"+
    "\1\11\1\0\1\11\43\0\1\u0140\63\0\1\11\3\0"+
    "\3\11\1\0\7\11\1\u0141\1\0\2\11\1\0\3\11"+
    "\2\0\7\11\1\0\12\11\1\0\1\11\1\0\1\11"+
    "\24\0\1\11\3\0\3\11\1\0\10\11\1\0\2\11"+
    "\1\0\3\11\2\0\7\11\1\u0142\1\u0143\11\11\1\0"+
    "\1\11\1\0\1\11\72\0\1\u0144\34\0\1\11\3\0"+
    "\3\11\1\0\10\11\1\0\2\11\1\0\3\11\2\0"+
    "\7\11\1\0\5\11\1\u0145\4\11\1\0\1\11\1\0"+
    "\1\11\24\0\1\11\3\0\3\11\1\0\10\11\1\0"+
    "\2\11\1\0\3\11\2\0\7\11\1\u0146\1\u0147\11\11"+
    "\1\0\1\11\1\0\1\11\24\0\1\11\3\0\3\11"+
    "\1\0\10\11\1\0\2\11\1\0\3\11\2\0\7\11"+
    "\1\0\2\11\1\u0148\7\11\1\0\1\11\1\0\1\11"+
    "\24\0\1\11\3\0\3\11\1\0\4\11\1\u0149\3\11"+
    "\1\0\2\11\1\0\3\11\2\0\7\11\1\0\12\11"+
    "\1\0\1\11\1\0\1\11\76\0\1\u014a\30\0\1\11"+
    "\3\0\3\11\1\0\10\11\1\0\2\11\1\0\3\11"+
    "\2\0\7\11\1\0\11\11\1\u014b\1\0\1\11\1\0"+
    "\1\11\24\0\1\11\3\0\2\11\1\u014c\1\0\10\11"+
    "\1\0\2\11\1\0\3\11\2\0\7\11\1\0\12\11"+
    "\1\0\1\11\1\0\1\11\24\0\1\11\3\0\3\11"+
    "\1\0\10\11\1\0\2\11\1\0\3\11\2\0\7\11"+
    "\1\0\12\11\1\u014d\1\u014e\1\0\1\11\41\0\1\u014f"+
    "\65\0\1\11\3\0\3\11\1\0\5\11\1\u0150\2\11"+
    "\1\0\2\11\1\0\3\11\2\0\7\11\1\0\12\11"+
    "\1\0\1\11\1\0\1\11\24\0\1\11\3\0\3\11"+
    "\1\0\4\11\1\u0151\3\11\1\0\2\11\1\0\3\11"+
    "\2\0\7\11\1\0\12\11\1\0\1\11\1\0\1\11"+
    "\42\0\1\u0152\141\0\1\u0153\73\0\1\u0154\76\0\1\u0155"+
    "\51\0\1\u0156\111\0\2\u0157\61\0\1\11\3\0\3\11"+
    "\1\0\6\11\1\u0158\1\11\1\0\2\11\1\0\3\11"+
    "\2\0\7\11\1\0\12\11\1\0\1\11\1\0\1\11"+
    "\24\0\1\11\3\0\3\11\1\0\10\11\1\0\2\11"+
    "\1\0\3\11\2\0\7\11\1\0\12\11\1\0\1\11"+
    "\1\u0153\1\11\24\0\1\11\3\0\3\11\1\0\10\11"+
    "\1\0\2\11\1\0\3\11\2\0\7\11\1\0\5\11"+
    "\1\u0159\4\11\1\0\1\11\1\0\1\11\24\0\1\11"+
    "\3\0\3\11\1\0\10\11\1\0\2\11\1\0\3\11"+
    "\2\0\7\11\1\0\1\11\1\u015a\10\11\1\0\1\11"+
    "\1\0\1\11\24\0\1\11\3\0\3\11\1\0\1\11"+
    "\1\u015b\6\11\1\0\2\11\1\0\3\11\2\0\7\11"+
    "\1\0\12\11\1\0\1\11\1\0\1\11\24\0\1\11"+
    "\3\0\3\11\1\0\10\11\1\u0157\1\u015c\1\11\1\0"+
    "\3\11\2\0\7\11\1\0\12\11\1\0\1\11\1\0"+
    "\1\11\37\0\1\u015d\106\0\1\u015e\102\0\1\u015f\102\0"+
    "\1\u0160\73\0\1\u0161\106\0\1\u0162\115\0\1\u0163\101\0"+
    "\1\u0164\103\0\1\u0165\102\0\1\u0166\102\0\1\u0167\102\0"+
    "\1\u0168\102\0\1\u0169\102\0\1\u016a\102\0\1\u016b\104\0"+
    "\1\u016c\100\0\1\u016d\100\0\1\u016e\70\0\1\u016f\121\0"+
    "\1\u0170\50\0\1\11\3\0\3\11\1\0\1\11\1\u0171"+
    "\6\11\1\0\2\11\1\0\3\11\2\0\7\11\1\0"+
    "\12\11\1\0\1\11\1\0\1\11\24\0\1\11\3\0"+
    "\3\11\1\0\10\11\1\0\2\11\1\0\3\11\2\0"+
    "\7\11\1\0\2\11\1\u0172\7\11\1\0\1\11\1\0"+
    "\1\11\44\0\2\u0173\61\0\1\11\3\0\3\11\1\0"+
    "\10\11\1\u0173\1\u0174\1\11\1\0\3\11\2\0\7\11"+
    "\1\0\12\11\1\0\1\11\1\0\1\11\24\0\1\11"+
    "\3\0\3\11\1\0\1\11\1\u0175\6\11\1\0\2\11"+
    "\1\0\3\11\2\0\7\11\1\0\12\11\1\0\1\11"+
    "\1\0\1\11\24\0\1\11\3\0\3\11\1\0\3\11"+
    "\1\u0176\4\11\1\0\2\11\1\0\3\11\2\0\7\11"+
    "\1\0\12\11\1\0\1\11\1\0\1\11\24\0\1\11"+
    "\3\0\3\11\1\0\2\11\1\u0177\5\11\1\0\2\11"+
    "\1\0\3\11\2\0\7\11\1\0\12\11\1\0\1\11"+
    "\1\0\1\11\24\0\1\11\3\0\3\11\1\0\10\11"+
    "\1\u0178\1\u0179\1\11\1\0\3\11\2\0\7\11\1\0"+
    "\12\11\1\0\1\11\1\0\1\11\41\0\1\u017a\65\0"+
    "\1\11\3\0\3\11\1\0\5\11\1\u017b\2\11\1\0"+
    "\2\11\1\0\3\11\2\0\7\11\1\0\12\11\1\0"+
    "\1\11\1\0\1\11\42\0\1\u017c\26\0\1\u017d\35\0"+
    "\1\11\3\0\3\11\1\0\6\11\1\u017e\1\11\1\0"+
    "\2\11\1\0\3\11\2\0\7\11\1\0\4\11\1\u017f"+
    "\5\11\1\0\1\11\1\0\1\11\24\0\1\11\3\0"+
    "\3\11\1\0\1\11\1\u0180\6\11\1\0\2\11\1\0"+
    "\3\11\2\0\7\11\1\0\12\11\1\0\1\11\1\0"+
    "\1\11\24\0\1\11\3\0\3\11\1\0\10\11\1\0"+
    "\2\11\1\0\3\11\2\0\7\11\1\0\12\11\1\u0181"+
    "\1\u0182\1\0\1\11\24\0\1\11\3\0\3\11\1\0"+
    "\5\11\1\u0183\2\11\1\0\2\11\1\0\3\11\2\0"+
    "\7\11\1\0\12\11\1\0\1\11\1\0\1\11\67\0"+
    "\1\u0184\77\0\2\u0185\41\0\1\11\3\0\3\11\1\0"+
    "\10\11\1\0\2\11\1\0\3\11\2\0\7\11\1\0"+
    "\2\11\1\u0186\7\11\1\0\1\11\1\0\1\11\24\0"+
    "\1\11\3\0\3\11\1\0\10\11\1\0\2\11\1\0"+
    "\3\11\2\0\7\11\1\u0185\1\u0187\11\11\1\0\1\11"+
    "\1\0\1\11\51\0\1\u0188\55\0\1\11\3\0\3\11"+
    "\1\0\10\11\1\0\2\11\1\0\1\11\1\u0189\1\11"+
    "\2\0\7\11\1\0\12\11\1\0\1\11\1\0\1\11"+
    "\24\0\1\11\3\0\3\11\1\0\10\11\1\0\2\11"+
    "\1\0\1\11\1\u018a\1\11\2\0\7\11\1\0\12\11"+
    "\1\0\1\11\1\0\1\11\24\0\1\11\3\0\3\11"+
    "\1\0\2\11\1\u018b\5\11\1\0\2\11\1\0\3\11"+
    "\2\0\7\11\1\0\12\11\1\0\1\11\1\0\1\11"+
    "\55\0\1\u018c\51\0\1\11\3\0\3\11\1\0\10\11"+
    "\1\0\2\11\1\0\3\11\2\0\1\u018d\6\11\1\0"+
    "\12\11\1\0\1\11\1\0\1\11\24\0\1\11\3\0"+
    "\3\11\1\0\2\11\1\u018e\5\11\1\0\2\11\1\0"+
    "\3\11\2\0\7\11\1\0\12\11\1\0\1\11\1\0"+
    "\1\11\67\0\1\u018f\37\0\1\11\3\0\3\11\1\0"+
    "\10\11\1\0\2\11\1\0\3\11\2\0\7\11\1\0"+
    "\2\11\1\u0190\7\11\1\0\1\11\1\0\1\11\24\0"+
    "\1\11\3\0\3\11\1\0\10\11\1\0\2\11\1\0"+
    "\3\11\2\0\7\11\1\u0191\1\u0192\11\11\1\0\1\11"+
    "\1\0\1\11\64\0\2\u0193\41\0\1\11\3\0\3\11"+
    "\1\0\10\11\1\0\2\11\1\0\3\11\2\0\7\11"+
    "\1\u0193\1\u0194\11\11\1\0\1\11\1\0\1\11\24\0"+
    "\1\11\3\0\3\11\1\0\10\11\1\0\2\11\1\0"+
    "\3\11\2\0\7\11\1\0\4\11\1\u0195\5\11\1\0"+
    "\1\11\1\0\1\11\24\0\1\11\3\0\3\11\1\0"+
    "\10\11\1\0\2\11\1\0\2\11\1\u0196\2\0\7\11"+
    "\1\0\12\11\1\0\1\11\1\0\1\11\24\0\1\11"+
    "\3\0\3\11\1\0\3\11\1\u0197\4\11\1\0\2\11"+
    "\1\0\3\11\2\0\7\11\1\0\5\11\1\u0198\4\11"+
    "\1\0\1\11\1\0\1\11\51\0\1\u0199\55\0\1\11"+
    "\3\0\3\11\1\0\10\11\1\0\2\11\1\0\1\11"+
    "\1\u019a\1\11\2\0\7\11\1\0\12\11\1\0\1\11"+
    "\1\0\1\11\24\0\1\11\3\0\3\11\1\0\10\11"+
    "\1\0\2\11\1\0\1\u019b\2\11\2\0\7\11\1\0"+
    "\12\11\1\0\1\11\1\0\1\11\24\0\1\11\3\0"+
    "\3\11\1\0\4\11\1\u019c\3\11\1\0\2\11\1\0"+
    "\3\11\2\0\7\11\1\0\12\11\1\0\1\11\1\0"+
    "\1\11\24\0\1\11\3\0\3\11\1\0\1\11\1\u019d"+
    "\6\11\1\0\2\11\1\0\3\11\2\0\7\11\1\0"+
    "\12\11\1\0\1\11\1\0\1\11\51\0\1\u019e\55\0"+
    "\1\11\3\0\3\11\1\0\10\11\1\0\2\11\1\0"+
    "\1\11\1\u019f\1\11\2\0\7\11\1\0\12\11\1\0"+
    "\1\11\1\0\1\11\43\0\1\u01a0\63\0\1\11\3\0"+
    "\3\11\1\0\7\11\1\u01a1\1\0\2\11\1\0\3\11"+
    "\2\0\7\11\1\0\12\11\1\0\1\11\1\0\1\11"+
    "\24\0\1\11\3\0\3\11\1\0\10\11\1\0\2\11"+
    "\1\0\3\11\2\0\1\11\1\u01a2\5\11\1\0\12\11"+
    "\1\0\1\11\1\0\1\11\24\0\1\11\3\0\3\11"+
    "\1\0\10\11\1\0\2\11\1\0\3\11\2\0\7\11"+
    "\1\0\5\11\1\u01a3\4\11\1\0\1\11\1\0\1\11"+
    "\75\0\1\u01a4\31\0\1\11\3\0\3\11\1\0\10\11"+
    "\1\0\2\11\1\0\3\11\2\0\7\11\1\0\10\11"+
    "\1\u01a5\1\11\1\0\1\11\1\0\1\11\24\0\1\11"+
    "\3\0\3\11\1\0\10\11\1\u01a6\1\u01a7\1\11\1\0"+
    "\3\11\2\0\7\11\1\0\12\11\1\0\1\11\1\0"+
    "\1\11\51\0\1\u01a8\55\0\1\11\3\0\3\11\1\0"+
    "\10\11\1\0\2\11\1\0\1\11\1\u01a9\1\11\2\0"+
    "\7\11\1\0\12\11\1\0\1\11\1\0\1\11\24\0"+
    "\1\11\3\0\3\11\1\0\10\11\1\u01aa\1\u01ab\1\11"+
    "\1\0\3\11\2\0\7\11\1\0\12\11\1\0\1\11"+
    "\1\0\1\11\44\0\2\u01ac\126\0\1\u01ad\62\0\1\u01ae"+
    "\55\0\1\11\3\0\3\11\1\0\10\11\1\0\2\11"+
    "\1\0\3\11\2\0\7\11\1\0\4\11\1\u01af\5\11"+
    "\1\0\1\11\1\0\1\11\24\0\1\11\3\0\3\11"+
    "\1\0\10\11\1\0\2\11\1\0\1\11\1\u01b0\1\11"+
    "\2\0\7\11\1\0\12\11\1\0\1\11\1\0\1\11"+
    "\53\0\1\u01b1\102\0\1\u01b2\64\0\1\u01b3\102\0\1\u01b4"+
    "\120\0\1\u01b5\66\0\1\u01b6\106\0\1\u01b7\102\0\1\u01b8"+
    "\102\0\1\u01b9\115\0\1\u01ba\77\0\1\u01bb\53\0\1\11"+
    "\3\0\3\11\1\0\10\11\1\0\2\11\1\0\1\11"+
    "\1\u01bc\1\11\2\0\7\11\1\0\12\11\1\0\1\11"+
    "\1\0\1\11\24\0\1\11\3\0\3\11\1\0\5\11"+
    "\1\u01bd\2\11\1\0\2\11\1\0\3\11\2\0\7\11"+
    "\1\0\12\11\1\0\1\11\1\0\1\11\32\0\1\u01be"+
    "\74\0\1\11\3\0\2\11\1\u01bf\1\0\10\11\1\0"+
    "\2\11\1\0\3\11\2\0\7\11\1\0\12\11\1\0"+
    "\1\11\1\0\1\11\24\0\1\11\3\0\3\11\1\0"+
    "\10\11\1\0\2\11\1\0\3\11\2\0\7\11\1\0"+
    "\5\11\1\u01c0\4\11\1\0\1\11\1\0\1\11\24\0"+
    "\1\11\3\0\3\11\1\0\5\11\1\u01c1\2\11\1\0"+
    "\2\11\1\0\3\11\2\0\7\11\1\0\12\11\1\0"+
    "\1\11\1\0\1\11\24\0\1\11\3\0\3\11\1\0"+
    "\10\11\1\0\2\11\1\0\3\11\2\0\7\11\1\0"+
    "\5\11\1\u01c2\4\11\1\0\1\11\1\0\1\11\66\0"+
    "\1\u01c3\40\0\1\11\3\0\3\11\1\0\10\11\1\0"+
    "\2\11\1\0\3\11\2\0\7\11\1\0\1\11\1\u01c4"+
    "\10\11\1\0\1\11\1\0\1\11\72\0\1\u01c5\34\0"+
    "\1\11\3\0\3\11\1\0\10\11\1\0\2\11\1\0"+
    "\3\11\2\0\7\11\1\0\5\11\1\u01c6\4\11\1\0"+
    "\1\11\1\0\1\11\75\0\1\u01c7\46\0\1\u01c8\65\0"+
    "\1\11\3\0\3\11\1\0\10\11\1\0\2\11\1\0"+
    "\3\11\2\0\7\11\1\0\10\11\1\u01c9\1\11\1\0"+
    "\1\11\1\0\1\11\24\0\1\11\3\0\3\11\1\0"+
    "\5\11\1\u01ca\2\11\1\0\2\11\1\0\3\11\2\0"+
    "\7\11\1\0\12\11\1\0\1\11\1\0\1\11\24\0"+
    "\1\11\3\0\3\11\1\0\4\11\1\u01cb\3\11\1\0"+
    "\2\11\1\0\3\11\2\0\7\11\1\0\12\11\1\0"+
    "\1\11\1\0\1\11\43\0\1\u01cc\63\0\1\11\3\0"+
    "\3\11\1\0\7\11\1\u01cd\1\0\2\11\1\0\3\11"+
    "\2\0\7\11\1\0\12\11\1\0\1\11\1\0\1\11"+
    "\24\0\1\11\3\0\3\11\1\0\1\u01ce\7\11\1\0"+
    "\2\11\1\0\3\11\2\0\7\11\1\0\12\11\1\0"+
    "\1\11\1\0\1\11\51\0\1\u01cf\66\0\1\u01d0\71\0"+
    "\1\11\3\0\3\11\1\0\10\11\1\0\2\11\1\0"+
    "\1\11\1\u01d1\1\11\2\0\7\11\1\0\12\11\1\0"+
    "\1\11\1\0\1\11\24\0\1\11\3\0\3\11\1\0"+
    "\1\11\1\u01d2\6\11\1\0\2\11\1\0\3\11\2\0"+
    "\7\11\1\0\12\11\1\0\1\11\1\0\1\11\24\0"+
    "\1\11\3\0\3\11\1\0\10\11\1\0\2\11\1\0"+
    "\3\11\2\0\7\11\1\u01d3\1\u01d4\11\11\1\0\1\11"+
    "\1\0\1\11\24\0\1\11\3\0\3\11\1\0\4\11"+
    "\1\u01d5\3\11\1\0\2\11\1\0\3\11\2\0\7\11"+
    "\1\0\12\11\1\0\1\11\1\0\1\11\36\0\1\u01d6"+
    "\70\0\1\11\3\0\3\11\1\0\2\11\1\u01d7\5\11"+
    "\1\0\2\11\1\0\3\11\2\0\7\11\1\0\12\11"+
    "\1\0\1\11\1\0\1\11\32\0\1\u01d8\74\0\1\11"+
    "\3\0\2\11\1\u01d9\1\0\10\11\1\0\2\11\1\0"+
    "\3\11\2\0\7\11\1\0\12\11\1\0\1\11\1\0"+
    "\1\11\35\0\1\u01da\71\0\1\11\3\0\3\11\1\0"+
    "\1\11\1\u01db\6\11\1\0\2\11\1\0\3\11\2\0"+
    "\7\11\1\0\12\11\1\0\1\11\1\0\1\11\34\0"+
    "\1\u01dc\72\0\1\11\3\0\3\11\1\0\1\u01dd\7\11"+
    "\1\0\2\11\1\0\3\11\2\0\7\11\1\0\12\11"+
    "\1\0\1\11\1\0\1\11\24\0\1\11\3\0\3\11"+
    "\1\0\10\11\1\0\2\11\1\0\3\11\2\0\7\11"+
    "\1\u01de\1\u01df\11\11\1\0\1\11\1\0\1\11\24\0"+
    "\1\11\3\0\3\11\1\0\5\11\1\u01e0\2\11\1\0"+
    "\2\11\1\0\3\11\2\0\7\11\1\0\12\11\1\0"+
    "\1\11\1\0\1\11\24\0\1\11\3\0\3\11\1\0"+
    "\1\11\1\u01e1\6\11\1\0\2\11\1\0\3\11\2\0"+
    "\7\11\1\0\12\11\1\0\1\11\1\0\1\11\24\0"+
    "\1\11\3\0\3\11\1\0\4\11\1\u01e2\3\11\1\0"+
    "\2\11\1\0\3\11\2\0\7\11\1\0\12\11\1\0"+
    "\1\11\1\0\1\11\24\0\1\11\3\0\3\11\1\0"+
    "\4\11\1\u01e3\3\11\1\0\2\11\1\0\3\11\2\0"+
    "\7\11\1\0\12\11\1\0\1\11\1\0\1\11\24\0"+
    "\1\11\3\0\3\11\1\0\10\11\1\0\2\11\1\0"+
    "\1\11\1\u01e4\1\11\2\0\7\11\1\0\12\11\1\0"+
    "\1\11\1\0\1\11\35\0\1\u01e5\71\0\1\11\3\0"+
    "\3\11\1\0\1\11\1\u01e6\6\11\1\0\2\11\1\0"+
    "\3\11\2\0\7\11\1\0\12\11\1\0\1\11\1\0"+
    "\1\11\43\0\1\u01e7\63\0\1\11\3\0\3\11\1\0"+
    "\7\11\1\u01e8\1\0\2\11\1\0\3\11\2\0\7\11"+
    "\1\0\12\11\1\0\1\11\1\0\1\11\24\0\1\11"+
    "\3\0\2\11\1\u01e9\1\0\10\11\1\0\2\11\1\0"+
    "\3\11\2\0\7\11\1\0\12\11\1\0\1\11\1\0"+
    "\1\11\24\0\1\11\3\0\3\11\1\0\10\11\1\0"+
    "\2\11\1\0\3\11\2\0\7\11\1\0\6\11\1\u01ea"+
    "\3\11\1\0\1\11\1\0\1\11\40\0\1\u01eb\66\0"+
    "\1\11\3\0\3\11\1\0\4\11\1\u01ec\3\11\1\0"+
    "\2\11\1\0\3\11\2\0\7\11\1\0\12\11\1\0"+
    "\1\11\1\0\1\11\40\0\1\u01ed\66\0\1\11\3\0"+
    "\3\11\1\0\4\11\1\u01ee\3\11\1\0\2\11\1\0"+
    "\3\11\2\0\7\11\1\0\12\11\1\0\1\11\1\0"+
    "\1\11\75\0\1\u01ef\31\0\1\11\3\0\3\11\1\0"+
    "\10\11\1\0\2\11\1\0\3\11\2\0\7\11\1\0"+
    "\10\11\1\u01f0\1\11\1\0\1\11\1\0\1\11\56\0"+
    "\1\u01f1\50\0\1\11\3\0\3\11\1\0\10\11\1\0"+
    "\2\11\1\0\3\11\2\0\1\11\1\u01f2\5\11\1\0"+
    "\12\11\1\0\1\11\1\0\1\11\35\0\1\u01f3\120\0"+
    "\1\u01f4\102\0\1\u01f5\102\0\1\u01f6\64\0\1\u01f7\102\0"+
    "\1\u01f8\120\0\1\u01f9\53\0\1\11\3\0\3\11\1\0"+
    "\10\11\1\0\2\11\1\0\3\11\2\0\7\11\1\u01fa"+
    "\1\u01fb\11\11\1\0\1\11\1\0\1\11\24\0\1\11"+
    "\3\0\3\11\1\0\7\11\1\u01fc\1\0\2\11\1\0"+
    "\3\11\2\0\7\11\1\0\12\11\1\0\1\11\1\0"+
    "\1\11\72\0\1\u01fd\34\0\1\11\3\0\3\11\1\0"+
    "\10\11\1\0\2\11\1\0\3\11\2\0\7\11\1\0"+
    "\5\11\1\u01fe\4\11\1\0\1\11\1\0\1\11\24\0"+
    "\1\11\3\0\2\11\1\u01ff\1\0\10\11\1\0\2\11"+
    "\1\0\3\11\2\0\7\11\1\0\12\11\1\0\1\11"+
    "\1\0\1\11\40\0\1\u0200\66\0\1\11\3\0\3\11"+
    "\1\0\4\11\1\u0201\3\11\1\0\2\11\1\0\3\11"+
    "\2\0\7\11\1\0\12\11\1\0\1\11\1\0\1\11"+
    "\51\0\1\u0202\102\0\1\u0203\55\0\1\11\3\0\3\11"+
    "\1\0\10\11\1\0\2\11\1\0\1\11\1\u0204\1\11"+
    "\2\0\7\11\1\0\12\11\1\0\1\11\1\0\1\11"+
    "\24\0\1\11\3\0\3\11\1\0\10\11\1\0\2\11"+
    "\1\0\1\11\1\u0205\1\11\2\0\7\11\1\0\12\11"+
    "\1\0\1\11\1\0\1\11\24\0\1\11\3\0\3\11"+
    "\1\0\10\11\1\0\2\11\1\0\3\11\2\0\7\11"+
    "\1\0\5\11\1\u0206\4\11\1\0\1\11\1\0\1\11"+
    "\35\0\1\u0207\71\0\1\11\3\0\3\11\1\0\1\11"+
    "\1\u0208\6\11\1\0\2\11\1\0\3\11\2\0\7\11"+
    "\1\0\12\11\1\0\1\11\1\0\1\11\24\0\1\11"+
    "\3\0\3\11\1\0\1\11\1\u0209\6\11\1\0\2\11"+
    "\1\0\3\11\2\0\7\11\1\0\12\11\1\0\1\11"+
    "\1\0\1\11\36\0\1\u020a\70\0\1\11\3\0\3\11"+
    "\1\0\2\11\1\u020b\5\11\1\0\2\11\1\0\3\11"+
    "\2\0\7\11\1\0\12\11\1\0\1\11\1\0\1\11"+
    "\72\0\1\u020c\34\0\1\11\3\0\3\11\1\0\10\11"+
    "\1\0\2\11\1\0\3\11\2\0\7\11\1\0\5\11"+
    "\1\u020d\4\11\1\0\1\11\1\0\1\11\24\0\1\11"+
    "\3\0\3\11\1\0\3\11\1\u020e\4\11\1\0\2\11"+
    "\1\0\3\11\2\0\7\11\1\0\12\11\1\0\1\11"+
    "\1\0\1\11\64\0\2\u020f\41\0\1\11\3\0\3\11"+
    "\1\0\10\11\1\0\2\11\1\0\3\11\2\0\7\11"+
    "\1\u020f\1\u0210\11\11\1\0\1\11\1\0\1\11\44\0"+
    "\2\u0211\61\0\1\11\3\0\3\11\1\0\10\11\1\u0211"+
    "\1\u0212\1\11\1\0\3\11\2\0\7\11\1\0\12\11"+
    "\1\0\1\11\1\0\1\11\36\0\1\u0213\70\0\1\11"+
    "\3\0\3\11\1\0\2\11\1\u0214\5\11\1\0\2\11"+
    "\1\0\3\11\2\0\7\11\1\0\12\11\1\0\1\11"+
    "\1\0\1\11\35\0\1\u0215\71\0\1\11\3\0\3\11"+
    "\1\0\1\11\1\u0216\6\11\1\0\2\11\1\0\3\11"+
    "\2\0\7\11\1\0\12\11\1\0\1\11\1\0\1\11"+
    "\40\0\1\u0217\66\0\1\11\3\0\3\11\1\0\4\11"+
    "\1\u0218\3\11\1\0\2\11\1\0\3\11\2\0\7\11"+
    "\1\0\12\11\1\0\1\11\1\0\1\11\24\0\1\11"+
    "\3\0\3\11\1\0\10\11\1\0\2\11\1\0\3\11"+
    "\2\0\7\11\1\0\5\11\1\u0219\4\11\1\0\1\11"+
    "\1\0\1\11\24\0\1\11\3\0\3\11\1\0\2\11"+
    "\1\357\5\11\1\0\2\11\1\0\3\11\2\0\7\11"+
    "\1\0\12\11\1\0\1\11\1\0\1\11\24\0\1\11"+
    "\3\0\3\11\1\0\10\11\1\0\2\11\1\0\3\11"+
    "\2\0\7\11\1\u021a\1\u021b\11\11\1\0\1\11\1\0"+
    "\1\11\67\0\1\u021c\37\0\1\11\3\0\3\11\1\0"+
    "\10\11\1\0\2\11\1\0\3\11\2\0\7\11\1\0"+
    "\2\11\1\u021d\7\11\1\0\1\11\1\0\1\11\41\0"+
    "\1\u021e\65\0\1\11\3\0\3\11\1\0\5\11\1\u021f"+
    "\2\11\1\0\2\11\1\0\3\11\2\0\7\11\1\0"+
    "\12\11\1\0\1\11\1\0\1\11\24\0\1\11\3\0"+
    "\3\11\1\0\6\11\1\u0220\1\11\1\0\2\11\1\0"+
    "\3\11\2\0\7\11\1\0\12\11\1\0\1\11\1\0"+
    "\1\11\24\0\1\11\3\0\3\11\1\0\4\11\1\u0221"+
    "\3\11\1\0\2\11\1\0\3\11\2\0\7\11\1\0"+
    "\12\11\1\0\1\11\1\0\1\11\72\0\1\u0222\34\0"+
    "\1\11\3\0\3\11\1\0\10\11\1\0\2\11\1\0"+
    "\3\11\2\0\7\11\1\0\5\11\1\u0223\4\11\1\0"+
    "\1\11\1\0\1\11\36\0\1\u0224\70\0\1\11\3\0"+
    "\3\11\1\0\2\11\1\u0225\5\11\1\0\2\11\1\0"+
    "\3\11\2\0\7\11\1\0\12\11\1\0\1\11\1\0"+
    "\1\11\36\0\1\u0226\117\0\1\u0227\102\0\1\u0228\116\0"+
    "\1\u0229\37\0\1\11\3\0\3\11\1\0\10\11\1\0"+
    "\2\11\1\0\3\11\2\0\7\11\1\0\2\11\1\u022a"+
    "\7\11\1\0\1\11\1\0\1\11\24\0\1\11\3\0"+
    "\3\11\1\0\5\11\1\u022b\2\11\1\0\2\11\1\0"+
    "\3\11\2\0\7\11\1\0\12\11\1\0\1\11\1\0"+
    "\1\11\35\0\1\u022c\71\0\1\11\3\0\3\11\1\0"+
    "\1\11\1\u022d\6\11\1\0\2\11\1\0\3\11\2\0"+
    "\7\11\1\0\12\11\1\0\1\11\1\0\1\11\24\0"+
    "\1\11\3\0\3\11\1\0\10\11\1\0\2\11\1\0"+
    "\2\11\1\u022e\2\0\7\11\1\0\12\11\1\0\1\11"+
    "\1\0\1\11\67\0\1\u022f\37\0\1\11\3\0\3\11"+
    "\1\0\10\11\1\0\2\11\1\0\3\11\2\0\7\11"+
    "\1\0\2\11\1\u0230\7\11\1\0\1\11\1\0\1\11"+
    "\75\0\1\u0231\55\0\1\u0232\56\0\1\11\3\0\3\11"+
    "\1\0\10\11\1\0\2\11\1\0\3\11\2\0\7\11"+
    "\1\0\10\11\1\u0233\1\11\1\0\1\11\1\0\1\11"+
    "\24\0\1\11\3\0\3\11\1\0\10\11\1\0\2\11"+
    "\1\0\1\u0234\2\11\2\0\7\11\1\0\12\11\1\0"+
    "\1\11\1\0\1\11\51\0\1\u0235\55\0\1\11\3\0"+
    "\3\11\1\0\10\11\1\0\2\11\1\0\1\11\1\u0236"+
    "\1\11\2\0\7\11\1\0\12\11\1\0\1\11\1\0"+
    "\1\11\24\0\1\11\3\0\3\11\1\0\10\11\1\u0237"+
    "\1\u0238\1\11\1\0\3\11\2\0\7\11\1\0\12\11"+
    "\1\0\1\11\1\0\1\11\37\0\1\u0239\67\0\1\11"+
    "\3\0\3\11\1\0\3\11\1\u023a\4\11\1\0\2\11"+
    "\1\0\3\11\2\0\7\11\1\0\12\11\1\0\1\11"+
    "\1\0\1\11\41\0\1\u023b\65\0\1\11\3\0\3\11"+
    "\1\0\5\11\1\u023c\2\11\1\0\2\11\1\0\3\11"+
    "\2\0\7\11\1\0\12\11\1\0\1\11\1\0\1\11"+
    "\24\0\1\11\3\0\3\11\1\0\5\11\1\u023d\2\11"+
    "\1\0\2\11\1\0\3\11\2\0\7\11\1\0\12\11"+
    "\1\0\1\11\1\0\1\11\40\0\1\u023e\66\0\1\11"+
    "\3\0\3\11\1\0\4\11\1\u023f\3\11\1\0\2\11"+
    "\1\0\3\11\2\0\7\11\1\0\12\11\1\0\1\11"+
    "\1\0\1\11\24\0\1\11\3\0\3\11\1\0\3\11"+
    "\1\u0240\4\11\1\0\2\11\1\0\3\11\2\0\7\11"+
    "\1\0\12\11\1\0\1\11\1\0\1\11\34\0\1\u0241"+
    "\72\0\1\11\3\0\3\11\1\0\1\u0242\7\11\1\0"+
    "\2\11\1\0\3\11\2\0\7\11\1\0\12\11\1\0"+
    "\1\11\1\0\1\11\51\0\1\u0243\55\0\1\11\3\0"+
    "\3\11\1\0\10\11\1\0\2\11\1\0\1\11\1\u0244"+
    "\1\11\2\0\7\11\1\0\12\11\1\0\1\11\1\0"+
    "\1\11\24\0\1\11\3\0\3\11\1\0\10\11\1\0"+
    "\2\11\1\0\3\11\2\0\1\u0245\6\11\1\0\12\11"+
    "\1\0\1\11\1\0\1\11\24\0\1\11\3\0\3\11"+
    "\1\0\3\11\1\u0246\4\11\1\0\2\11\1\0\3\11"+
    "\2\0\7\11\1\0\12\11\1\0\1\11\1\0\1\11"+
    "\44\0\2\u0247\61\0\1\11\3\0\3\11\1\0\10\11"+
    "\1\u0247\1\u0248\1\11\1\0\3\11\2\0\7\11\1\0"+
    "\12\11\1\0\1\11\1\0\1\11\64\0\2\u0249\55\0"+
    "\1\u024a\66\0\1\11\3\0\3\11\1\0\4\11\1\u024b"+
    "\3\11\1\0\2\11\1\0\3\11\2\0\7\11\1\0"+
    "\12\11\1\0\1\11\1\0\1\11\24\0\1\11\3\0"+
    "\3\11\1\0\2\11\1\u024c\5\11\1\0\2\11\1\0"+
    "\3\11\2\0\7\11\1\0\12\11\1\0\1\11\1\0"+
    "\1\11\102\0\1\u024d\24\0\1\11\3\0\3\11\1\0"+
    "\10\11\1\0\2\11\1\0\3\11\2\0\7\11\1\0"+
    "\12\11\1\0\1\11\1\0\1\u024e\24\0\1\11\3\0"+
    "\3\11\1\0\10\11\1\0\2\11\1\0\1\11\1\u024f"+
    "\1\11\2\0\7\11\1\0\12\11\1\0\1\11\1\0"+
    "\1\11\35\0\1\u0250\71\0\1\11\3\0\3\11\1\0"+
    "\1\11\1\u0251\6\11\1\0\2\11\1\0\3\11\2\0"+
    "\7\11\1\0\12\11\1\0\1\11\1\0\1\11\36\0"+
    "\1\u0252\130\0\2\u0253\41\0\1\11\3\0\3\11\1\0"+
    "\2\11\1\u0254\5\11\1\0\2\11\1\0\3\11\2\0"+
    "\7\11\1\0\12\11\1\0\1\11\1\0\1\11\24\0"+
    "\1\11\3\0\3\11\1\0\10\11\1\0\2\11\1\0"+
    "\3\11\2\0\7\11\1\u0253\1\u0255\11\11\1\0\1\11"+
    "\1\0\1\11\51\0\1\u0256\55\0\1\11\3\0\3\11"+
    "\1\0\10\11\1\0\2\11\1\0\1\11\1\u0257\1\11"+
    "\2\0\7\11\1\0\12\11\1\0\1\11\1\0\1\11"+
    "\51\0\1\u0258\55\0\1\11\3\0\3\11\1\0\10\11"+
    "\1\0\2\11\1\0\1\11\1\u0259\1\11\2\0\7\11"+
    "\1\0\12\11\1\0\1\11\1\0\1\11\40\0\1\u025a"+
    "\66\0\1\11\3\0\3\11\1\0\4\11\1\u025b\3\11"+
    "\1\0\2\11\1\0\3\11\2\0\7\11\1\0\12\11"+
    "\1\0\1\11\1\0\1\11\72\0\1\u025c\34\0\1\11"+
    "\3\0\3\11\1\0\10\11\1\0\2\11\1\0\3\11"+
    "\2\0\7\11\1\0\5\11\1\u025d\4\11\1\0\1\11"+
    "\1\0\1\11\35\0\1\u025e\71\0\1\11\3\0\3\11"+
    "\1\0\1\11\1\u025f\6\11\1\0\2\11\1\0\3\11"+
    "\2\0\7\11\1\0\12\11\1\0\1\11\1\0\1\11"+
    "\24\0\1\11\3\0\3\11\1\0\5\11\1\u0260\2\11"+
    "\1\0\2\11\1\0\3\11\2\0\7\11\1\0\12\11"+
    "\1\0\1\11\1\0\1\11\42\0\1\u0261\72\0\1\u0262"+
    "\74\0\1\11\3\0\2\11\1\u0263\1\0\10\11\1\0"+
    "\2\11\1\0\3\11\2\0\7\11\1\0\12\11\1\0"+
    "\1\11\1\0\1\11\64\0\2\u0264\104\0\1\u0265\37\0"+
    "\1\11\3\0\3\11\1\0\10\11\1\0\2\11\1\0"+
    "\3\11\2\0\7\11\1\u0264\1\u0266\11\11\1\0\1\11"+
    "\1\0\1\11\24\0\1\11\3\0\3\11\1\0\10\11"+
    "\1\0\2\11\1\0\3\11\2\0\7\11\1\0\2\11"+
    "\1\u0267\7\11\1\0\1\11\1\0\1\11\35\0\1\u0268"+
    "\71\0\1\11\3\0\3\11\1\0\1\11\1\u0269\6\11"+
    "\1\0\2\11\1\0\3\11\2\0\7\11\1\0\12\11"+
    "\1\0\1\11\1\0\1\11\44\0\2\u026a\61\0\1\11"+
    "\3\0\3\11\1\0\10\11\1\u026a\1\u026b\1\11\1\0"+
    "\3\11\2\0\7\11\1\0\12\11\1\0\1\11\1\0"+
    "\1\11\36\0\1\u026c\70\0\1\11\3\0\3\11\1\0"+
    "\2\11\1\u026d\5\11\1\0\2\11\1\0\3\11\2\0"+
    "\7\11\1\0\12\11\1\0\1\11\1\0\1\11\44\0"+
    "\2\u026e\61\0\1\11\3\0\3\11\1\0\10\11\1\u026e"+
    "\1\u026f\1\11\1\0\3\11\2\0\7\11\1\0\12\11"+
    "\1\0\1\11\1\0\1\11\36\0\1\u0270\70\0\1\11"+
    "\3\0\3\11\1\0\2\11\1\u0271\5\11\1\0\2\11"+
    "\1\0\3\11\2\0\7\11\1\0\12\11\1\0\1\11"+
    "\1\0\1\11\32\0\1\u0272\74\0\1\11\3\0\2\11"+
    "\1\u0273\1\0\10\11\1\0\2\11\1\0\3\11\2\0"+
    "\7\11\1\0\12\11\1\0\1\11\1\0\1\11\41\0"+
    "\1\u0274\65\0\1\11\3\0\3\11\1\0\5\11\1\u0275"+
    "\2\11\1\0\2\11\1\0\3\11\2\0\7\11\1\0"+
    "\12\11\1\0\1\11\1\0\1\11\51\0\1\u0276\55\0"+
    "\1\11\3\0\3\11\1\0\10\11\1\0\2\11\1\0"+
    "\1\11\1\u0277\1\11\2\0\7\11\1\0\12\11\1\0"+
    "\1\11\1\0\1\11\52\0\1\u0278\54\0\1\11\3\0"+
    "\3\11\1\0\10\11\1\0\2\11\1\0\2\11\1\u0279"+
    "\2\0\7\11\1\0\12\11\1\0\1\11\1\0\1\11"+
    "\52\0\1\u027a\54\0\1\11\3\0\3\11\1\0\10\11"+
    "\1\0\2\11\1\0\2\11\1\u027b\2\0\7\11\1\0"+
    "\12\11\1\0\1\11\1\0\1\11\64\0\2\u027c\41\0"+
    "\1\11\3\0\3\11\1\0\10\11\1\0\2\11\1\0"+
    "\3\11\2\0\7\11\1\u027c\1\u027d\11\11\1\0\1\11"+
    "\1\0\1\11\44\0\2\u027e\61\0\1\11\3\0\3\11"+
    "\1\0\10\11\1\u027e\1\u027f\1\11\1\0\3\11\2\0"+
    "\7\11\1\0\12\11\1\0\1\11\1\0\1\11\40\0"+
    "\1\u0280\66\0\1\11\3\0\3\11\1\0\4\11\1\u0281"+
    "\3\11\1\0\2\11\1\0\3\11\2\0\7\11\1\0"+
    "\12\11\1\0\1\11\1\0\1\11\67\0\1\u0282\37\0"+
    "\1\11\3\0\3\11\1\0\10\11\1\0\2\11\1\0"+
    "\3\11\2\0\7\11\1\0\2\11\1\u0283\7\11\1\0"+
    "\1\11\1\0\1\11\72\0\1\u0284\34\0\1\11\3\0"+
    "\3\11\1\0\10\11\1\0\2\11\1\0\3\11\2\0"+
    "\7\11\1\0\5\11\1\u0285\4\11\1\0\1\11\1\0"+
    "\1\11\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[32964];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\21\1\1\11\11\1\1\11"+
    "\2\1\11\11\3\1\1\11\1\1\1\11\1\1\1\0"+
    "\1\11\1\0\17\1\5\0\5\1\3\0\1\1\1\0"+
    "\2\11\2\1\1\0\3\1\1\0\1\1\1\11\3\1"+
    "\3\0\15\1\14\11\1\1\1\0\6\1\1\0\2\1"+
    "\1\0\13\1\6\0\6\1\2\0\1\11\1\0\7\11"+
    "\1\0\1\11\6\0\1\11\1\0\2\1\1\0\5\1"+
    "\1\0\4\1\1\0\1\11\1\0\3\1\1\0\12\1"+
    "\1\0\3\1\1\0\6\1\1\0\2\1\1\0\4\1"+
    "\1\0\4\1\1\0\3\1\6\0\6\1\1\11\23\0"+
    "\1\11\1\0\2\1\1\0\5\1\1\0\1\1\1\0"+
    "\4\1\2\0\2\1\1\0\3\1\1\0\2\1\1\0"+
    "\3\1\1\0\2\1\1\11\4\1\1\0\5\1\1\11"+
    "\1\1\1\0\1\1\1\11\1\1\1\0\3\1\1\0"+
    "\2\1\1\0\1\1\1\11\2\1\1\11\3\0\2\11"+
    "\5\1\6\0\1\11\1\0\7\11\1\0\1\11\3\0"+
    "\7\1\1\0\1\1\1\0\1\1\2\0\3\1\1\0"+
    "\2\1\2\0\2\1\1\11\3\1\1\0\2\1\1\0"+
    "\1\1\1\0\1\1\1\0\5\1\1\11\4\1\1\0"+
    "\1\1\1\0\3\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\2\11\2\1\3\11\1\0"+
    "\1\11\5\0\1\11\2\1\1\0\4\1\1\0\1\1"+
    "\1\11\1\1\2\0\3\1\1\0\2\1\1\11\1\0"+
    "\2\1\1\0\2\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\6\1\1\0\1\1\1\0"+
    "\3\1\1\11\1\1\1\0\1\1\1\0\1\1\1\11"+
    "\1\1\1\0\3\11\2\0\1\11\1\0\2\1\1\0"+
    "\2\1\1\0\1\1\2\0\3\1\1\0\2\1\1\0"+
    "\1\1\1\0\2\1\1\11\1\1\1\0\1\1\1\11"+
    "\1\1\1\11\1\1\1\11\2\1\1\0\1\1\1\0"+
    "\1\1\1\11\3\1\1\0\1\1\1\11\1\1\1\0"+
    "\2\11\1\0\2\1\1\0\2\1\1\0\1\1\2\0"+
    "\2\1\1\0\1\1\1\0\1\1\1\0\1\1\1\11"+
    "\2\1\1\0\2\1\1\0\1\1\1\11\3\1\1\11"+
    "\1\1\1\0\1\11\2\1\1\0\2\1\1\11\1\1"+
    "\2\0\2\1\1\0\1\1\1\11\1\1\1\11\1\1"+
    "\1\0\1\1\1\11\2\1\1\11\1\0\1\1\1\0"+
    "\1\11\2\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\11\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\11\1\1\1\0\1\1\1\11\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[645];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    //codigo de java
    String nombre;
    public void imprimir(String dato,String cadena){
    	//System.out.println(dato+" : "+cadena);
    }
    public void imprimir(String cadena){
    	//System.out.println(cadena+" soy reservada");
    }

    public ArrayList erroresL = new ArrayList();
    Sintactico sin = new Sintactico();



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 260) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.err.println("Error lexico: "+yytext()+ " Linea:"+(yyline+1)+" Columna:"+(yycolumn+1));

        erroresL.add("Error lexico: "+yytext()+ " Linea:"+(yyline+1)+" Columna:"+(yycolumn+1)+"\n");
            }
          case 132: break;
          case 2: 
            { return new Symbol(sym.entero,yycolumn,yyline,yytext());
            }
          case 133: break;
          case 3: 
            { return new Symbol(sym.punto,yycolumn,yyline,yytext());
            }
          case 134: break;
          case 4: 
            { /* Se ignoran */
            }
          case 135: break;
          case 5: 
            { return new Symbol(sym.iden,yycolumn,yyline,yytext());
            }
          case 136: break;
          case 6: 
            { return new Symbol(sym.menorq,yycolumn,yyline,yytext());
            }
          case 137: break;
          case 7: 
            { return new Symbol(sym.mayorq,yycolumn,yyline,yytext());
            }
          case 138: break;
          case 8: 
            { return new Symbol(sym.div,yycolumn,yyline,yytext());
            }
          case 139: break;
          case 9: 
            { return new Symbol(sym.menos,yycolumn,yyline,yytext());
            }
          case 140: break;
          case 10: 
            { return new Symbol(sym.mas,yycolumn,yyline,yytext());
            }
          case 141: break;
          case 11: 
            { return new Symbol(sym.mul,yycolumn,yyline,yytext());
            }
          case 142: break;
          case 12: 
            { return new Symbol(sym.modulo,yycolumn,yyline,yytext());
            }
          case 143: break;
          case 13: 
            { return new Symbol(sym.igual,yycolumn,yyline,yytext());
            }
          case 144: break;
          case 14: 
            { return new Symbol(sym.not,yycolumn,yyline,yytext());
            }
          case 145: break;
          case 15: 
            { return new Symbol(sym.coma,yycolumn,yyline,yytext());
            }
          case 146: break;
          case 16: 
            { return new Symbol(sym.puntoYcoma,yycolumn,yyline,yytext());
            }
          case 147: break;
          case 17: 
            { return new Symbol(sym.dosPuntos,yycolumn,yyline,yytext());
            }
          case 148: break;
          case 18: 
            { return new Symbol(sym.parA,yycolumn,yyline,yytext());
            }
          case 149: break;
          case 19: 
            { return new Symbol(sym.parC,yycolumn,yyline,yytext());
            }
          case 150: break;
          case 20: 
            { return new Symbol(sym.corA,yycolumn,yyline,yytext());
            }
          case 151: break;
          case 21: 
            { return new Symbol(sym.corC,yycolumn,yyline,yytext());
            }
          case 152: break;
          case 22: 
            { return new Symbol(sym.llavA,yycolumn,yyline,yytext());
            }
          case 153: break;
          case 23: 
            { return new Symbol(sym.llavC,yycolumn,yyline,yytext());
            }
          case 154: break;
          case 24: 
            { 
            }
          case 155: break;
          case 25: 
            { yybegin(YYINITIAL);
            }
          case 156: break;
          case 26: 
            { return new Symbol(sym.decimal,yycolumn,yyline,yytext());
            }
          case 157: break;
          case 27: 
            { return new Symbol(sym.cadena,yycolumn,yyline,yytext());
            }
          case 158: break;
          case 28: 
            { yybegin(COMENTARIO1);sin.al.add("comentario multilinea");
            }
          case 159: break;
          case 29: 
            { return new Symbol(sym.pA,yycolumn,yyline,yytext());
            }
          case 160: break;
          case 30: 
            { return new Symbol(sym.menorIgual,yycolumn,yyline,yytext());
            }
          case 161: break;
          case 31: 
            { return new Symbol(sym.mayorIgual,yycolumn,yyline,yytext());
            }
          case 162: break;
          case 32: 
            { yybegin(COMENTARIO2);sin.al.add("comentario de una linea");
            }
          case 163: break;
          case 33: 
            { return new Symbol(sym.decre,yycolumn,yyline,yytext());
            }
          case 164: break;
          case 34: 
            { return new Symbol(sym.menosIgual,yycolumn,yyline,yytext());
            }
          case 165: break;
          case 35: 
            { return new Symbol(sym.incre,yycolumn,yyline,yytext());
            }
          case 166: break;
          case 36: 
            { return new Symbol(sym.masIgual,yycolumn,yyline,yytext());
            }
          case 167: break;
          case 37: 
            { return new Symbol(sym.mulIgual,yycolumn,yyline,yytext());
            }
          case 168: break;
          case 38: 
            { return new Symbol(sym.igualIgual,yycolumn,yyline,yytext());
            }
          case 169: break;
          case 39: 
            { return new Symbol(sym.noIgual,yycolumn,yyline,yytext());
            }
          case 170: break;
          case 40: 
            { return new Symbol(sym.dobleDolar,yycolumn,yyline,yytext());
            }
          case 171: break;
          case 41: 
            { return new Symbol(sym.and,yycolumn,yyline,yytext());
            }
          case 172: break;
          case 42: 
            { return new Symbol(sym.or,yycolumn,yyline,yytext());
            }
          case 173: break;
          case 43: 
            { return new Symbol(sym.caracter,yycolumn,yyline,yytext());
            }
          case 174: break;
          case 44: 
            { return new Symbol(sym.h1A,yycolumn,yyline,yytext());
            }
          case 175: break;
          case 45: 
            { return new Symbol(sym.h2A,yycolumn,yyline,yytext());
            }
          case 176: break;
          case 46: 
            { return new Symbol(sym.h3A,yycolumn,yyline,yytext());
            }
          case 177: break;
          case 47: 
            { return new Symbol(sym.h4A,yycolumn,yyline,yytext());
            }
          case 178: break;
          case 48: 
            { return new Symbol(sym.h5A,yycolumn,yyline,yytext());
            }
          case 179: break;
          case 49: 
            { return new Symbol(sym.h6A,yycolumn,yyline,yytext());
            }
          case 180: break;
          case 50: 
            { return new Symbol(sym.trA,yycolumn,yyline,yytext());
            }
          case 181: break;
          case 51: 
            { return new Symbol(sym.tdA,yycolumn,yyline,yytext());
            }
          case 182: break;
          case 52: 
            { return new Symbol(sym.thA,yycolumn,yyline,yytext());
            }
          case 183: break;
          case 53: 
            { return new Symbol(sym.br,yycolumn,yyline,yytext());
            }
          case 184: break;
          case 54: 
            { return new Symbol(sym.resInt,yycolumn,yyline,yytext());
            }
          case 185: break;
          case 55: 
            { return new Symbol(sym.rojo,yycolumn,yyline,yytext());
            }
          case 186: break;
          case 56: 
            { return new Symbol(sym.azul,yycolumn,yyline,yytext());
            }
          case 187: break;
          case 57: 
            { return new Symbol(sym.fon,yycolumn,yyline,yytext());
            }
          case 188: break;
          case 58: 
            { return new Symbol(sym.divA,yycolumn,yyline,yytext());
            }
          case 189: break;
          case 59: 
            { return new Symbol(sym.pC,yycolumn,yyline,yytext());
            }
          case 190: break;
          case 60: 
            { return new Symbol(sym.resChar,yycolumn,yyline,yytext());
            }
          case 191: break;
          case 61: 
            { return new Symbol(sym.gris,yycolumn,yyline,yytext());
            }
          case 192: break;
          case 62: 
            { return new Symbol(sym.verde,yycolumn,yyline,yytext());
            }
          case 193: break;
          case 63: 
            { return new Symbol(sym.roman,yycolumn,yyline,yytext());
            }
          case 194: break;
          case 64: 
            { return new Symbol(sym.arial,yycolumn,yyline,yytext());
            }
          case 195: break;
          case 65: 
            { return new Symbol(sym.alig,yycolumn,yyline,yytext());
            }
          case 196: break;
          case 66: 
            { return new Symbol(sym.bool,yycolumn,yyline,yytext());
            }
          case 197: break;
          case 67: 
            { return new Symbol(sym.serif,yycolumn,yyline,yytext());
            }
          case 198: break;
          case 68: 
            { return new Symbol(sym.resScore,yycolumn,yyline,yytext());
            }
          case 199: break;
          case 69: 
            { return new Symbol(sym.swss,yycolumn,yyline,yytext());
            }
          case 200: break;
          case 70: 
            { return new Symbol(sym.h1C,yycolumn,yyline,yytext());
            }
          case 201: break;
          case 71: 
            { return new Symbol(sym.h2C,yycolumn,yyline,yytext());
            }
          case 202: break;
          case 72: 
            { return new Symbol(sym.h3C,yycolumn,yyline,yytext());
            }
          case 203: break;
          case 73: 
            { return new Symbol(sym.h4C,yycolumn,yyline,yytext());
            }
          case 204: break;
          case 74: 
            { return new Symbol(sym.h5C,yycolumn,yyline,yytext());
            }
          case 205: break;
          case 75: 
            { return new Symbol(sym.h6C,yycolumn,yyline,yytext());
            }
          case 206: break;
          case 76: 
            { return new Symbol(sym.trC,yycolumn,yyline,yytext());
            }
          case 207: break;
          case 77: 
            { return new Symbol(sym.tdC,yycolumn,yyline,yytext());
            }
          case 208: break;
          case 78: 
            { return new Symbol(sym.thC,yycolumn,yyline,yytext());
            }
          case 209: break;
          case 79: 
            { return new Symbol(sym.tms,yycolumn,yyline,yytext());
            }
          case 210: break;
          case 80: 
            { return new Symbol(sym.resPrint,yycolumn,yyline,yytext());
            }
          case 211: break;
          case 81: 
            { return new Symbol(sym.col,yycolumn,yyline,yytext());
            }
          case 212: break;
          case 82: 
            { return new Symbol(sym.resResult,yycolumn,yyline,yytext());
            }
          case 213: break;
          case 83: 
            { return new Symbol(sym.resDouble,yycolumn,yyline,yytext());
            }
          case 214: break;
          case 84: 
            { return new Symbol(sym.resString,yycolumn,yyline,yytext());
            }
          case 215: break;
          case 85: 
            { return new Symbol(sym.scri,yycolumn,yyline,yytext());
            }
          case 216: break;
          case 86: 
            { return new Symbol(sym.headA,yycolumn,yyline,yytext());
            }
          case 217: break;
          case 87: 
            { return new Symbol(sym.htmlA,yycolumn,yyline,yytext());
            }
          case 218: break;
          case 88: 
            { return new Symbol(sym.tableA,yycolumn,yyline,yytext());
            }
          case 219: break;
          case 89: 
            { return new Symbol(sym.divC,yycolumn,yyline,yytext());
            }
          case 220: break;
          case 90: 
            { return new Symbol(sym.bodyA,yycolumn,yyline,yytext());
            }
          case 221: break;
          case 91: 
            { return new Symbol(sym.morado,yycolumn,yyline,yytext());
            }
          case 222: break;
          case 92: 
            { return new Symbol(sym.modern,yycolumn,yyline,yytext());
            }
          case 223: break;
          case 93: 
            { return new Symbol(sym.minion,yycolumn,yyline,yytext());
            }
          case 224: break;
          case 94: 
            { return new Symbol(sym.impact,yycolumn,yyline,yytext());
            }
          case 225: break;
          case 95: 
            { return new Symbol(sym.ver,yycolumn,yyline,yytext());
            }
          case 226: break;
          case 96: 
            { return new Symbol(sym.derecha,yycolumn,yyline,yytext());
            }
          case 227: break;
          case 97: 
            { return new Symbol(sym.antiq,yycolumn,yyline,yytext());
            }
          case 228: break;
          case 98: 
            { return new Symbol(sym.fanta,yycolumn,yyline,yytext());
            }
          case 229: break;
          case 99: 
            { return new Symbol(sym.titleA,yycolumn,yyline,yytext());
            }
          case 230: break;
          case 100: 
            { return new Symbol(sym.headC,yycolumn,yyline,yytext());
            }
          case 231: break;
          case 101: 
            { return new Symbol(sym.htmlC,yycolumn,yyline,yytext());
            }
          case 232: break;
          case 102: 
            { return new Symbol(sym.bodyC,yycolumn,yyline,yytext());
            }
          case 233: break;
          case 103: 
            { return new Symbol(sym.resBoolean,yycolumn,yyline,yytext());
            }
          case 234: break;
          case 104: 
            { return new Symbol(sym.calib,yycolumn,yyline,yytext());
            }
          case 235: break;
          case 105: 
            { return new Symbol(sym.cour,yycolumn,yyline,yytext());
            }
          case 236: break;
          case 106: 
            { return new Symbol(sym.curs,yycolumn,yyline,yytext());
            }
          case 237: break;
          case 107: 
            { return new Symbol(sym.georg,yycolumn,yyline,yytext());
            }
          case 238: break;
          case 108: 
            { return new Symbol(sym.amarillo,yycolumn,yyline,yytext());
            }
          case 239: break;
          case 109: 
            { return new Symbol(sym.frank,yycolumn,yyline,yytext());
            }
          case 240: break;
          case 110: 
            { return new Symbol(sym.tableC,yycolumn,yyline,yytext());
            }
          case 241: break;
          case 111: 
            { return new Symbol(sym.titleC,yycolumn,yyline,yytext());
            }
          case 242: break;
          case 112: 
            { return new Symbol(sym.pala,yycolumn,yyline,yytext());
            }
          case 243: break;
          case 113: 
            { return new Symbol(sym.centrado,yycolumn,yyline,yytext());
            }
          case 244: break;
          case 114: 
            { return new Symbol(sym.garam,yycolumn,yyline,yytext());
            }
          case 245: break;
          case 115: 
            { return new Symbol(sym.archi,yycolumn,yyline,yytext());
            }
          case 246: break;
          case 116: 
            { return new Symbol(sym.afb,yycolumn,yyline,yytext());
            }
          case 247: break;
          case 117: 
            { return new Symbol(sym.os,yycolumn,yyline,yytext());
            }
          case 248: break;
          case 118: 
            { return new Symbol(sym.helve,yycolumn,yyline,yytext());
            }
          case 249: break;
          case 119: 
            { return new Symbol(sym.txtcol,yycolumn,yyline,yytext());
            }
          case 250: break;
          case 120: 
            { return new Symbol(sym.tcm,yycolumn,yyline,yytext());
            }
          case 251: break;
          case 121: 
            { return new Symbol(sym.monos,yycolumn,yyline,yytext());
            }
          case 252: break;
          case 122: 
            { return new Symbol(sym.bv,yycolumn,yyline,yytext());
            }
          case 253: break;
          case 123: 
            { return new Symbol(sym.izquierda,yycolumn,yyline,yytext());
            }
          case 254: break;
          case 124: 
            { return new Symbol(sym.deco,yycolumn,yyline,yytext());
            }
          case 255: break;
          case 125: 
            { return new Symbol(sym.anaranjado,yycolumn,yyline,yytext());
            }
          case 256: break;
          case 126: 
            { return new Symbol(sym.sanss,yycolumn,yyline,yytext());
            }
          case 257: break;
          case 127: 
            { return new Symbol(sym.bg,yycolumn,yyline,yytext());
            }
          case 258: break;
          case 128: 
            { return new Symbol(sym.bl,yycolumn,yyline,yytext());
            }
          case 259: break;
          case 129: 
            { return new Symbol(sym.csm,yycolumn,yyline,yytext());
            }
          case 260: break;
          case 130: 
            { return new Symbol(sym.bf,yycolumn,yyline,yytext());
            }
          case 261: break;
          case 131: 
            { return new Symbol(sym.tnr,yycolumn,yyline,yytext());
            }
          case 262: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
