/* The following code was generated by JFlex 1.6.1 */


package Analisis;
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java.util.ArrayList;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/Analisis/Scanner.jflex</tt>
 */
public class Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMENTARIO1 = 2;
  public static final int COMENTARIO2 = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\0\1\32\1\42\1\4\1\103\1\102\1\102\22\0\1\53\1\65"+
    "\1\3\1\0\1\77\1\63\1\100\1\7\1\71\1\72\1\61\1\60"+
    "\1\66\1\56\1\2\1\62\1\1\1\22\1\33\1\34\1\35\1\36"+
    "\1\37\3\1\1\70\1\67\1\23\1\64\1\27\2\0\1\14\1\30"+
    "\1\52\1\13\1\11\1\16\1\47\1\24\1\41\1\44\1\55\1\17"+
    "\1\26\1\50\1\15\1\43\1\51\1\12\1\21\1\25\1\46\1\10"+
    "\1\57\1\5\1\31\1\45\1\73\1\0\1\74\1\0\1\6\1\0"+
    "\1\14\1\30\1\52\1\13\1\11\1\16\1\47\1\24\1\41\1\44"+
    "\1\55\1\17\1\26\1\50\1\15\1\43\1\51\1\12\1\21\1\25"+
    "\1\46\1\10\1\57\1\5\1\31\1\45\1\75\1\101\1\76\7\0"+
    "\1\103\113\0\1\5\37\0\1\5\76\0\2\40\115\0\1\20\u1ea8\0"+
    "\1\103\1\103\u0100\0\1\54\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\1\1\4\1\5\1\1"+
    "\6\5\1\1\1\5\1\6\3\5\1\7\1\5\1\1"+
    "\4\5\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\3\1\1\30\1\1\1\31\1\32\1\0\1\33"+
    "\1\0\15\5\5\0\5\5\6\0\1\34\1\35\1\36"+
    "\1\5\1\0\3\5\1\0\1\5\1\37\3\5\3\0"+
    "\15\5\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\5\1\0\6\5"+
    "\1\0\13\5\6\0\6\5\2\0\1\54\1\0\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\0\1\64"+
    "\1\0\1\65\10\0\1\66\1\5\1\0\1\5\1\0"+
    "\3\5\1\0\4\5\2\0\1\67\2\5\1\67\1\0"+
    "\3\5\1\0\11\5\1\0\2\5\1\70\3\5\1\0"+
    "\3\5\1\71\2\5\1\0\3\5\1\0\2\5\6\0"+
    "\6\5\1\72\1\0\1\73\1\0\1\74\1\75\1\76"+
    "\1\77\1\100\3\0\1\101\1\0\1\102\1\103\1\0"+
    "\1\104\1\0\1\5\1\0\1\5\1\0\3\5\1\0"+
    "\1\5\1\0\4\5\2\0\2\5\1\0\3\5\2\105"+
    "\2\5\1\0\1\5\1\0\2\5\1\106\1\0\1\5"+
    "\1\107\1\5\1\0\1\5\1\110\3\5\2\111\1\0"+
    "\1\5\1\0\3\5\1\0\1\5\2\0\1\5\2\112"+
    "\1\5\1\113\3\0\1\114\1\115\1\113\2\5\1\114"+
    "\1\115\1\116\1\117\1\120\2\0\1\121\3\0\1\5"+
    "\2\122\1\0\2\5\1\0\1\5\1\0\1\5\2\0"+
    "\4\5\1\0\1\5\2\0\2\5\2\123\4\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\3\5\2\124"+
    "\2\5\1\125\1\0\1\5\1\0\3\5\1\0\1\5"+
    "\2\0\1\5\1\0\1\5\1\0\1\126\1\127\1\126"+
    "\1\127\1\130\1\131\1\132\1\133\1\134\2\0\1\5"+
    "\2\0\1\135\1\136\1\0\1\5\2\137\2\0\4\5"+
    "\1\0\1\5\1\140\1\0\1\140\1\5\1\0\1\5"+
    "\1\0\3\5\1\0\1\5\2\0\1\5\1\0\2\5"+
    "\1\141\1\142\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\2\143\2\0\1\5\2\144\1\0\1\145\1\146"+
    "\1\0\1\5\3\0\1\5\2\0\2\5\1\147\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\2\150\2\5"+
    "\2\151\1\0\2\152\2\153\1\0\1\5\1\0\1\5"+
    "\2\154\1\0\1\5\1\0\2\155\2\0\1\5\3\0"+
    "\1\5\2\0\2\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\2\156\1\157\1\160\2\0\1\5\2\161\1\162"+
    "\1\5\1\163\1\0\2\164\1\0\1\165\2\166\2\0"+
    "\2\5\2\167\1\0\1\5\2\170\1\0\2\171\1\172"+
    "\1\173\2\0\1\174\1\5\1\174\1\0\1\5\3\0"+
    "\1\5\2\175\3\0\1\5\3\0\1\5\1\176\1\0"+
    "\2\177\1\200";

  private static int [] zzUnpackAction() {
    int [] result = new int[583];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\314\0\u0154\0\u0198"+
    "\0\u01dc\0\u0220\0\u0264\0\u02a8\0\u02ec\0\u0330\0\u0374\0\u03b8"+
    "\0\u03fc\0\u0440\0\u0484\0\u04c8\0\u050c\0\u0550\0\u0594\0\u05d8"+
    "\0\u061c\0\u0660\0\u06a4\0\u06e8\0\u072c\0\u0770\0\u07b4\0\u07f8"+
    "\0\314\0\314\0\u083c\0\u0880\0\314\0\314\0\314\0\314"+
    "\0\314\0\314\0\314\0\314\0\314\0\u08c4\0\u0908\0\u094c"+
    "\0\314\0\u0990\0\314\0\u09d4\0\u0154\0\314\0\u0a18\0\u0a5c"+
    "\0\u0aa0\0\u0ae4\0\u0b28\0\u0b6c\0\u0bb0\0\u0bf4\0\u0c38\0\u0c7c"+
    "\0\u0cc0\0\u0d04\0\u0d48\0\u0d8c\0\u0dd0\0\u0e14\0\u0e58\0\u0e9c"+
    "\0\u0ee0\0\u0f24\0\u0f68\0\u0fac\0\u0ff0\0\u1034\0\u1078\0\u10bc"+
    "\0\u1100\0\u1144\0\u1188\0\u11cc\0\u1210\0\314\0\314\0\u1254"+
    "\0\u1298\0\u12dc\0\u1320\0\u1364\0\u13a8\0\u13ec\0\314\0\u1430"+
    "\0\u1474\0\u14b8\0\u14fc\0\u1540\0\u1584\0\u15c8\0\u160c\0\u1650"+
    "\0\u1694\0\u16d8\0\u171c\0\u1760\0\u17a4\0\u17e8\0\u182c\0\u1870"+
    "\0\u18b4\0\u18f8\0\314\0\314\0\314\0\314\0\314\0\314"+
    "\0\314\0\314\0\314\0\314\0\314\0\314\0\u193c\0\u1980"+
    "\0\u19c4\0\u1a08\0\u1a4c\0\u1a90\0\u1ad4\0\u1b18\0\u1b5c\0\u1ba0"+
    "\0\u1be4\0\u1c28\0\u1c6c\0\u1cb0\0\u1cf4\0\u1d38\0\u1d7c\0\u1dc0"+
    "\0\u1e04\0\u1e48\0\u1e8c\0\u1ed0\0\u1f14\0\u1f58\0\u1f9c\0\u1fe0"+
    "\0\u2024\0\u2068\0\u20ac\0\u20f0\0\u2134\0\u2178\0\u21bc\0\u2200"+
    "\0\u2244\0\u2288\0\u22cc\0\u2310\0\u2354\0\u2398\0\u23dc\0\314"+
    "\0\314\0\u2420\0\314\0\u2464\0\314\0\u24a8\0\u24ec\0\u2530"+
    "\0\u2574\0\u25b8\0\u25fc\0\u2640\0\u2684\0\314\0\u26c8\0\u270c"+
    "\0\u2750\0\u2794\0\u27d8\0\u281c\0\u2860\0\u28a4\0\u28e8\0\u292c"+
    "\0\u2970\0\u29b4\0\u29f8\0\u2a3c\0\314\0\u2a80\0\u2ac4\0\u01dc"+
    "\0\u2b08\0\u2b4c\0\u2b90\0\u2bd4\0\u2c18\0\u2c5c\0\u2ca0\0\u2ce4"+
    "\0\u2d28\0\u2d6c\0\u2db0\0\u2df4\0\u2e38\0\u2e7c\0\u2ec0\0\u2f04"+
    "\0\u2f48\0\u01dc\0\u2f8c\0\u2fd0\0\u3014\0\u3058\0\u309c\0\u30e0"+
    "\0\u3124\0\u01dc\0\u3168\0\u31ac\0\u31f0\0\u3234\0\u3278\0\u32bc"+
    "\0\u3300\0\u3344\0\u3388\0\u33cc\0\u3410\0\u3454\0\u3498\0\u34dc"+
    "\0\u3520\0\u3564\0\u35a8\0\u35ec\0\u3630\0\u3674\0\u36b8\0\u36fc"+
    "\0\u3740\0\314\0\u3784\0\314\0\314\0\314\0\314\0\314"+
    "\0\u37c8\0\u380c\0\u3850\0\314\0\u3894\0\314\0\314\0\u38d8"+
    "\0\314\0\u391c\0\u3960\0\u39a4\0\u39e8\0\u3a2c\0\u3a70\0\u3ab4"+
    "\0\u3af8\0\u3b3c\0\u3b80\0\u3bc4\0\u3c08\0\u3c4c\0\u3c90\0\u3cd4"+
    "\0\u3d18\0\u3d5c\0\u3da0\0\u3de4\0\u3e28\0\u3e6c\0\u3eb0\0\u3ef4"+
    "\0\314\0\u01dc\0\u3f38\0\u3f7c\0\u3fc0\0\u4004\0\u4048\0\u408c"+
    "\0\u40d0\0\u01dc\0\u4114\0\u4158\0\u01dc\0\u419c\0\u41e0\0\u4224"+
    "\0\u01dc\0\u4268\0\u42ac\0\u42f0\0\314\0\u01dc\0\u4334\0\u4378"+
    "\0\u43bc\0\u4400\0\u4444\0\u4488\0\u44cc\0\u4510\0\u4554\0\u4598"+
    "\0\u45dc\0\314\0\u01dc\0\u4620\0\314\0\u4664\0\u46a8\0\u46ec"+
    "\0\314\0\314\0\u01dc\0\u4730\0\u4774\0\u01dc\0\u01dc\0\314"+
    "\0\u47b8\0\u47fc\0\u4840\0\u4884\0\314\0\u48c8\0\u490c\0\u4950"+
    "\0\u4994\0\u49d8\0\u4a1c\0\u4a60\0\u4aa4\0\u4ae8\0\u4b2c\0\u4b70"+
    "\0\u4bb4\0\u4bf8\0\u4c3c\0\u4c80\0\u4cc4\0\u4d08\0\u4d4c\0\u4d90"+
    "\0\u4dd4\0\u4e18\0\u4e5c\0\u4ea0\0\u4ee4\0\u4f28\0\314\0\u01dc"+
    "\0\u4f6c\0\u4fb0\0\u4ff4\0\u5038\0\u507c\0\u50c0\0\u5104\0\u5148"+
    "\0\u518c\0\u51d0\0\u5214\0\u5258\0\u529c\0\u52e0\0\314\0\u01dc"+
    "\0\u5324\0\u5368\0\u01dc\0\u53ac\0\u53f0\0\u5434\0\u5478\0\u54bc"+
    "\0\u5500\0\u5544\0\u5588\0\u55cc\0\u5610\0\u5654\0\u5698\0\u56dc"+
    "\0\u5720\0\314\0\314\0\u01dc\0\u01dc\0\314\0\314\0\314"+
    "\0\314\0\314\0\u5764\0\u57a8\0\u57ec\0\u5830\0\u5874\0\u01dc"+
    "\0\u01dc\0\u58b8\0\u58fc\0\314\0\u01dc\0\u5940\0\u5984\0\u59c8"+
    "\0\u5a0c\0\u5a50\0\u5a94\0\u5ad8\0\u5b1c\0\314\0\u5b60\0\u01dc"+
    "\0\u5ba4\0\u5be8\0\u5c2c\0\u5c70\0\u5cb4\0\u5cf8\0\u5d3c\0\u5d80"+
    "\0\u5dc4\0\u5e08\0\u5e4c\0\u5e90\0\u5ed4\0\u5f18\0\u5f5c\0\u01dc"+
    "\0\u01dc\0\u5fa0\0\u5fe4\0\u6028\0\u606c\0\u60b0\0\u60f4\0\u6138"+
    "\0\314\0\u01dc\0\u617c\0\u61c0\0\u6204\0\314\0\u01dc\0\u6248"+
    "\0\314\0\314\0\u628c\0\u62d0\0\u6314\0\u6358\0\u639c\0\u63e0"+
    "\0\u6424\0\u6468\0\u64ac\0\u64f0\0\u01dc\0\u6534\0\u6578\0\u65bc"+
    "\0\u6600\0\u6644\0\u6688\0\u66cc\0\314\0\u01dc\0\u6710\0\u6754"+
    "\0\314\0\u01dc\0\u6798\0\314\0\u01dc\0\314\0\u01dc\0\u67dc"+
    "\0\u6820\0\u6864\0\u68a8\0\314\0\u01dc\0\u68ec\0\u6930\0\u6974"+
    "\0\314\0\u01dc\0\u69b8\0\u69fc\0\u6a40\0\u6a84\0\u6ac8\0\u6b0c"+
    "\0\u6b50\0\u6b94\0\u6bd8\0\u6c1c\0\u6c60\0\u6ca4\0\u6ce8\0\u6d2c"+
    "\0\u6d70\0\u6db4\0\u6df8\0\314\0\u01dc\0\u01dc\0\u01dc\0\u6e3c"+
    "\0\u6e80\0\u6ec4\0\314\0\u01dc\0\314\0\u6f08\0\314\0\u6f4c"+
    "\0\314\0\u01dc\0\u6f90\0\314\0\314\0\u01dc\0\u6fd4\0\u7018"+
    "\0\u705c\0\u70a0\0\314\0\u01dc\0\u70e4\0\u7128\0\314\0\u01dc"+
    "\0\u716c\0\314\0\u01dc\0\u01dc\0\314\0\u71b0\0\u71f4\0\314"+
    "\0\u7238\0\u01dc\0\u727c\0\u72c0\0\u7304\0\u7348\0\u738c\0\u73d0"+
    "\0\314\0\u01dc\0\u7414\0\u7458\0\u749c\0\u74e0\0\u7524\0\u7568"+
    "\0\u75ac\0\u75f0\0\314\0\u7634\0\314\0\u01dc\0\314";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[583];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\4\1\12"+
    "\1\13\1\11\1\14\1\15\1\16\1\17\1\20\1\11"+
    "\1\21\1\22\1\5\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\11\1\4\5\5\1\31\1\32\1\10\1\33"+
    "\3\11\1\34\2\11\1\35\1\10\1\4\1\11\1\36"+
    "\1\11\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\10\1\0\27\61\1\4\32\61"+
    "\1\62\25\61\1\63\77\61\105\0\1\5\1\64\17\0"+
    "\1\5\10\0\5\5\44\0\3\65\2\66\77\65\4\0"+
    "\1\10\35\0\1\10\10\0\1\10\26\0\1\10\2\0"+
    "\1\11\3\0\2\11\1\0\10\11\1\0\2\11\1\0"+
    "\3\11\1\0\2\11\1\0\5\11\1\0\1\11\1\0"+
    "\10\11\2\0\1\11\1\0\1\11\24\0\104\67\1\0"+
    "\1\11\3\0\2\11\1\0\1\11\1\70\6\11\1\0"+
    "\2\11\1\0\3\11\1\0\2\11\1\0\5\11\1\0"+
    "\1\11\1\0\10\11\2\0\1\11\1\0\1\11\25\0"+
    "\1\11\3\0\2\11\1\0\1\11\1\71\3\11\1\72"+
    "\2\11\1\0\2\11\1\0\3\11\1\0\2\11\1\0"+
    "\5\11\1\0\1\11\1\0\10\11\2\0\1\11\1\0"+
    "\1\11\25\0\1\11\3\0\2\11\1\0\1\11\1\73"+
    "\3\11\1\74\2\11\1\0\2\11\1\0\3\11\1\0"+
    "\2\11\1\0\5\11\1\0\1\11\1\0\10\11\2\0"+
    "\1\11\1\0\1\11\25\0\1\11\3\0\2\11\1\0"+
    "\2\11\1\75\5\11\1\0\2\11\1\0\2\11\1\76"+
    "\1\0\2\11\1\0\5\11\1\0\1\11\1\0\2\11"+
    "\1\77\1\11\1\100\1\101\2\11\2\0\1\11\1\0"+
    "\1\11\25\0\1\11\3\0\2\11\1\0\10\11\1\0"+
    "\2\11\1\0\3\11\1\0\2\11\1\0\5\11\1\0"+
    "\1\11\1\0\1\102\7\11\2\0\1\11\1\0\1\11"+
    "\25\0\1\11\3\0\2\11\1\0\2\11\1\103\1\11"+
    "\1\104\3\11\1\0\2\11\1\0\3\11\1\0\2\11"+
    "\1\0\5\11\1\0\1\11\1\0\10\11\2\0\1\11"+
    "\1\0\1\11\35\0\1\105\2\0\1\106\10\0\1\107"+
    "\24\0\1\110\4\0\1\111\25\0\1\11\3\0\2\11"+
    "\1\0\1\11\1\112\2\11\1\113\3\11\1\0\2\11"+
    "\1\0\1\11\1\114\1\11\1\0\2\11\1\0\5\11"+
    "\1\0\1\11\1\0\7\11\1\115\2\0\1\11\1\0"+
    "\1\116\37\0\1\117\10\0\1\120\1\121\2\0\1\122"+
    "\1\0\1\123\7\0\1\124\1\125\16\0\1\126\1\0"+
    "\1\127\20\0\1\11\3\0\2\11\1\0\1\11\1\130"+
    "\6\11\1\0\2\11\1\0\3\11\1\0\2\11\1\0"+
    "\5\11\1\0\1\11\1\0\10\11\2\0\1\11\1\0"+
    "\1\11\25\0\1\11\3\0\2\11\1\0\10\11\1\0"+
    "\2\11\1\0\3\11\1\0\2\11\1\0\5\11\1\131"+
    "\1\132\1\0\10\11\2\0\1\11\1\0\1\133\25\0"+
    "\1\11\3\0\2\11\1\0\5\11\1\134\2\11\1\0"+
    "\2\11\1\0\3\11\1\0\2\11\1\0\5\11\1\135"+
    "\1\136\1\0\10\11\2\0\1\11\1\0\1\11\110\0"+
    "\1\137\20\0\1\11\3\0\2\11\1\0\4\11\1\140"+
    "\1\141\1\11\1\142\1\0\2\11\1\0\3\11\1\0"+
    "\2\11\1\0\5\11\1\0\1\11\1\0\10\11\2\0"+
    "\1\11\1\0\1\11\52\0\1\143\16\0\1\144\2\0"+
    "\1\145\34\0\1\11\3\0\2\11\1\0\10\11\1\0"+
    "\2\11\1\0\2\11\1\146\1\0\2\11\1\0\5\11"+
    "\1\0\1\11\1\0\2\11\1\147\2\11\1\150\2\11"+
    "\2\0\1\11\1\0\1\11\25\0\1\11\3\0\2\11"+
    "\1\0\2\11\1\151\1\11\1\152\3\11\1\0\2\11"+
    "\1\0\3\11\1\0\2\11\1\0\5\11\1\0\1\11"+
    "\1\0\10\11\2\0\1\11\1\0\1\11\25\0\1\11"+
    "\3\0\2\11\1\0\1\11\1\153\1\154\1\11\1\155"+
    "\3\11\1\0\2\11\1\0\3\11\1\0\2\11\1\0"+
    "\5\11\1\0\1\11\1\0\10\11\2\0\1\11\1\0"+
    "\1\11\25\0\1\11\3\0\2\11\1\0\1\11\1\156"+
    "\2\11\1\157\1\160\2\11\1\0\2\11\1\0\1\161"+
    "\2\11\1\0\2\11\1\0\5\11\1\0\1\11\1\0"+
    "\3\11\1\162\4\11\2\0\1\11\1\0\1\11\53\0"+
    "\1\163\26\0\1\164\5\0\1\165\77\0\1\166\3\0"+
    "\1\167\103\0\1\170\103\0\1\171\103\0\1\172\116\0"+
    "\1\173\104\0\1\174\104\0\1\175\31\0\1\63\55\0"+
    "\1\64\20\0\1\64\10\0\5\64\53\0\1\176\75\0"+
    "\1\11\3\0\2\11\1\0\2\11\1\177\5\11\1\0"+
    "\2\11\1\0\3\11\1\0\2\11\1\0\5\11\1\0"+
    "\1\11\1\0\10\11\2\0\1\11\1\0\1\11\25\0"+
    "\1\11\3\0\2\11\1\0\10\11\1\200\1\201\1\11"+
    "\1\0\3\11\1\0\2\11\1\0\5\11\1\0\1\11"+
    "\1\0\10\11\2\0\1\11\1\0\1\11\25\0\1\11"+
    "\3\0\2\11\1\0\10\11\1\0\2\11\1\0\2\11"+
    "\1\202\1\0\2\11\1\0\5\11\1\0\1\11\1\0"+
    "\1\11\1\203\6\11\2\0\1\11\1\0\1\11\25\0"+
    "\1\11\3\0\2\11\1\0\2\11\1\204\5\11\1\0"+
    "\2\11\1\0\3\11\1\0\2\11\1\0\5\11\1\0"+
    "\1\11\1\0\7\11\1\205\2\0\1\11\1\0\1\11"+
    "\25\0\1\11\3\0\2\11\1\0\10\11\1\0\2\11"+
    "\1\0\3\11\1\0\2\11\1\0\5\11\1\0\1\11"+
    "\1\0\3\11\1\206\4\11\2\0\1\11\1\0\1\11"+
    "\25\0\1\11\3\0\2\11\1\0\10\11\1\0\2\11"+
    "\1\0\3\11\1\0\2\11\1\0\5\11\1\207\1\210"+
    "\1\0\7\11\1\211\2\0\1\11\1\0\1\11\25\0"+
    "\1\11\3\0\2\11\1\0\4\11\1\212\3\11\1\0"+
    "\2\11\1\0\3\11\1\0\2\11\1\0\5\11\1\0"+
    "\1\11\1\0\10\11\2\0\1\11\1\0\1\11\25\0"+
    "\1\11\3\0\2\11\1\0\10\11\1\0\2\11\1\0"+
    "\3\11\1\0\2\11\1\0\5\11\1\0\1\11\1\0"+
    "\3\11\1\213\4\11\2\0\1\11\1\0\1\11\25\0"+
    "\1\11\3\0\2\11\1\0\1\11\1\214\6\11\1\0"+
    "\2\11\1\0\3\11\1\0\2\11\1\0\5\11\1\0"+
    "\1\11\1\0\10\11\2\0\1\11\1\0\1\11\25\0"+
    "\1\11\3\0\2\11\1\0\4\11\1\215\3\11\1\0"+
    "\2\11\1\0\1\11\1\216\1\11\1\0\2\11\1\0"+
    "\5\11\1\0\1\11\1\0\10\11\2\0\1\11\1\0"+
    "\1\11\25\0\1\11\3\0\2\11\1\0\1\11\1\217"+
    "\6\11\1\0\2\11\1\0\3\11\1\0\2\11\1\0"+
    "\5\11\1\0\1\11\1\0\10\11\2\0\1\11\1\0"+
    "\1\11\25\0\1\11\3\0\2\11\1\0\4\11\1\220"+
    "\3\11\1\0\2\11\1\0\3\11\1\0\2\11\1\0"+
    "\5\11\1\0\1\11\1\0\10\11\2\0\1\11\1\0"+
    "\1\11\25\0\1\11\3\0\2\11\1\0\7\11\1\221"+
    "\1\0\2\11\1\0\3\11\1\0\2\11\1\0\5\11"+
    "\1\0\1\11\1\0\5\11\1\222\2\11\2\0\1\11"+
    "\1\0\1\11\36\0\1\223\141\0\1\224\45\0\1\225"+
    "\103\0\1\226\2\0\1\227\126\0\2\230\43\0\1\11"+
    "\3\0\2\11\1\0\2\11\1\231\5\11\1\0\2\11"+
    "\1\0\3\11\1\0\2\11\1\0\5\11\1\0\1\11"+
    "\1\0\10\11\2\0\1\11\1\0\1\11\25\0\1\11"+
    "\3\0\2\11\1\0\10\11\1\0\2\11\1\0\3\11"+
    "\1\0\2\11\1\0\5\11\1\0\1\11\1\0\5\11"+
    "\1\232\2\11\2\0\1\11\1\0\1\11\25\0\1\11"+
    "\3\0\2\11\1\0\2\11\1\233\5\11\1\0\2\11"+
    "\1\0\3\11\1\0\2\11\1\0\5\11\1\0\1\11"+
    "\1\0\10\11\2\0\1\11\1\0\1\11\25\0\1\11"+
    "\3\0\2\11\1\0\2\11\1\234\2\11\1\235\2\11"+
    "\1\0\2\11\1\0\3\11\1\0\2\11\1\0\5\11"+
    "\1\0\1\11\1\0\10\11\2\0\1\11\1\0\1\11"+
    "\25\0\1\11\3\0\2\11\1\0\10\11\1\0\2\11"+
    "\1\0\3\11\1\0\2\11\1\0\5\11\1\230\1\236"+
    "\1\0\10\11\2\0\1\11\1\0\1\11\64\0\2\237"+
    "\53\0\1\240\10\0\1\241\2\0\1\242\5\0\1\243"+
    "\1\244\1\245\1\246\1\247\56\0\1\250\1\251\1\252"+
    "\7\0\1\253\13\0\2\254\54\0\1\255\2\0\1\256"+
    "\100\0\1\257\2\0\1\260\100\0\1\261\1\262\1\263"+
    "\7\0\1\264\13\0\2\265\71\0\1\266\55\0\1\11"+
    "\3\0\2\11\1\0\7\11\1\267\1\0\2\11\1\0"+
    "\3\11\1\0\2\11\1\0\5\11\1\0\1\11\1\0"+
    "\10\11\2\0\1\11\1\0\1\11\52\0\1\270\56\0"+
    "\1\11\3\0\2\11\1\0\10\11\1\0\2\11\1\0"+
    "\2\11\1\271\1\0\2\11\1\0\5\11\1\0\1\11"+
    "\1\0\10\11\2\0\1\11\1\0\1\11\25\0\1\11"+
    "\3\0\2\11\1\0\10\11\1\0\2\11\1\0\3\11"+
    "\1\0\2\11\1\0\5\11\1\0\1\11\1\0\10\11"+
    "\1\272\1\0\1\11\1\0\1\11\25\0\1\11\3\0"+
    "\2\11\1\0\2\11\1\273\1\274\4\11\1\0\2\11"+
    "\1\0\3\11\1\0\2\11\1\0\5\11\1\0\1\11"+
    "\1\0\5\11\1\275\2\11\2\0\1\11\1\0\1\11"+
    "\74\0\1\276\34\0\1\11\3\0\2\11\1\0\10\11"+
    "\1\0\2\11\1\0\3\11\1\0\2\11\1\0\5\11"+
    "\1\0\1\11\1\0\5\11\1\277\2\11\2\0\1\11"+
    "\1\0\1\11\25\0\1\11\3\0\2\11\1\0\10\11"+
    "\1\0\2\11\1\0\3\11\1\0\2\11\1\0\5\11"+
    "\1\0\1\11\1\0\5\11\1\300\2\11\2\0\1\11"+
    "\1\0\1\11\25\0\1\11\3\0\2\11\1\0\5\11"+
    "\1\301\2\11\1\0\2\11\1\0\3\11\1\0\2\11"+
    "\1\0\5\11\1\0\1\11\1\0\10\11\2\0\1\11"+
    "\1\0\1\11\25\0\1\11\3\0\2\11\1\0\4\11"+
    "\1\302\3\11\1\0\2\11\1\0\3\11\1\0\2\11"+
    "\1\0\5\11\1\0\1\11\1\0\10\11\2\0\1\11"+
    "\1\0\1\11\67\0\1\303\111\0\1\304\57\0\1\305"+
    "\57\0\1\11\3\0\2\11\1\0\10\11\1\0\2\11"+
    "\1\0\3\11\1\0\2\11\1\0\5\11\1\0\1\11"+
    "\1\0\1\306\7\11\2\0\1\11\1\0\1\11\25\0"+
    "\1\11\3\0\2\11\1\0\10\11\1\0\2\11\1\0"+
    "\3\11\1\0\2\11\1\0\5\11\1\0\1\11\1\0"+
    "\6\11\1\307\1\11\2\0\1\11\1\0\1\11\25\0"+
    "\1\11\3\0\2\11\1\0\10\11\1\0\2\11\1\0"+
    "\1\11\1\310\1\11\1\0\2\11\1\0\5\11\1\0"+
    "\1\11\1\0\10\11\2\0\1\11\1\0\1\11\25\0"+
    "\1\11\3\0\2\11\1\0\10\11\1\0\2\11\1\0"+
    "\3\11\1\0\2\11\1\0\5\11\1\311\1\312\1\0"+
    "\10\11\2\0\1\11\1\0\1\11\25\0\1\11\3\0"+
    "\2\11\1\0\7\11\1\313\1\0\2\11\1\0\3\11"+
    "\1\0\2\11\1\0\5\11\1\0\1\11\1\0\10\11"+
    "\2\0\1\11\1\0\1\11\25\0\1\11\3\0\2\11"+
    "\1\0\5\11\1\314\2\11\1\0\2\11\1\0\3\11"+
    "\1\0\2\11\1\0\5\11\1\0\1\11\1\0\10\11"+
    "\2\0\1\11\1\0\1\11\25\0\1\11\3\0\2\11"+
    "\1\0\10\11\1\0\2\11\1\0\3\11\1\0\2\11"+
    "\1\0\5\11\1\315\1\316\1\0\10\11\2\0\1\11"+
    "\1\0\1\11\25\0\1\11\3\0\2\11\1\0\2\11"+
    "\1\317\5\11\1\0\2\11\1\0\3\11\1\0\2\11"+
    "\1\0\5\11\1\0\1\11\1\0\10\11\2\0\1\11"+
    "\1\0\1\11\25\0\1\11\3\0\2\11\1\0\10\11"+
    "\1\0\2\11\1\0\3\11\1\0\2\11\1\0\5\11"+
    "\1\0\1\11\1\0\5\11\1\320\2\11\2\0\1\11"+
    "\1\0\1\11\25\0\1\11\3\0\2\11\1\0\7\11"+
    "\1\321\1\0\2\11\1\0\3\11\1\0\2\11\1\0"+
    "\5\11\1\0\1\11\1\0\10\11\2\0\1\11\1\0"+
    "\1\11\25\0\1\11\3\0\2\11\1\0\10\11\1\0"+
    "\2\11\1\0\2\11\1\322\1\0\2\11\1\0\5\11"+
    "\1\0\1\11\1\0\3\11\1\323\4\11\2\0\1\11"+
    "\1\0\1\11\25\0\1\11\3\0\2\11\1\0\4\11"+
    "\1\324\3\11\1\0\2\11\1\0\3\11\1\0\2\11"+
    "\1\0\5\11\1\0\1\11\1\0\10\11\2\0\1\11"+
    "\1\0\1\11\25\0\1\11\3\0\2\11\1\0\2\11"+
    "\1\325\5\11\1\0\2\11\1\0\3\11\1\0\2\11"+
    "\1\0\5\11\1\0\1\11\1\0\10\11\2\0\1\11"+
    "\1\0\1\11\25\0\1\11\3\0\2\11\1\0\3\11"+
    "\1\326\4\11\1\0\2\11\1\0\3\11\1\0\2\11"+
    "\1\0\5\11\1\0\1\11\1\0\10\11\2\0\1\11"+
    "\1\0\1\11\72\0\1\327\36\0\1\11\3\0\2\11"+
    "\1\0\10\11\1\0\2\11\1\0\3\11\1\0\2\11"+
    "\1\0\5\11\1\0\1\11\1\0\3\11\1\330\4\11"+
    "\2\0\1\11\1\0\1\11\25\0\1\11\3\0\2\11"+
    "\1\0\4\11\1\331\3\11\1\0\2\11\1\0\3\11"+
    "\1\0\2\11\1\0\5\11\1\0\1\11\1\0\10\11"+
    "\2\0\1\11\1\0\1\11\25\0\1\11\3\0\2\11"+
    "\1\0\5\11\1\332\2\11\1\0\2\11\1\0\3\11"+
    "\1\0\2\11\1\0\5\11\1\0\1\11\1\0\10\11"+
    "\2\0\1\11\1\0\1\11\25\0\1\11\3\0\2\11"+
    "\1\0\1\11\1\333\6\11\1\0\2\11\1\0\3\11"+
    "\1\0\2\11\1\0\5\11\1\0\1\11\1\0\10\11"+
    "\2\0\1\11\1\0\1\11\25\0\1\11\3\0\2\11"+
    "\1\0\5\11\1\334\2\11\1\0\2\11\1\0\3\11"+
    "\1\0\2\11\1\0\5\11\1\0\1\11\1\0\10\11"+
    "\2\0\1\11\1\0\1\11\25\0\1\11\3\0\2\11"+
    "\1\0\10\11\1\0\2\11\1\0\3\11\1\0\1\335"+
    "\1\11\1\0\5\11\1\0\1\11\1\0\10\11\2\0"+
    "\1\11\1\0\1\11\40\0\1\336\70\0\1\11\3\0"+
    "\2\11\1\0\4\11\1\337\3\11\1\0\2\11\1\0"+
    "\3\11\1\0\2\11\1\0\5\11\1\0\1\11\1\0"+
    "\10\11\2\0\1\11\1\0\1\11\25\0\1\11\3\0"+
    "\2\11\1\0\10\11\1\0\2\11\1\0\1\340\2\11"+
    "\1\0\2\11\1\0\5\11\1\0\1\11\1\0\10\11"+
    "\2\0\1\11\1\0\1\11\25\0\1\11\3\0\2\11"+
    "\1\0\2\11\1\341\5\11\1\0\2\11\1\0\3\11"+
    "\1\0\2\11\1\0\5\11\1\0\1\11\1\0\10\11"+
    "\2\0\1\11\1\0\1\11\25\0\1\11\3\0\2\11"+
    "\1\0\7\11\1\342\1\0\2\11\1\0\3\11\1\0"+
    "\2\11\1\0\5\11\1\0\1\11\1\0\10\11\2\0"+
    "\1\11\1\0\1\11\25\0\1\11\3\0\2\11\1\0"+
    "\10\11\1\0\2\11\1\0\3\11\1\0\2\11\1\0"+
    "\5\11\1\0\1\11\1\0\5\11\1\343\2\11\2\0"+
    "\1\11\1\0\1\11\25\0\1\11\3\0\2\11\1\0"+
    "\2\11\1\344\5\11\1\0\2\11\1\0\3\11\1\0"+
    "\2\11\1\0\5\11\1\0\1\11\1\0\10\11\2\0"+
    "\1\11\1\0\1\11\25\0\1\11\3\0\2\11\1\0"+
    "\10\11\1\0\2\11\1\0\3\11\1\0\2\11\1\0"+
    "\5\11\1\345\1\346\1\0\10\11\2\0\1\11\1\0"+
    "\1\11\25\0\1\11\3\0\2\11\1\0\10\11\1\0"+
    "\2\11\1\0\3\11\1\0\2\11\1\0\5\11\1\0"+
    "\1\11\1\0\5\11\1\347\2\11\2\0\1\11\1\0"+
    "\1\11\25\0\1\11\3\0\2\11\1\0\10\11\1\0"+
    "\2\11\1\0\3\11\1\0\2\11\1\0\5\11\1\0"+
    "\1\11\1\0\5\11\1\350\2\11\2\0\1\11\1\0"+
    "\1\11\25\0\1\11\3\0\2\11\1\0\10\11\1\351"+
    "\1\352\1\11\1\0\3\11\1\0\2\11\1\0\5\11"+
    "\1\0\1\11\1\0\10\11\2\0\1\11\1\0\1\11"+
    "\25\0\1\11\3\0\2\11\1\0\10\11\1\0\2\11"+
    "\1\0\1\11\1\353\1\11\1\0\2\11\1\0\5\11"+
    "\1\0\1\11\1\0\10\11\2\0\1\11\1\0\1\11"+
    "\64\0\2\354\62\0\2\355\122\0\2\356\102\0\2\357"+
    "\54\0\1\360\111\0\2\361\63\0\1\11\3\0\2\11"+
    "\1\0\10\11\1\0\2\11\1\0\3\11\1\0\2\11"+
    "\1\0\5\11\1\354\1\362\1\0\10\11\2\0\1\11"+
    "\1\0\1\11\25\0\1\11\3\0\2\11\1\0\10\11"+
    "\1\355\1\363\1\11\1\0\3\11\1\0\2\11\1\0"+
    "\5\11\1\0\1\11\1\0\10\11\2\0\1\11\1\0"+
    "\1\11\25\0\1\11\3\0\2\11\1\0\10\11\1\0"+
    "\2\11\1\0\3\11\1\0\2\11\1\0\5\11\1\356"+
    "\1\364\1\0\10\11\2\0\1\11\1\0\1\11\25\0"+
    "\1\11\3\0\2\11\1\0\10\11\1\0\2\11\1\0"+
    "\3\11\1\0\2\11\1\0\5\11\1\357\1\365\1\0"+
    "\10\11\2\0\1\11\1\0\1\11\25\0\1\11\3\0"+
    "\2\11\1\0\2\11\1\366\5\11\1\0\2\11\1\0"+
    "\3\11\1\0\2\11\1\0\5\11\1\0\1\11\1\0"+
    "\10\11\2\0\1\11\1\0\1\11\25\0\1\11\3\0"+
    "\2\11\1\0\10\11\1\361\1\367\1\11\1\0\3\11"+
    "\1\0\2\11\1\0\5\11\1\0\1\11\1\0\10\11"+
    "\2\0\1\11\1\0\1\11\34\0\1\370\107\0\1\371"+
    "\116\0\1\372\102\0\1\373\104\0\1\374\103\0\1\375"+
    "\103\0\1\376\103\0\1\377\103\0\1\u0100\104\0\1\u0101"+
    "\100\0\1\u0102\71\0\1\u0103\117\0\1\u0104\67\0\1\u0105"+
    "\117\0\1\u0106\103\0\1\u0107\104\0\1\u0108\102\0\1\u0109"+
    "\101\0\1\u010a\57\0\1\11\3\0\2\11\1\0\1\u010b"+
    "\7\11\1\0\2\11\1\0\3\11\1\0\2\11\1\0"+
    "\5\11\1\0\1\11\1\0\10\11\2\0\1\11\1\0"+
    "\1\11\35\0\1\u010c\73\0\1\11\3\0\2\11\1\0"+
    "\1\11\1\u010d\6\11\1\0\2\11\1\0\3\11\1\0"+
    "\2\11\1\0\5\11\1\0\1\11\1\0\10\11\2\0"+
    "\1\11\1\0\1\11\76\0\1\u010e\32\0\1\11\3\0"+
    "\2\11\1\0\4\11\1\u010f\3\11\1\0\2\11\1\0"+
    "\3\11\1\0\2\11\1\0\5\11\1\0\1\11\1\0"+
    "\10\11\2\0\1\11\1\0\1\11\25\0\1\11\3\0"+
    "\2\11\1\0\1\11\1\u0110\6\11\1\0\2\11\1\0"+
    "\3\11\1\0\2\11\1\0\5\11\1\0\1\11\1\0"+
    "\10\11\2\0\1\11\1\0\1\11\25\0\1\11\3\0"+
    "\2\11\1\0\5\11\1\u0111\2\11\1\0\2\11\1\0"+
    "\3\11\1\0\2\11\1\0\5\11\1\0\1\11\1\0"+
    "\10\11\2\0\1\11\1\0\1\11\64\0\2\u0112\43\0"+
    "\1\11\3\0\2\11\1\0\10\11\1\0\2\11\1\0"+
    "\3\11\1\0\2\11\1\0\5\11\1\u0112\1\u0113\1\0"+
    "\10\11\2\0\1\11\1\0\1\11\25\0\1\11\3\0"+
    "\2\11\1\0\10\11\1\0\2\11\1\0\3\11\1\0"+
    "\2\11\1\0\5\11\1\0\1\11\1\0\10\11\1\0"+
    "\1\u0114\1\u0115\1\0\1\11\25\0\1\11\3\0\2\11"+
    "\1\0\7\11\1\u0116\1\0\2\11\1\0\3\11\1\0"+
    "\2\11\1\0\5\11\1\0\1\11\1\0\10\11\2\0"+
    "\1\11\1\0\1\11\25\0\1\11\3\0\2\11\1\0"+
    "\10\11\1\0\2\11\1\0\3\11\1\0\2\11\1\0"+
    "\5\11\1\0\1\11\1\0\4\11\1\u0117\2\11\1\u0118"+
    "\2\0\1\11\1\0\1\11\40\0\1\u0119\135\0\1\u011a"+
    "\36\0\1\11\3\0\2\11\1\0\4\11\1\u011b\3\11"+
    "\1\0\2\11\1\0\3\11\1\0\2\11\1\0\5\11"+
    "\1\0\1\11\1\0\10\11\2\0\1\11\1\0\1\11"+
    "\25\0\1\11\3\0\2\11\1\0\10\11\1\0\2\11"+
    "\1\0\3\11\1\0\2\11\1\0\5\11\1\0\1\11"+
    "\1\0\3\11\1\u011c\4\11\2\0\1\11\1\0\1\11"+
    "\74\0\1\u011d\34\0\1\11\3\0\2\11\1\0\10\11"+
    "\1\0\2\11\1\0\3\11\1\0\2\11\1\0\5\11"+
    "\1\0\1\11\1\0\5\11\1\u011e\2\11\2\0\1\11"+
    "\1\0\1\11\25\0\1\11\3\0\2\11\1\0\4\11"+
    "\1\u011f\3\11\1\0\2\11\1\0\3\11\1\0\2\11"+
    "\1\0\5\11\1\0\1\11\1\0\10\11\2\0\1\11"+
    "\1\0\1\11\25\0\1\11\3\0\2\11\1\0\2\11"+
    "\1\u0120\5\11\1\0\2\11\1\0\3\11\1\0\2\11"+
    "\1\0\5\11\1\0\1\11\1\0\10\11\2\0\1\11"+
    "\1\0\1\11\44\0\2\u0121\63\0\1\11\3\0\2\11"+
    "\1\0\10\11\1\u0121\1\u0122\1\11\1\0\3\11\1\0"+
    "\2\11\1\0\5\11\1\0\1\11\1\0\10\11\2\0"+
    "\1\11\1\0\1\11\25\0\1\11\3\0\2\11\1\0"+
    "\4\11\1\u0123\3\11\1\0\2\11\1\0\3\11\1\0"+
    "\2\11\1\0\5\11\1\0\1\11\1\0\10\11\2\0"+
    "\1\11\1\0\1\11\25\0\1\11\3\0\2\11\1\0"+
    "\10\11\1\0\2\11\1\0\1\11\1\u0124\1\11\1\0"+
    "\2\11\1\0\5\11\1\0\1\11\1\0\10\11\2\0"+
    "\1\11\1\0\1\11\25\0\1\11\3\0\2\11\1\0"+
    "\10\11\1\0\2\11\1\0\3\11\1\0\2\11\1\0"+
    "\5\11\1\u0125\1\u0126\1\0\10\11\2\0\1\11\1\0"+
    "\1\11\25\0\1\11\3\0\2\11\1\0\10\11\1\0"+
    "\2\11\1\0\3\11\1\0\2\11\1\0\5\11\1\u0127"+
    "\1\u0128\1\0\10\11\2\0\1\11\1\0\1\11\25\0"+
    "\1\11\3\0\2\11\1\0\2\11\1\u0129\5\11\1\0"+
    "\2\11\1\0\3\11\1\0\2\11\1\0\5\11\1\0"+
    "\1\11\1\0\10\11\2\0\1\11\1\0\1\11\25\0"+
    "\1\11\3\0\2\11\1\0\2\11\1\u012a\5\11\1\0"+
    "\2\11\1\0\3\11\1\0\2\11\1\0\5\11\1\0"+
    "\1\11\1\0\10\11\2\0\1\11\1\0\1\11\25\0"+
    "\1\11\3\0\2\11\1\0\10\11\1\u012b\1\u012c\1\11"+
    "\1\0\3\11\1\0\2\11\1\0\5\11\1\0\1\11"+
    "\1\0\10\11\2\0\1\11\1\0\1\11\25\0\1\11"+
    "\3\0\2\11\1\0\1\11\1\u012d\2\11\1\u012e\3\11"+
    "\1\0\2\11\1\0\3\11\1\0\2\11\1\0\5\11"+
    "\1\0\1\11\1\0\10\11\2\0\1\11\1\0\1\11"+
    "\43\0\1\u012f\65\0\1\11\3\0\2\11\1\0\7\11"+
    "\1\u0130\1\0\2\11\1\0\3\11\1\0\2\11\1\0"+
    "\5\11\1\0\1\11\1\0\10\11\2\0\1\11\1\0"+
    "\1\11\25\0\1\11\3\0\2\11\1\0\10\11\1\0"+
    "\2\11\1\0\3\11\1\0\2\11\1\0\5\11\1\0"+
    "\1\11\1\0\5\11\1\u0131\2\11\2\0\1\11\1\0"+
    "\1\11\25\0\1\11\3\0\2\11\1\0\10\11\1\0"+
    "\2\11\1\0\3\11\1\0\2\11\1\0\5\11\1\0"+
    "\1\11\1\0\7\11\1\u0132\2\0\1\11\1\0\1\11"+
    "\25\0\1\11\3\0\2\11\1\0\2\11\1\u0133\5\11"+
    "\1\0\2\11\1\0\3\11\1\0\2\11\1\0\5\11"+
    "\1\0\1\11\1\0\10\11\2\0\1\11\1\0\1\11"+
    "\25\0\1\11\3\0\2\11\1\0\7\11\1\u0134\1\0"+
    "\2\11\1\0\3\11\1\0\2\11\1\0\5\11\1\0"+
    "\1\11\1\0\10\11\2\0\1\11\1\0\1\11\43\0"+
    "\1\u0135\65\0\1\11\3\0\2\11\1\0\7\11\1\u0136"+
    "\1\0\2\11\1\0\3\11\1\0\2\11\1\0\5\11"+
    "\1\0\1\11\1\0\10\11\2\0\1\11\1\0\1\11"+
    "\25\0\1\11\3\0\2\11\1\0\10\11\1\0\2\11"+
    "\1\0\3\11\1\0\2\11\1\0\5\11\1\u0137\1\u0138"+
    "\1\0\10\11\2\0\1\11\1\0\1\11\25\0\1\11"+
    "\3\0\2\11\1\0\10\11\1\0\2\11\1\0\3\11"+
    "\1\0\2\11\1\0\5\11\1\u0139\1\u013a\1\0\10\11"+
    "\2\0\1\11\1\0\1\11\25\0\1\11\3\0\2\11"+
    "\1\0\10\11\1\0\2\11\1\0\3\11\1\0\2\11"+
    "\1\0\5\11\1\0\1\11\1\0\7\11\1\u013b\2\0"+
    "\1\11\1\0\1\11\25\0\1\11\3\0\2\11\1\0"+
    "\4\11\1\u013c\3\11\1\0\2\11\1\0\3\11\1\0"+
    "\2\11\1\0\5\11\1\0\1\11\1\0\10\11\2\0"+
    "\1\11\1\0\1\11\75\0\1\u013d\33\0\1\11\3\0"+
    "\2\11\1\0\10\11\1\0\2\11\1\0\3\11\1\0"+
    "\2\11\1\0\5\11\1\0\1\11\1\0\6\11\1\u013e"+
    "\1\11\2\0\1\11\1\0\1\11\25\0\1\11\3\0"+
    "\2\11\1\0\10\11\1\0\2\11\1\0\3\11\1\0"+
    "\2\11\1\0\5\11\1\0\1\11\1\0\10\11\1\u013f"+
    "\1\0\1\11\1\0\1\11\25\0\1\11\3\0\2\11"+
    "\1\0\10\11\1\0\2\11\1\0\3\11\1\0\2\11"+
    "\1\0\5\11\1\0\1\11\1\0\10\11\1\0\1\u0140"+
    "\1\u0141\1\0\1\11\41\0\1\u0142\67\0\1\11\3\0"+
    "\2\11\1\0\5\11\1\u0143\2\11\1\0\2\11\1\0"+
    "\3\11\1\0\2\11\1\0\5\11\1\0\1\11\1\0"+
    "\10\11\2\0\1\11\1\0\1\11\25\0\1\11\3\0"+
    "\2\11\1\0\4\11\1\u0144\3\11\1\0\2\11\1\0"+
    "\3\11\1\0\2\11\1\0\5\11\1\0\1\11\1\0"+
    "\10\11\2\0\1\11\1\0\1\11\42\0\1\u0145\143\0"+
    "\1\u0146\75\0\1\u0147\76\0\1\u0148\51\0\1\u0149\112\0"+
    "\2\u014a\63\0\1\11\3\0\2\11\1\0\6\11\1\u014b"+
    "\1\11\1\0\2\11\1\0\3\11\1\0\2\11\1\0"+
    "\5\11\1\0\1\11\1\0\10\11\2\0\1\11\1\0"+
    "\1\11\25\0\1\11\3\0\2\11\1\0\10\11\1\0"+
    "\2\11\1\0\3\11\1\0\2\11\1\0\5\11\1\0"+
    "\1\11\1\0\10\11\2\0\1\11\1\u0146\1\11\25\0"+
    "\1\11\3\0\2\11\1\0\10\11\1\0\2\11\1\0"+
    "\3\11\1\0\2\11\1\0\5\11\1\0\1\11\1\0"+
    "\5\11\1\u014c\2\11\2\0\1\11\1\0\1\11\25\0"+
    "\1\11\3\0\2\11\1\0\10\11\1\0\2\11\1\0"+
    "\3\11\1\0\2\11\1\0\5\11\1\0\1\11\1\0"+
    "\1\u014d\7\11\2\0\1\11\1\0\1\11\25\0\1\11"+
    "\3\0\2\11\1\0\1\11\1\u014e\6\11\1\0\2\11"+
    "\1\0\3\11\1\0\2\11\1\0\5\11\1\0\1\11"+
    "\1\0\10\11\2\0\1\11\1\0\1\11\25\0\1\11"+
    "\3\0\2\11\1\0\10\11\1\u014a\1\u014f\1\11\1\0"+
    "\3\11\1\0\2\11\1\0\5\11\1\0\1\11\1\0"+
    "\10\11\2\0\1\11\1\0\1\11\53\0\1\u0150\67\0"+
    "\1\u0151\107\0\1\u0152\103\0\1\u0153\103\0\1\u0154\115\0"+
    "\1\u0155\103\0\1\u0156\71\0\1\u0157\103\0\1\u0158\65\0"+
    "\1\11\3\0\2\11\1\0\1\11\1\u0159\6\11\1\0"+
    "\2\11\1\0\3\11\1\0\2\11\1\0\5\11\1\0"+
    "\1\11\1\0\10\11\2\0\1\11\1\0\1\11\44\0"+
    "\2\u015a\63\0\1\11\3\0\2\11\1\0\10\11\1\u015a"+
    "\1\u015b\1\11\1\0\3\11\1\0\2\11\1\0\5\11"+
    "\1\0\1\11\1\0\10\11\2\0\1\11\1\0\1\11"+
    "\35\0\1\u015c\73\0\1\11\3\0\2\11\1\0\3\11"+
    "\1\u015d\4\11\1\0\2\11\1\0\3\11\1\0\2\11"+
    "\1\0\5\11\1\0\1\11\1\0\10\11\2\0\1\11"+
    "\1\0\1\11\25\0\1\11\3\0\2\11\1\0\2\11"+
    "\1\u015e\5\11\1\0\2\11\1\0\3\11\1\0\2\11"+
    "\1\0\5\11\1\0\1\11\1\0\10\11\2\0\1\11"+
    "\1\0\1\11\25\0\1\11\3\0\2\11\1\0\10\11"+
    "\1\u015f\1\u0160\1\11\1\0\3\11\1\0\2\11\1\0"+
    "\5\11\1\0\1\11\1\0\10\11\2\0\1\11\1\0"+
    "\1\11\41\0\1\u0161\67\0\1\11\3\0\2\11\1\0"+
    "\5\11\1\u0162\2\11\1\0\2\11\1\0\3\11\1\0"+
    "\2\11\1\0\5\11\1\0\1\11\1\0\10\11\2\0"+
    "\1\11\1\0\1\11\42\0\1\u0163\30\0\1\u0164\35\0"+
    "\1\11\3\0\2\11\1\0\6\11\1\u0165\1\11\1\0"+
    "\2\11\1\0\3\11\1\0\2\11\1\0\5\11\1\0"+
    "\1\11\1\0\4\11\1\u0166\3\11\2\0\1\11\1\0"+
    "\1\11\25\0\1\11\3\0\2\11\1\0\1\11\1\u0167"+
    "\6\11\1\0\2\11\1\0\3\11\1\0\2\11\1\0"+
    "\5\11\1\0\1\11\1\0\10\11\2\0\1\11\1\0"+
    "\1\11\25\0\1\11\3\0\2\11\1\0\5\11\1\u0168"+
    "\2\11\1\0\2\11\1\0\3\11\1\0\2\11\1\0"+
    "\5\11\1\0\1\11\1\0\10\11\2\0\1\11\1\0"+
    "\1\11\25\0\1\11\3\0\2\11\1\0\10\11\1\0"+
    "\2\11\1\0\3\11\1\0\2\11\1\0\5\11\1\0"+
    "\1\11\1\0\10\11\1\0\1\u0169\1\u016a\1\0\1\11"+
    "\76\0\1\u016b\71\0\2\u016c\43\0\1\11\3\0\2\11"+
    "\1\0\10\11\1\0\2\11\1\0\3\11\1\0\2\11"+
    "\1\0\5\11\1\0\1\11\1\0\7\11\1\u016d\2\0"+
    "\1\11\1\0\1\11\25\0\1\11\3\0\2\11\1\0"+
    "\10\11\1\0\2\11\1\0\3\11\1\0\2\11\1\0"+
    "\5\11\1\u016c\1\u016e\1\0\10\11\2\0\1\11\1\0"+
    "\1\11\51\0\1\u016f\57\0\1\11\3\0\2\11\1\0"+
    "\10\11\1\0\2\11\1\0\1\11\1\u0170\1\11\1\0"+
    "\2\11\1\0\5\11\1\0\1\11\1\0\10\11\2\0"+
    "\1\11\1\0\1\11\25\0\1\11\3\0\2\11\1\0"+
    "\10\11\1\0\2\11\1\0\1\11\1\u0171\1\11\1\0"+
    "\2\11\1\0\5\11\1\0\1\11\1\0\10\11\2\0"+
    "\1\11\1\0\1\11\25\0\1\11\3\0\2\11\1\0"+
    "\10\11\1\0\2\11\1\0\3\11\1\0\2\11\1\0"+
    "\5\11\1\0\1\11\1\0\4\11\1\u0172\3\11\2\0"+
    "\1\11\1\0\1\11\25\0\1\11\3\0\2\11\1\0"+
    "\10\11\1\0\2\11\1\0\2\11\1\u0173\1\0\2\11"+
    "\1\0\5\11\1\0\1\11\1\0\10\11\2\0\1\11"+
    "\1\0\1\11\25\0\1\11\3\0\2\11\1\0\2\11"+
    "\1\u0174\5\11\1\0\2\11\1\0\3\11\1\0\2\11"+
    "\1\0\5\11\1\0\1\11\1\0\10\11\2\0\1\11"+
    "\1\0\1\11\54\0\1\u0175\54\0\1\11\3\0\2\11"+
    "\1\0\10\11\1\0\2\11\1\0\3\11\1\0\1\u0176"+
    "\1\11\1\0\5\11\1\0\1\11\1\0\10\11\2\0"+
    "\1\11\1\0\1\11\76\0\1\u0177\32\0\1\11\3\0"+
    "\2\11\1\0\10\11\1\0\2\11\1\0\3\11\1\0"+
    "\2\11\1\0\5\11\1\0\1\11\1\0\7\11\1\u0178"+
    "\2\0\1\11\1\0\1\11\25\0\1\11\3\0\2\11"+
    "\1\0\10\11\1\0\2\11\1\0\3\11\1\0\2\11"+
    "\1\0\5\11\1\u0179\1\u017a\1\0\10\11\2\0\1\11"+
    "\1\0\1\11\64\0\2\u017b\43\0\1\11\3\0\2\11"+
    "\1\0\10\11\1\0\2\11\1\0\3\11\1\0\2\11"+
    "\1\0\5\11\1\u017b\1\u017c\1\0\10\11\2\0\1\11"+
    "\1\0\1\11\25\0\1\11\3\0\2\11\1\0\3\11"+
    "\1\u017d\4\11\1\0\2\11\1\0\3\11\1\0\2\11"+
    "\1\0\5\11\1\0\1\11\1\0\5\11\1\u017e\2\11"+
    "\2\0\1\11\1\0\1\11\51\0\1\u017f\57\0\1\11"+
    "\3\0\2\11\1\0\10\11\1\0\2\11\1\0\1\11"+
    "\1\u0180\1\11\1\0\2\11\1\0\5\11\1\0\1\11"+
    "\1\0\10\11\2\0\1\11\1\0\1\11\25\0\1\11"+
    "\3\0\2\11\1\0\10\11\1\0\2\11\1\0\1\u0181"+
    "\2\11\1\0\2\11\1\0\5\11\1\0\1\11\1\0"+
    "\10\11\2\0\1\11\1\0\1\11\25\0\1\11\3\0"+
    "\2\11\1\0\4\11\1\u0182\3\11\1\0\2\11\1\0"+
    "\3\11\1\0\2\11\1\0\5\11\1\0\1\11\1\0"+
    "\10\11\2\0\1\11\1\0\1\11\25\0\1\11\3\0"+
    "\2\11\1\0\1\11\1\u0183\6\11\1\0\2\11\1\0"+
    "\3\11\1\0\2\11\1\0\5\11\1\0\1\11\1\0"+
    "\10\11\2\0\1\11\1\0\1\11\51\0\1\u0184\57\0"+
    "\1\11\3\0\2\11\1\0\10\11\1\0\2\11\1\0"+
    "\1\11\1\u0185\1\11\1\0\2\11\1\0\5\11\1\0"+
    "\1\11\1\0\10\11\2\0\1\11\1\0\1\11\43\0"+
    "\1\u0186\65\0\1\11\3\0\2\11\1\0\7\11\1\u0187"+
    "\1\0\2\11\1\0\3\11\1\0\2\11\1\0\5\11"+
    "\1\0\1\11\1\0\10\11\2\0\1\11\1\0\1\11"+
    "\25\0\1\11\3\0\2\11\1\0\10\11\1\0\2\11"+
    "\1\0\3\11\1\0\1\11\1\u0188\1\0\5\11\1\0"+
    "\1\11\1\0\10\11\2\0\1\11\1\0\1\11\25\0"+
    "\1\11\3\0\2\11\1\0\10\11\1\0\2\11\1\0"+
    "\3\11\1\0\2\11\1\0\5\11\1\0\1\11\1\0"+
    "\5\11\1\u0189\2\11\2\0\1\11\1\0\1\11\72\0"+
    "\1\u018a\36\0\1\11\3\0\2\11\1\0\10\11\1\0"+
    "\2\11\1\0\3\11\1\0\2\11\1\0\5\11\1\0"+
    "\1\11\1\0\3\11\1\u018b\4\11\2\0\1\11\1\0"+
    "\1\11\44\0\2\u018c\107\0\1\u018d\57\0\1\11\3\0"+
    "\2\11\1\0\10\11\1\0\2\11\1\0\1\11\1\u018e"+
    "\1\11\1\0\2\11\1\0\5\11\1\0\1\11\1\0"+
    "\10\11\2\0\1\11\1\0\1\11\25\0\1\11\3\0"+
    "\2\11\1\0\10\11\1\u018f\1\u0190\1\11\1\0\3\11"+
    "\1\0\2\11\1\0\5\11\1\0\1\11\1\0\10\11"+
    "\2\0\1\11\1\0\1\11\44\0\2\u0191\131\0\1\u0192"+
    "\61\0\1\u0193\57\0\1\11\3\0\2\11\1\0\10\11"+
    "\1\0\2\11\1\0\3\11\1\0\2\11\1\0\5\11"+
    "\1\0\1\11\1\0\4\11\1\u0194\3\11\2\0\1\11"+
    "\1\0\1\11\25\0\1\11\3\0\2\11\1\0\10\11"+
    "\1\0\2\11\1\0\1\11\1\u0195\1\11\1\0\2\11"+
    "\1\0\5\11\1\0\1\11\1\0\10\11\2\0\1\11"+
    "\1\0\1\11\53\0\1\u0196\103\0\1\u0197\65\0\1\u0198"+
    "\103\0\1\u0199\121\0\1\u019a\65\0\1\u019b\103\0\1\u019c"+
    "\73\0\1\11\3\0\2\11\1\0\10\11\1\0\2\11"+
    "\1\0\1\11\1\u019d\1\11\1\0\2\11\1\0\5\11"+
    "\1\0\1\11\1\0\10\11\2\0\1\11\1\0\1\11"+
    "\77\0\1\u019e\31\0\1\11\3\0\2\11\1\0\10\11"+
    "\1\0\2\11\1\0\3\11\1\0\2\11\1\0\5\11"+
    "\1\0\1\11\1\0\10\11\1\u019e\1\0\1\11\1\0"+
    "\1\11\74\0\1\u019f\34\0\1\11\3\0\2\11\1\0"+
    "\5\11\1\u01a0\2\11\1\0\2\11\1\0\3\11\1\0"+
    "\2\11\1\0\5\11\1\0\1\11\1\0\10\11\2\0"+
    "\1\11\1\0\1\11\25\0\1\11\3\0\2\11\1\0"+
    "\10\11\1\0\2\11\1\0\3\11\1\0\2\11\1\0"+
    "\5\11\1\0\1\11\1\0\5\11\1\u01a1\2\11\2\0"+
    "\1\11\1\0\1\11\67\0\1\u01a2\41\0\1\11\3\0"+
    "\2\11\1\0\10\11\1\0\2\11\1\0\3\11\1\0"+
    "\2\11\1\0\5\11\1\0\1\11\1\0\1\u01a3\7\11"+
    "\2\0\1\11\1\0\1\11\74\0\1\u01a4\34\0\1\11"+
    "\3\0\2\11\1\0\10\11\1\0\2\11\1\0\3\11"+
    "\1\0\2\11\1\0\5\11\1\0\1\11\1\0\5\11"+
    "\1\u01a5\2\11\2\0\1\11\1\0\1\11\72\0\1\u01a6"+
    "\52\0\1\u01a7\67\0\1\11\3\0\2\11\1\0\10\11"+
    "\1\0\2\11\1\0\3\11\1\0\2\11\1\0\5\11"+
    "\1\0\1\11\1\0\3\11\1\u01a8\4\11\2\0\1\11"+
    "\1\0\1\11\25\0\1\11\3\0\2\11\1\0\5\11"+
    "\1\u01a9\2\11\1\0\2\11\1\0\3\11\1\0\2\11"+
    "\1\0\5\11\1\0\1\11\1\0\10\11\2\0\1\11"+
    "\1\0\1\11\25\0\1\11\3\0\2\11\1\0\4\11"+
    "\1\u01aa\3\11\1\0\2\11\1\0\3\11\1\0\2\11"+
    "\1\0\5\11\1\0\1\11\1\0\10\11\2\0\1\11"+
    "\1\0\1\11\25\0\1\11\3\0\2\11\1\0\1\u01ab"+
    "\7\11\1\0\2\11\1\0\3\11\1\0\2\11\1\0"+
    "\5\11\1\0\1\11\1\0\10\11\2\0\1\11\1\0"+
    "\1\11\43\0\1\u01ac\65\0\1\11\3\0\2\11\1\0"+
    "\7\11\1\u01ad\1\0\2\11\1\0\3\11\1\0\2\11"+
    "\1\0\5\11\1\0\1\11\1\0\10\11\2\0\1\11"+
    "\1\0\1\11\51\0\1\u01ae\67\0\1\u01af\73\0\1\11"+
    "\3\0\2\11\1\0\10\11\1\0\2\11\1\0\1\11"+
    "\1\u01b0\1\11\1\0\2\11\1\0\5\11\1\0\1\11"+
    "\1\0\10\11\2\0\1\11\1\0\1\11\25\0\1\11"+
    "\3\0\2\11\1\0\1\11\1\u01b1\6\11\1\0\2\11"+
    "\1\0\3\11\1\0\2\11\1\0\5\11\1\0\1\11"+
    "\1\0\10\11\2\0\1\11\1\0\1\11\25\0\1\11"+
    "\3\0\2\11\1\0\10\11\1\0\2\11\1\0\3\11"+
    "\1\0\2\11\1\0\5\11\1\u01b2\1\u01b3\1\0\10\11"+
    "\2\0\1\11\1\0\1\11\25\0\1\11\3\0\2\11"+
    "\1\0\10\11\1\0\2\11\1\0\3\11\1\0\2\11"+
    "\1\0\5\11\1\u01b4\1\u01b5\1\0\10\11\2\0\1\11"+
    "\1\0\1\11\25\0\1\11\3\0\2\11\1\0\5\11"+
    "\1\u01b6\2\11\1\0\2\11\1\0\3\11\1\0\2\11"+
    "\1\0\5\11\1\0\1\11\1\0\10\11\2\0\1\11"+
    "\1\0\1\11\25\0\1\11\3\0\2\11\1\0\4\11"+
    "\1\u01b7\3\11\1\0\2\11\1\0\3\11\1\0\2\11"+
    "\1\0\5\11\1\0\1\11\1\0\10\11\2\0\1\11"+
    "\1\0\1\11\36\0\1\u01b8\72\0\1\11\3\0\2\11"+
    "\1\0\2\11\1\u01b9\5\11\1\0\2\11\1\0\3\11"+
    "\1\0\2\11\1\0\5\11\1\0\1\11\1\0\10\11"+
    "\2\0\1\11\1\0\1\11\77\0\1\u01ba\31\0\1\11"+
    "\3\0\2\11\1\0\10\11\1\0\2\11\1\0\3\11"+
    "\1\0\2\11\1\0\5\11\1\0\1\11\1\0\10\11"+
    "\1\u01ba\1\0\1\11\1\0\1\11\35\0\1\u01bb\73\0"+
    "\1\11\3\0\2\11\1\0\1\11\1\u01bc\6\11\1\0"+
    "\2\11\1\0\3\11\1\0\2\11\1\0\5\11\1\0"+
    "\1\11\1\0\10\11\2\0\1\11\1\0\1\11\34\0"+
    "\1\u01bd\74\0\1\11\3\0\2\11\1\0\1\u01be\7\11"+
    "\1\0\2\11\1\0\3\11\1\0\2\11\1\0\5\11"+
    "\1\0\1\11\1\0\10\11\2\0\1\11\1\0\1\11"+
    "\25\0\1\11\3\0\2\11\1\0\1\11\1\u01bf\6\11"+
    "\1\0\2\11\1\0\3\11\1\0\2\11\1\0\5\11"+
    "\1\0\1\11\1\0\10\11\2\0\1\11\1\0\1\11"+
    "\25\0\1\11\3\0\2\11\1\0\4\11\1\u01c0\3\11"+
    "\1\0\2\11\1\0\3\11\1\0\2\11\1\0\5\11"+
    "\1\0\1\11\1\0\10\11\2\0\1\11\1\0\1\11"+
    "\25\0\1\11\3\0\2\11\1\0\4\11\1\u01c1\3\11"+
    "\1\0\2\11\1\0\3\11\1\0\2\11\1\0\5\11"+
    "\1\0\1\11\1\0\10\11\2\0\1\11\1\0\1\11"+
    "\25\0\1\11\3\0\2\11\1\0\10\11\1\0\2\11"+
    "\1\0\1\11\1\u01c2\1\11\1\0\2\11\1\0\5\11"+
    "\1\0\1\11\1\0\10\11\2\0\1\11\1\0\1\11"+
    "\35\0\1\u01c3\73\0\1\11\3\0\2\11\1\0\1\11"+
    "\1\u01c4\6\11\1\0\2\11\1\0\3\11\1\0\2\11"+
    "\1\0\5\11\1\0\1\11\1\0\10\11\2\0\1\11"+
    "\1\0\1\11\43\0\1\u01c5\65\0\1\11\3\0\2\11"+
    "\1\0\7\11\1\u01c6\1\0\2\11\1\0\3\11\1\0"+
    "\2\11\1\0\5\11\1\0\1\11\1\0\10\11\2\0"+
    "\1\11\1\0\1\11\25\0\1\11\3\0\2\11\1\0"+
    "\10\11\1\0\2\11\1\0\3\11\1\0\2\11\1\0"+
    "\5\11\1\0\1\11\1\0\10\11\1\u01c7\1\0\1\11"+
    "\1\0\1\11\25\0\1\11\3\0\2\11\1\0\10\11"+
    "\1\0\2\11\1\0\3\11\1\0\2\11\1\0\5\11"+
    "\1\0\1\11\1\0\1\11\1\u01c8\6\11\2\0\1\11"+
    "\1\0\1\11\40\0\1\u01c9\70\0\1\11\3\0\2\11"+
    "\1\0\4\11\1\u01ca\3\11\1\0\2\11\1\0\3\11"+
    "\1\0\2\11\1\0\5\11\1\0\1\11\1\0\10\11"+
    "\2\0\1\11\1\0\1\11\40\0\1\u01cb\135\0\1\u01cc"+
    "\36\0\1\11\3\0\2\11\1\0\10\11\1\0\2\11"+
    "\1\0\3\11\1\0\2\11\1\0\5\11\1\0\1\11"+
    "\1\0\3\11\1\u01cd\4\11\2\0\1\11\1\0\1\11"+
    "\55\0\1\u01ce\53\0\1\11\3\0\2\11\1\0\10\11"+
    "\1\0\2\11\1\0\3\11\1\0\1\11\1\u01cf\1\0"+
    "\5\11\1\0\1\11\1\0\10\11\2\0\1\11\1\0"+
    "\1\11\35\0\1\u01d0\121\0\1\u01d1\103\0\1\u01d2\55\0"+
    "\1\11\3\0\2\11\1\0\10\11\1\0\2\11\1\0"+
    "\3\11\1\0\2\11\1\0\5\11\1\u01d3\1\u01d4\1\0"+
    "\10\11\2\0\1\11\1\0\1\11\74\0\1\u01d5\106\0"+
    "\1\u01d6\44\0\1\u01d7\70\0\1\11\3\0\2\11\1\0"+
    "\4\11\1\u01d8\3\11\1\0\2\11\1\0\3\11\1\0"+
    "\2\11\1\0\5\11\1\0\1\11\1\0\10\11\2\0"+
    "\1\11\1\0\1\11\51\0\1\u01d9\103\0\1\u01da\57\0"+
    "\1\11\3\0\2\11\1\0\10\11\1\0\2\11\1\0"+
    "\1\11\1\u01db\1\11\1\0\2\11\1\0\5\11\1\0"+
    "\1\11\1\0\10\11\2\0\1\11\1\0\1\11\25\0"+
    "\1\11\3\0\2\11\1\0\10\11\1\0\2\11\1\0"+
    "\1\11\1\u01dc\1\11\1\0\2\11\1\0\5\11\1\0"+
    "\1\11\1\0\10\11\2\0\1\11\1\0\1\11\25\0"+
    "\1\11\3\0\2\11\1\0\10\11\1\0\2\11\1\0"+
    "\3\11\1\0\2\11\1\0\5\11\1\0\1\11\1\0"+
    "\5\11\1\u01dd\2\11\2\0\1\11\1\0\1\11\25\0"+
    "\1\11\3\0\2\11\1\0\1\11\1\u01de\6\11\1\0"+
    "\2\11\1\0\3\11\1\0\2\11\1\0\5\11\1\0"+
    "\1\11\1\0\10\11\2\0\1\11\1\0\1\11\35\0"+
    "\1\u01df\73\0\1\11\3\0\2\11\1\0\1\11\1\u01e0"+
    "\6\11\1\0\2\11\1\0\3\11\1\0\2\11\1\0"+
    "\5\11\1\0\1\11\1\0\10\11\2\0\1\11\1\0"+
    "\1\11\36\0\1\u01e1\72\0\1\11\3\0\2\11\1\0"+
    "\2\11\1\u01e2\5\11\1\0\2\11\1\0\3\11\1\0"+
    "\2\11\1\0\5\11\1\0\1\11\1\0\10\11\2\0"+
    "\1\11\1\0\1\11\74\0\1\u01e3\34\0\1\11\3\0"+
    "\2\11\1\0\10\11\1\0\2\11\1\0\3\11\1\0"+
    "\2\11\1\0\5\11\1\0\1\11\1\0\5\11\1\u01e4"+
    "\2\11\2\0\1\11\1\0\1\11\40\0\1\u01e5\70\0"+
    "\1\11\3\0\2\11\1\0\4\11\1\u01e6\3\11\1\0"+
    "\2\11\1\0\3\11\1\0\2\11\1\0\5\11\1\0"+
    "\1\11\1\0\10\11\2\0\1\11\1\0\1\11\25\0"+
    "\1\11\3\0\2\11\1\0\10\11\1\0\2\11\1\0"+
    "\3\11\1\0\2\11\1\0\5\11\1\0\1\11\1\0"+
    "\5\11\1\u01e7\2\11\2\0\1\11\1\0\1\11\25\0"+
    "\1\11\3\0\2\11\1\0\3\11\1\u01e8\4\11\1\0"+
    "\2\11\1\0\3\11\1\0\2\11\1\0\5\11\1\0"+
    "\1\11\1\0\10\11\2\0\1\11\1\0\1\11\64\0"+
    "\2\u01e9\43\0\1\11\3\0\2\11\1\0\10\11\1\0"+
    "\2\11\1\0\3\11\1\0\2\11\1\0\5\11\1\u01e9"+
    "\1\u01ea\1\0\10\11\2\0\1\11\1\0\1\11\44\0"+
    "\2\u01eb\74\0\1\u01ec\72\0\1\11\3\0\2\11\1\0"+
    "\2\11\1\u01ed\5\11\1\0\2\11\1\0\3\11\1\0"+
    "\2\11\1\0\5\11\1\0\1\11\1\0\10\11\2\0"+
    "\1\11\1\0\1\11\35\0\1\u01ee\73\0\1\11\3\0"+
    "\2\11\1\0\1\11\1\u01ef\6\11\1\0\2\11\1\0"+
    "\3\11\1\0\2\11\1\0\5\11\1\0\1\11\1\0"+
    "\10\11\2\0\1\11\1\0\1\11\25\0\1\11\3\0"+
    "\2\11\1\0\2\11\1\352\5\11\1\0\2\11\1\0"+
    "\3\11\1\0\2\11\1\0\5\11\1\0\1\11\1\0"+
    "\10\11\2\0\1\11\1\0\1\11\25\0\1\11\3\0"+
    "\2\11\1\0\10\11\1\0\2\11\1\0\3\11\1\0"+
    "\2\11\1\0\5\11\1\u01f0\1\u01f1\1\0\10\11\2\0"+
    "\1\11\1\0\1\11\76\0\1\u01f2\32\0\1\11\3\0"+
    "\2\11\1\0\10\11\1\0\2\11\1\0\3\11\1\0"+
    "\2\11\1\0\5\11\1\0\1\11\1\0\7\11\1\u01f3"+
    "\2\0\1\11\1\0\1\11\41\0\1\u01f4\67\0\1\11"+
    "\3\0\2\11\1\0\5\11\1\u01f5\2\11\1\0\2\11"+
    "\1\0\3\11\1\0\2\11\1\0\5\11\1\0\1\11"+
    "\1\0\10\11\2\0\1\11\1\0\1\11\42\0\1\u01f6"+
    "\66\0\1\11\3\0\2\11\1\0\4\11\1\u01f7\3\11"+
    "\1\0\2\11\1\0\3\11\1\0\2\11\1\0\5\11"+
    "\1\0\1\11\1\0\10\11\2\0\1\11\1\0\1\11"+
    "\74\0\1\u01f8\45\0\1\u01f9\72\0\1\11\3\0\2\11"+
    "\1\0\2\11\1\u01fa\5\11\1\0\2\11\1\0\3\11"+
    "\1\0\2\11\1\0\5\11\1\0\1\11\1\0\10\11"+
    "\2\0\1\11\1\0\1\11\36\0\1\u01fb\143\0\1\u01fc"+
    "\32\0\1\11\3\0\2\11\1\0\10\11\1\0\2\11"+
    "\1\0\3\11\1\0\2\11\1\0\5\11\1\0\1\11"+
    "\1\0\7\11\1\u01fd\2\0\1\11\1\0\1\11\35\0"+
    "\1\u01fe\120\0\1\u01ff\127\0\1\u0200\32\0\1\11\3\0"+
    "\2\11\1\0\10\11\1\0\2\11\1\0\3\11\1\0"+
    "\2\11\1\0\5\11\1\0\1\11\1\0\7\11\1\u0201"+
    "\2\0\1\11\1\0\1\11\72\0\1\u0202\61\0\1\u0203"+
    "\60\0\1\11\3\0\2\11\1\0\10\11\1\0\2\11"+
    "\1\0\3\11\1\0\2\11\1\0\5\11\1\0\1\11"+
    "\1\0\3\11\1\u0204\4\11\2\0\1\11\1\0\1\11"+
    "\25\0\1\11\3\0\2\11\1\0\10\11\1\0\2\11"+
    "\1\0\1\u0205\2\11\1\0\2\11\1\0\5\11\1\0"+
    "\1\11\1\0\10\11\2\0\1\11\1\0\1\11\25\0"+
    "\1\11\3\0\2\11\1\0\10\11\1\u0206\1\u0207\1\11"+
    "\1\0\3\11\1\0\2\11\1\0\5\11\1\0\1\11"+
    "\1\0\10\11\2\0\1\11\1\0\1\11\51\0\1\u0208"+
    "\57\0\1\11\3\0\2\11\1\0\10\11\1\0\2\11"+
    "\1\0\1\11\1\u0209\1\11\1\0\2\11\1\0\5\11"+
    "\1\0\1\11\1\0\10\11\2\0\1\11\1\0\1\11"+
    "\37\0\1\u020a\71\0\1\11\3\0\2\11\1\0\3\11"+
    "\1\u020b\4\11\1\0\2\11\1\0\3\11\1\0\2\11"+
    "\1\0\5\11\1\0\1\11\1\0\10\11\2\0\1\11"+
    "\1\0\1\11\41\0\1\u020c\67\0\1\11\3\0\2\11"+
    "\1\0\5\11\1\u020d\2\11\1\0\2\11\1\0\3\11"+
    "\1\0\2\11\1\0\5\11\1\0\1\11\1\0\10\11"+
    "\2\0\1\11\1\0\1\11\25\0\1\11\3\0\2\11"+
    "\1\0\3\11\1\u020e\4\11\1\0\2\11\1\0\3\11"+
    "\1\0\2\11\1\0\5\11\1\0\1\11\1\0\10\11"+
    "\2\0\1\11\1\0\1\11\25\0\1\11\3\0\2\11"+
    "\1\0\5\11\1\u020f\2\11\1\0\2\11\1\0\3\11"+
    "\1\0\2\11\1\0\5\11\1\0\1\11\1\0\10\11"+
    "\2\0\1\11\1\0\1\11\40\0\1\u0210\77\0\1\u0211"+
    "\74\0\1\11\3\0\2\11\1\0\1\u0212\7\11\1\0"+
    "\2\11\1\0\3\11\1\0\2\11\1\0\5\11\1\0"+
    "\1\11\1\0\10\11\2\0\1\11\1\0\1\11\51\0"+
    "\1\u0213\57\0\1\11\3\0\2\11\1\0\10\11\1\0"+
    "\2\11\1\0\1\11\1\u0214\1\11\1\0\2\11\1\0"+
    "\5\11\1\0\1\11\1\0\10\11\2\0\1\11\1\0"+
    "\1\11\54\0\1\u0215\54\0\1\11\3\0\2\11\1\0"+
    "\3\11\1\u0216\4\11\1\0\2\11\1\0\3\11\1\0"+
    "\2\11\1\0\5\11\1\0\1\11\1\0\10\11\2\0"+
    "\1\11\1\0\1\11\44\0\2\u0217\122\0\2\u0218\56\0"+
    "\1\u0219\70\0\1\11\3\0\2\11\1\0\4\11\1\u021a"+
    "\3\11\1\0\2\11\1\0\3\11\1\0\2\11\1\0"+
    "\5\11\1\0\1\11\1\0\10\11\2\0\1\11\1\0"+
    "\1\11\103\0\1\u021b\51\0\1\u021c\67\0\1\u021d\73\0"+
    "\1\11\3\0\2\11\1\0\1\11\1\u021e\6\11\1\0"+
    "\2\11\1\0\3\11\1\0\2\11\1\0\5\11\1\0"+
    "\1\11\1\0\10\11\2\0\1\11\1\0\1\11\36\0"+
    "\1\u021f\131\0\2\u0220\43\0\1\11\3\0\2\11\1\0"+
    "\2\11\1\u0221\5\11\1\0\2\11\1\0\3\11\1\0"+
    "\2\11\1\0\5\11\1\0\1\11\1\0\10\11\2\0"+
    "\1\11\1\0\1\11\25\0\1\11\3\0\2\11\1\0"+
    "\10\11\1\0\2\11\1\0\3\11\1\0\2\11\1\0"+
    "\5\11\1\u0220\1\u0222\1\0\10\11\2\0\1\11\1\0"+
    "\1\11\51\0\1\u0223\57\0\1\11\3\0\2\11\1\0"+
    "\10\11\1\0\2\11\1\0\1\11\1\u0224\1\11\1\0"+
    "\2\11\1\0\5\11\1\0\1\11\1\0\10\11\2\0"+
    "\1\11\1\0\1\11\51\0\1\u0225\57\0\1\11\3\0"+
    "\2\11\1\0\10\11\1\0\2\11\1\0\1\11\1\u0226"+
    "\1\11\1\0\2\11\1\0\5\11\1\0\1\11\1\0"+
    "\10\11\2\0\1\11\1\0\1\11\40\0\1\u0227\70\0"+
    "\1\11\3\0\2\11\1\0\4\11\1\u0228\3\11\1\0"+
    "\2\11\1\0\3\11\1\0\2\11\1\0\5\11\1\0"+
    "\1\11\1\0\10\11\2\0\1\11\1\0\1\11\74\0"+
    "\1\u0229\44\0\1\u022a\73\0\1\11\3\0\2\11\1\0"+
    "\1\11\1\u022b\6\11\1\0\2\11\1\0\3\11\1\0"+
    "\2\11\1\0\5\11\1\0\1\11\1\0\10\11\2\0"+
    "\1\11\1\0\1\11\25\0\1\11\3\0\2\11\1\0"+
    "\5\11\1\u022c\2\11\1\0\2\11\1\0\3\11\1\0"+
    "\2\11\1\0\5\11\1\0\1\11\1\0\10\11\2\0"+
    "\1\11\1\0\1\11\42\0\1\u022d\140\0\1\u022e\70\0"+
    "\2\u022f\114\0\1\u0230\32\0\1\11\3\0\2\11\1\0"+
    "\10\11\1\0\2\11\1\0\3\11\1\0\2\11\1\0"+
    "\5\11\1\u022f\1\u0231\1\0\10\11\2\0\1\11\1\0"+
    "\1\11\25\0\1\11\3\0\2\11\1\0\10\11\1\0"+
    "\2\11\1\0\3\11\1\0\2\11\1\0\5\11\1\0"+
    "\1\11\1\0\7\11\1\u0232\2\0\1\11\1\0\1\11"+
    "\35\0\1\u0233\73\0\1\11\3\0\2\11\1\0\1\11"+
    "\1\u0234\6\11\1\0\2\11\1\0\3\11\1\0\2\11"+
    "\1\0\5\11\1\0\1\11\1\0\10\11\2\0\1\11"+
    "\1\0\1\11\44\0\2\u0235\74\0\1\u0236\111\0\2\u0237"+
    "\63\0\1\11\3\0\2\11\1\0\10\11\1\u0237\1\u0238"+
    "\1\11\1\0\3\11\1\0\2\11\1\0\5\11\1\0"+
    "\1\11\1\0\10\11\2\0\1\11\1\0\1\11\36\0"+
    "\1\u0239\72\0\1\11\3\0\2\11\1\0\2\11\1\u023a"+
    "\5\11\1\0\2\11\1\0\3\11\1\0\2\11\1\0"+
    "\5\11\1\0\1\11\1\0\10\11\2\0\1\11\1\0"+
    "\1\11\77\0\1\u023b\45\0\1\u023c\113\0\1\u023d\57\0"+
    "\1\11\3\0\2\11\1\0\10\11\1\0\2\11\1\0"+
    "\1\11\1\u023e\1\11\1\0\2\11\1\0\5\11\1\0"+
    "\1\11\1\0\10\11\2\0\1\11\1\0\1\11\52\0"+
    "\1\u023f\103\0\1\u0240\115\0\2\u0241\43\0\1\11\3\0"+
    "\2\11\1\0\10\11\1\0\2\11\1\0\3\11\1\0"+
    "\2\11\1\0\5\11\1\u0241\1\u0242\1\0\10\11\2\0"+
    "\1\11\1\0\1\11\44\0\2\u0243\76\0\1\u0244\141\0"+
    "\1\u0245\32\0\1\11\3\0\2\11\1\0\10\11\1\0"+
    "\2\11\1\0\3\11\1\0\2\11\1\0\5\11\1\0"+
    "\1\11\1\0\7\11\1\u0246\2\0\1\11\1\0\1\11"+
    "\74\0\1\u0247\33\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[30328];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\32\1\2\11\2\1\11\11"+
    "\3\1\1\11\1\1\1\11\1\1\1\0\1\11\1\0"+
    "\15\1\5\0\5\1\6\0\1\1\2\11\1\1\1\0"+
    "\3\1\1\0\1\1\1\11\3\1\3\0\15\1\14\11"+
    "\1\1\1\0\6\1\1\0\13\1\6\0\6\1\2\0"+
    "\1\1\1\0\5\1\2\11\1\0\1\11\1\0\1\11"+
    "\10\0\1\11\1\1\1\0\1\1\1\0\3\1\1\0"+
    "\4\1\2\0\1\11\3\1\1\0\3\1\1\0\11\1"+
    "\1\0\6\1\1\0\6\1\1\0\3\1\1\0\2\1"+
    "\6\0\7\1\1\0\1\11\1\0\5\11\3\0\1\11"+
    "\1\0\2\11\1\0\1\11\1\0\1\1\1\0\1\1"+
    "\1\0\3\1\1\0\1\1\1\0\4\1\2\0\2\1"+
    "\1\0\3\1\1\11\3\1\1\0\1\1\1\0\3\1"+
    "\1\0\3\1\1\0\5\1\1\11\1\1\1\0\1\1"+
    "\1\0\3\1\1\0\1\1\2\0\1\1\1\11\2\1"+
    "\1\11\3\0\2\11\5\1\1\11\2\1\2\0\1\11"+
    "\3\0\3\1\1\0\2\1\1\0\1\1\1\0\1\1"+
    "\2\0\4\1\1\0\1\1\2\0\2\1\1\11\5\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\3\1"+
    "\1\11\4\1\1\0\1\1\1\0\3\1\1\0\1\1"+
    "\2\0\1\1\1\0\1\1\1\0\2\11\2\1\5\11"+
    "\2\0\1\1\2\0\2\1\1\0\1\1\1\11\1\1"+
    "\2\0\4\1\1\0\1\1\1\11\1\0\2\1\1\0"+
    "\1\1\1\0\3\1\1\0\1\1\2\0\1\1\1\0"+
    "\5\1\1\0\1\1\1\0\1\1\1\0\1\1\1\11"+
    "\1\1\2\0\1\1\1\11\1\1\1\0\2\11\1\0"+
    "\1\1\3\0\1\1\2\0\4\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\11\3\1\1\11\1\1\1\0"+
    "\1\11\1\1\1\11\1\1\1\0\1\1\1\0\1\1"+
    "\1\11\1\1\1\0\1\1\1\0\1\11\1\1\2\0"+
    "\1\1\3\0\1\1\2\0\2\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\11\3\1\2\0\1\1\1\11"+
    "\1\1\1\11\1\1\1\11\1\0\1\11\1\1\1\0"+
    "\2\11\1\1\2\0\2\1\1\11\1\1\1\0\1\1"+
    "\1\11\1\1\1\0\1\11\2\1\1\11\2\0\1\11"+
    "\2\1\1\0\1\1\3\0\1\1\1\11\1\1\3\0"+
    "\1\1\3\0\1\1\1\11\1\0\1\11\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[583];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    //codigo de java
    String nombre;
    public void imprimir(String dato,String cadena){
    	//System.out.println(dato+" : "+cadena);
    }
    public void imprimir(String cadena){
    	//System.out.println(cadena+" soy reservada");
    }

    public ArrayList erroresL = new ArrayList();
    Sintactico sin = new Sintactico();



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 262) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.err.println("Error lexico: "+yytext()+ " Linea:"+(yyline+1)+" Columna:"+(yycolumn+1));

        erroresL.add("Error lexico: "+yytext()+ " Linea:"+(yyline+1)+" Columna:"+(yycolumn+1)+"\n");
            }
          case 129: break;
          case 2: 
            { return new Symbol(sym.entero,yycolumn,yyline,yytext());
            }
          case 130: break;
          case 3: 
            { return new Symbol(sym.punto,yycolumn,yyline,yytext());
            }
          case 131: break;
          case 4: 
            { /* Se ignoran */
            }
          case 132: break;
          case 5: 
            { return new Symbol(sym.iden,yycolumn,yyline,yytext());
            }
          case 133: break;
          case 6: 
            { return new Symbol(sym.menorq,yycolumn,yyline,yytext());
            }
          case 134: break;
          case 7: 
            { return new Symbol(sym.mayorq,yycolumn,yyline,yytext());
            }
          case 135: break;
          case 8: 
            { return new Symbol(sym.menos,yycolumn,yyline,yytext());
            }
          case 136: break;
          case 9: 
            { return new Symbol(sym.mas,yycolumn,yyline,yytext());
            }
          case 137: break;
          case 10: 
            { return new Symbol(sym.mul,yycolumn,yyline,yytext());
            }
          case 138: break;
          case 11: 
            { return new Symbol(sym.div,yycolumn,yyline,yytext());
            }
          case 139: break;
          case 12: 
            { return new Symbol(sym.modulo,yycolumn,yyline,yytext());
            }
          case 140: break;
          case 13: 
            { return new Symbol(sym.igual,yycolumn,yyline,yytext());
            }
          case 141: break;
          case 14: 
            { return new Symbol(sym.not,yycolumn,yyline,yytext());
            }
          case 142: break;
          case 15: 
            { return new Symbol(sym.coma,yycolumn,yyline,yytext());
            }
          case 143: break;
          case 16: 
            { return new Symbol(sym.puntoYcoma,yycolumn,yyline,yytext());
            }
          case 144: break;
          case 17: 
            { return new Symbol(sym.dosPuntos,yycolumn,yyline,yytext());
            }
          case 145: break;
          case 18: 
            { return new Symbol(sym.parA,yycolumn,yyline,yytext());
            }
          case 146: break;
          case 19: 
            { return new Symbol(sym.parC,yycolumn,yyline,yytext());
            }
          case 147: break;
          case 20: 
            { return new Symbol(sym.corA,yycolumn,yyline,yytext());
            }
          case 148: break;
          case 21: 
            { return new Symbol(sym.corC,yycolumn,yyline,yytext());
            }
          case 149: break;
          case 22: 
            { return new Symbol(sym.llavA,yycolumn,yyline,yytext());
            }
          case 150: break;
          case 23: 
            { return new Symbol(sym.llavC,yycolumn,yyline,yytext());
            }
          case 151: break;
          case 24: 
            { 
            }
          case 152: break;
          case 25: 
            { yybegin(YYINITIAL);
            }
          case 153: break;
          case 26: 
            { return new Symbol(sym.decimal,yycolumn,yyline,yytext());
            }
          case 154: break;
          case 27: 
            { return new Symbol(sym.cadena,yycolumn,yyline,yytext());
            }
          case 155: break;
          case 28: 
            { return new Symbol(sym.pA,yycolumn,yyline,yytext());
            }
          case 156: break;
          case 29: 
            { yybegin(COMENTARIO1);sin.al.add("comentario multilinea");
            }
          case 157: break;
          case 30: 
            { return new Symbol(sym.menorIgual,yycolumn,yyline,yytext());
            }
          case 158: break;
          case 31: 
            { return new Symbol(sym.mayorIgual,yycolumn,yyline,yytext());
            }
          case 159: break;
          case 32: 
            { yybegin(COMENTARIO2);sin.al.add("comentario de una linea");
            }
          case 160: break;
          case 33: 
            { return new Symbol(sym.decre,yycolumn,yyline,yytext());
            }
          case 161: break;
          case 34: 
            { return new Symbol(sym.menosIgual,yycolumn,yyline,yytext());
            }
          case 162: break;
          case 35: 
            { return new Symbol(sym.incre,yycolumn,yyline,yytext());
            }
          case 163: break;
          case 36: 
            { return new Symbol(sym.masIgual,yycolumn,yyline,yytext());
            }
          case 164: break;
          case 37: 
            { return new Symbol(sym.mulIgual,yycolumn,yyline,yytext());
            }
          case 165: break;
          case 38: 
            { return new Symbol(sym.igualIgual,yycolumn,yyline,yytext());
            }
          case 166: break;
          case 39: 
            { return new Symbol(sym.noIgual,yycolumn,yyline,yytext());
            }
          case 167: break;
          case 40: 
            { return new Symbol(sym.dobleDolar,yycolumn,yyline,yytext());
            }
          case 168: break;
          case 41: 
            { return new Symbol(sym.and,yycolumn,yyline,yytext());
            }
          case 169: break;
          case 42: 
            { return new Symbol(sym.or,yycolumn,yyline,yytext());
            }
          case 170: break;
          case 43: 
            { return new Symbol(sym.caracter,yycolumn,yyline,yytext());
            }
          case 171: break;
          case 44: 
            { return new Symbol(sym.h1A,yycolumn,yyline,yytext());
            }
          case 172: break;
          case 45: 
            { return new Symbol(sym.h2A,yycolumn,yyline,yytext());
            }
          case 173: break;
          case 46: 
            { return new Symbol(sym.h3A,yycolumn,yyline,yytext());
            }
          case 174: break;
          case 47: 
            { return new Symbol(sym.h4A,yycolumn,yyline,yytext());
            }
          case 175: break;
          case 48: 
            { return new Symbol(sym.h5A,yycolumn,yyline,yytext());
            }
          case 176: break;
          case 49: 
            { return new Symbol(sym.h6A,yycolumn,yyline,yytext());
            }
          case 177: break;
          case 50: 
            { return new Symbol(sym.trA,yycolumn,yyline,yytext());
            }
          case 178: break;
          case 51: 
            { return new Symbol(sym.tdA,yycolumn,yyline,yytext());
            }
          case 179: break;
          case 52: 
            { return new Symbol(sym.thA,yycolumn,yyline,yytext());
            }
          case 180: break;
          case 53: 
            { return new Symbol(sym.brA,yycolumn,yyline,yytext());
            }
          case 181: break;
          case 54: 
            { return new Symbol(sym.pC,yycolumn,yyline,yytext());
            }
          case 182: break;
          case 55: 
            { return new Symbol(sym.resInt,yycolumn,yyline,yytext());
            }
          case 183: break;
          case 56: 
            { return new Symbol(sym.rojo,yycolumn,yyline,yytext());
            }
          case 184: break;
          case 57: 
            { return new Symbol(sym.azul,yycolumn,yyline,yytext());
            }
          case 185: break;
          case 58: 
            { return new Symbol(sym.divA,yycolumn,yyline,yytext());
            }
          case 186: break;
          case 59: 
            { return new Symbol(sym.h1C,yycolumn,yyline,yytext());
            }
          case 187: break;
          case 60: 
            { return new Symbol(sym.h2C,yycolumn,yyline,yytext());
            }
          case 188: break;
          case 61: 
            { return new Symbol(sym.h3C,yycolumn,yyline,yytext());
            }
          case 189: break;
          case 62: 
            { return new Symbol(sym.h4C,yycolumn,yyline,yytext());
            }
          case 190: break;
          case 63: 
            { return new Symbol(sym.h5C,yycolumn,yyline,yytext());
            }
          case 191: break;
          case 64: 
            { return new Symbol(sym.h6C,yycolumn,yyline,yytext());
            }
          case 192: break;
          case 65: 
            { return new Symbol(sym.brC,yycolumn,yyline,yytext());
            }
          case 193: break;
          case 66: 
            { return new Symbol(sym.trC,yycolumn,yyline,yytext());
            }
          case 194: break;
          case 67: 
            { return new Symbol(sym.tdC,yycolumn,yyline,yytext());
            }
          case 195: break;
          case 68: 
            { return new Symbol(sym.thC,yycolumn,yyline,yytext());
            }
          case 196: break;
          case 69: 
            { return new Symbol(sym.gris,yycolumn,yyline,yytext());
            }
          case 197: break;
          case 70: 
            { return new Symbol(sym.resChar,yycolumn,yyline,yytext());
            }
          case 198: break;
          case 71: 
            { return new Symbol(sym.verde,yycolumn,yyline,yytext());
            }
          case 199: break;
          case 72: 
            { return new Symbol(sym.roman,yycolumn,yyline,yytext());
            }
          case 200: break;
          case 73: 
            { return new Symbol(sym.arial,yycolumn,yyline,yytext());
            }
          case 201: break;
          case 74: 
            { return new Symbol(sym.bool,yycolumn,yyline,yytext());
            }
          case 202: break;
          case 75: 
            { return new Symbol(sym.serif,yycolumn,yyline,yytext());
            }
          case 203: break;
          case 76: 
            { return new Symbol(sym.resScore,yycolumn,yyline,yytext());
            }
          case 204: break;
          case 77: 
            { return new Symbol(sym.swss,yycolumn,yyline,yytext());
            }
          case 205: break;
          case 78: 
            { return new Symbol(sym.divC,yycolumn,yyline,yytext());
            }
          case 206: break;
          case 79: 
            { return new Symbol(sym.headA,yycolumn,yyline,yytext());
            }
          case 207: break;
          case 80: 
            { return new Symbol(sym.htmlA,yycolumn,yyline,yytext());
            }
          case 208: break;
          case 81: 
            { return new Symbol(sym.bodyA,yycolumn,yyline,yytext());
            }
          case 209: break;
          case 82: 
            { return new Symbol(sym.tms,yycolumn,yyline,yytext());
            }
          case 210: break;
          case 83: 
            { return new Symbol(sym.resPrint,yycolumn,yyline,yytext());
            }
          case 211: break;
          case 84: 
            { return new Symbol(sym.resResult,yycolumn,yyline,yytext());
            }
          case 212: break;
          case 85: 
            { return new Symbol(sym.resDouble,yycolumn,yyline,yytext());
            }
          case 213: break;
          case 86: 
            { return new Symbol(sym.resString,yycolumn,yyline,yytext());
            }
          case 214: break;
          case 87: 
            { return new Symbol(sym.scri,yycolumn,yyline,yytext());
            }
          case 215: break;
          case 88: 
            { return new Symbol(sym.headC,yycolumn,yyline,yytext());
            }
          case 216: break;
          case 89: 
            { return new Symbol(sym.htmlC,yycolumn,yyline,yytext());
            }
          case 217: break;
          case 90: 
            { return new Symbol(sym.tableA,yycolumn,yyline,yytext());
            }
          case 218: break;
          case 91: 
            { return new Symbol(sym.titleA,yycolumn,yyline,yytext());
            }
          case 219: break;
          case 92: 
            { return new Symbol(sym.bodyC,yycolumn,yyline,yytext());
            }
          case 220: break;
          case 93: 
            { return new Symbol(sym.morado,yycolumn,yyline,yytext());
            }
          case 221: break;
          case 94: 
            { return new Symbol(sym.modern,yycolumn,yyline,yytext());
            }
          case 222: break;
          case 95: 
            { return new Symbol(sym.minion,yycolumn,yyline,yytext());
            }
          case 223: break;
          case 96: 
            { return new Symbol(sym.impact,yycolumn,yyline,yytext());
            }
          case 224: break;
          case 97: 
            { return new Symbol(sym.ver,yycolumn,yyline,yytext());
            }
          case 225: break;
          case 98: 
            { return new Symbol(sym.derecha,yycolumn,yyline,yytext());
            }
          case 226: break;
          case 99: 
            { return new Symbol(sym.antiq,yycolumn,yyline,yytext());
            }
          case 227: break;
          case 100: 
            { return new Symbol(sym.fanta,yycolumn,yyline,yytext());
            }
          case 228: break;
          case 101: 
            { return new Symbol(sym.tableC,yycolumn,yyline,yytext());
            }
          case 229: break;
          case 102: 
            { return new Symbol(sym.titleC,yycolumn,yyline,yytext());
            }
          case 230: break;
          case 103: 
            { return new Symbol(sym.resBoolean,yycolumn,yyline,yytext());
            }
          case 231: break;
          case 104: 
            { return new Symbol(sym.georg,yycolumn,yyline,yytext());
            }
          case 232: break;
          case 105: 
            { return new Symbol(sym.calib,yycolumn,yyline,yytext());
            }
          case 233: break;
          case 106: 
            { return new Symbol(sym.cour,yycolumn,yyline,yytext());
            }
          case 234: break;
          case 107: 
            { return new Symbol(sym.curs,yycolumn,yyline,yytext());
            }
          case 235: break;
          case 108: 
            { return new Symbol(sym.amarillo,yycolumn,yyline,yytext());
            }
          case 236: break;
          case 109: 
            { return new Symbol(sym.frank,yycolumn,yyline,yytext());
            }
          case 237: break;
          case 110: 
            { return new Symbol(sym.pala,yycolumn,yyline,yytext());
            }
          case 238: break;
          case 111: 
            { return new Symbol(sym.garam,yycolumn,yyline,yytext());
            }
          case 239: break;
          case 112: 
            { return new Symbol(sym.centrado,yycolumn,yyline,yytext());
            }
          case 240: break;
          case 113: 
            { return new Symbol(sym.archi,yycolumn,yyline,yytext());
            }
          case 241: break;
          case 114: 
            { return new Symbol(sym.afb,yycolumn,yyline,yytext());
            }
          case 242: break;
          case 115: 
            { return new Symbol(sym.os,yycolumn,yyline,yytext());
            }
          case 243: break;
          case 116: 
            { return new Symbol(sym.helve,yycolumn,yyline,yytext());
            }
          case 244: break;
          case 117: 
            { return new Symbol(sym.tcm,yycolumn,yyline,yytext());
            }
          case 245: break;
          case 118: 
            { return new Symbol(sym.monos,yycolumn,yyline,yytext());
            }
          case 246: break;
          case 119: 
            { return new Symbol(sym.bv,yycolumn,yyline,yytext());
            }
          case 247: break;
          case 120: 
            { return new Symbol(sym.izquierda,yycolumn,yyline,yytext());
            }
          case 248: break;
          case 121: 
            { return new Symbol(sym.deco,yycolumn,yyline,yytext());
            }
          case 249: break;
          case 122: 
            { return new Symbol(sym.anaranjado,yycolumn,yyline,yytext());
            }
          case 250: break;
          case 123: 
            { return new Symbol(sym.sanss,yycolumn,yyline,yytext());
            }
          case 251: break;
          case 124: 
            { return new Symbol(sym.bg,yycolumn,yyline,yytext());
            }
          case 252: break;
          case 125: 
            { return new Symbol(sym.bl,yycolumn,yyline,yytext());
            }
          case 253: break;
          case 126: 
            { return new Symbol(sym.csm,yycolumn,yyline,yytext());
            }
          case 254: break;
          case 127: 
            { return new Symbol(sym.bf,yycolumn,yyline,yytext());
            }
          case 255: break;
          case 128: 
            { return new Symbol(sym.tnr,yycolumn,yyline,yytext());
            }
          case 256: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
