
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Mar 27 14:09:15 CST 2018
//----------------------------------------------------

package Analisis;

import java.util.ArrayList;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Mar 27 14:09:15 CST 2018
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\262\000\002\002\004\000\002\053\002\000\002\002" +
    "\010\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\003\004\000\002" +
    "\003\004\000\002\003\004\000\002\003\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\002\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\004\004\000\002\004\004\000\002\004\004\000\002" +
    "\004\004\000\002\004\004\000\002\004\004\000\002\004" +
    "\004\000\002\004\004\000\002\004\004\000\002\004\004" +
    "\000\002\004\002\000\002\025\004\000\002\025\004\000" +
    "\002\025\004\000\002\025\004\000\002\025\004\000\002" +
    "\025\004\000\002\025\004\000\002\025\004\000\002\025" +
    "\004\000\002\025\004\000\002\025\004\000\002\025\004" +
    "\000\002\025\004\000\002\025\004\000\002\025\004\000" +
    "\002\025\002\000\002\037\003\000\002\037\003\000\002" +
    "\037\003\000\002\037\003\000\002\037\003\000\002\005" +
    "\006\000\002\005\005\000\002\005\006\000\002\005\005" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\014\003\000\002\014\005\000\002\006\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\003\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\010\000\002\046\006\000\002\052\006\000" +
    "\002\047\003\000\002\047\005\000\002\047\005\000\002" +
    "\047\005\000\002\047\005\000\002\047\005\000\002\047" +
    "\002\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\040\003\000\002\040\003\000\002\007\010\000\002" +
    "\007\007\000\002\026\010\000\002\026\007\000\002\054" +
    "\002\000\002\016\012\000\002\020\003\000\002\021\011" +
    "\000\002\021\010\000\002\022\003\000\002\022\005\000" +
    "\002\050\010\000\002\023\006\000\002\055\002\000\002" +
    "\024\014\000\002\027\003\000\002\027\005\000\002\027" +
    "\002\000\002\017\006\000\002\056\002\000\002\030\016" +
    "\000\002\057\002\000\002\060\002\000\002\031\014\000" +
    "\002\032\006\000\002\032\006\000\002\032\006\000\002" +
    "\032\006\000\002\032\006\000\002\032\006\000\002\032" +
    "\003\000\002\013\004\000\002\013\004\000\002\013\004" +
    "\000\002\013\002\000\002\061\002\000\002\033\005\000" +
    "\002\033\002\000\002\062\002\000\002\063\002\000\002" +
    "\034\011\000\002\034\002\000\002\064\002\000\002\035" +
    "\011\000\002\065\002\000\002\036\020\000\002\066\002" +
    "\000\002\041\007\000\002\067\002\000\002\070\002\000" +
    "\002\071\002\000\002\042\016\000\002\072\002\000\002" +
    "\073\002\000\002\043\010\000\002\074\002\000\002\043" +
    "\006\000\002\043\002\000\002\044\004\000\002\044\002" +
    "\000\002\045\004\000\002\045\002\000\002\051\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u016d\000\004\013\004\001\002\000\004\075\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\052\007\000\014\000\015\000\016\000\017\000\024" +
    "\000\026\000\027\000\032\000\033\000\037\000\041\000" +
    "\071\000\072\000\073\000\074\000\075\000\076\000\077" +
    "\000\100\000\001\002\000\052\007\011\014\ufff0\015\031" +
    "\016\023\017\055\024\033\026\032\027\013\032\056\033" +
    "\053\037\037\041\052\071\036\072\057\073\060\074\012" +
    "\075\027\076\024\077\020\100\017\001\002\000\010\026" +
    "\uffbf\066\uffbf\075\uffbf\001\002\000\140\004\uff93\005\uff93" +
    "\007\uff93\014\uff93\015\uff93\016\uff93\017\uff93\024\uff93\026" +
    "\uff93\027\uff93\030\uff93\031\uff93\032\uff93\033\uff93\036\uff93" +
    "\037\uff93\040\uff93\041\uff93\042\uff93\043\uff93\044\uff93\045" +
    "\uff93\046\uff93\047\uff93\050\uff93\051\uff93\052\uff93\053\uff93" +
    "\054\uff93\055\uff93\056\uff93\057\uff93\060\uff93\061\uff93\062" +
    "\uff93\063\uff93\064\uff93\067\uff93\070\uff93\071\uff93\072\uff93" +
    "\073\uff93\074\uff93\075\uff93\076\uff93\077\uff93\100\uff93\001" +
    "\002\000\016\071\036\072\057\073\060\074\012\075\062" +
    "\076\024\001\002\000\070\007\uffcd\014\uffcd\015\uffcd\016" +
    "\uffcd\017\uffcd\024\uffcd\026\uffcd\027\uffcd\031\uffcd\032\uffcd" +
    "\033\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043" +
    "\uffcd\067\uffcd\070\uffcd\071\uffcd\072\uffcd\073\uffcd\074\uffcd" +
    "\075\uffcd\076\uffcd\077\uffcd\100\uffcd\001\002\000\070\007" +
    "\uffce\014\uffce\015\uffce\016\uffce\017\uffce\024\uffce\026\uffce" +
    "\027\uffce\031\uffce\032\uffce\033\uffce\036\uffce\037\uffce\040" +
    "\uffce\041\uffce\042\uffce\043\uffce\067\uffce\070\uffce\071\uffce" +
    "\072\uffce\073\uffce\074\uffce\075\uffce\076\uffce\077\uffce\100" +
    "\uffce\001\002\000\066\007\011\014\ufff0\015\031\016\023" +
    "\017\055\024\033\026\032\027\013\031\ufff0\032\056\033" +
    "\053\036\ufff0\037\037\040\ufff0\041\052\042\ufff0\043\ufff0" +
    "\070\ufff0\071\036\072\057\073\060\074\012\075\027\076" +
    "\024\077\020\100\017\001\002\000\066\007\011\014\ufff0" +
    "\015\031\016\023\017\055\024\033\026\032\027\013\031" +
    "\ufff0\032\056\033\053\036\ufff0\037\037\040\ufff0\041\052" +
    "\042\ufff0\043\ufff0\070\ufff0\071\036\072\057\073\060\074" +
    "\012\075\027\076\024\077\020\100\017\001\002\000\066" +
    "\007\011\014\ufff0\015\031\016\023\017\055\024\033\026" +
    "\032\027\013\031\ufff0\032\056\033\053\036\ufff0\037\037" +
    "\040\ufff0\041\052\042\ufff0\043\ufff0\070\ufff0\071\036\072" +
    "\057\073\060\074\012\075\027\076\024\077\020\100\017" +
    "\001\002\000\070\007\uffcf\014\uffcf\015\uffcf\016\uffcf\017" +
    "\uffcf\024\uffcf\026\uffcf\027\uffcf\031\uffcf\032\uffcf\033\uffcf" +
    "\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\067" +
    "\uffcf\070\uffcf\071\uffcf\072\uffcf\073\uffcf\074\uffcf\075\uffcf" +
    "\076\uffcf\077\uffcf\100\uffcf\001\002\000\066\007\011\014" +
    "\ufff0\015\031\016\023\017\055\024\033\026\032\027\013" +
    "\031\ufff0\032\056\033\053\036\ufff0\037\037\040\ufff0\041" +
    "\052\042\ufff0\043\ufff0\070\ufff0\071\036\072\057\073\060" +
    "\074\012\075\027\076\024\077\020\100\017\001\002\000" +
    "\010\026\uffc0\066\uffc0\075\uffc0\001\002\000\140\004\uff91" +
    "\005\uff91\007\uff91\014\uff91\015\uff91\016\uff91\017\uff91\024" +
    "\uff91\026\uff91\027\uff91\030\uff91\031\uff91\032\uff91\033\uff91" +
    "\036\uff91\037\uff91\040\uff91\041\uff91\042\uff91\043\uff91\044" +
    "\uff91\045\uff91\046\uff91\047\uff91\050\uff91\051\uff91\052\uff91" +
    "\053\uff91\054\uff91\055\uff91\056\uff91\057\uff91\060\uff91\061" +
    "\uff91\062\uff91\063\uff91\064\uff91\067\uff91\070\uff91\071\uff91" +
    "\072\uff91\073\uff91\074\uff91\075\uff91\076\uff91\077\uff91\100" +
    "\uff91\001\002\000\066\007\011\014\ufff0\015\031\016\023" +
    "\017\055\024\033\026\032\027\013\031\ufff0\032\056\033" +
    "\053\036\ufff0\037\037\040\ufff0\041\052\042\ufff0\043\ufff0" +
    "\070\ufff0\071\036\072\057\073\060\074\012\075\027\076" +
    "\024\077\020\100\017\001\002\000\066\007\011\014\ufff0" +
    "\015\031\016\023\017\055\024\033\026\032\027\013\031" +
    "\ufff0\032\056\033\053\036\ufff0\037\037\040\ufff0\041\052" +
    "\042\ufff0\043\ufff0\070\ufff0\071\036\072\057\073\060\074" +
    "\012\075\027\076\024\077\020\100\017\001\002\000\014" +
    "\004\u014b\010\u0149\051\u014a\052\u0109\053\uff92\001\002\000" +
    "\066\007\011\014\ufff0\015\031\016\023\017\055\024\033" +
    "\026\032\027\013\031\ufff0\032\056\033\053\036\ufff0\037" +
    "\037\040\ufff0\041\052\042\ufff0\043\ufff0\070\ufff0\071\036" +
    "\072\057\073\060\074\012\075\027\076\024\077\020\100" +
    "\017\001\002\000\010\026\uffc1\066\uffc1\075\uffc1\001\002" +
    "\000\004\006\u0124\001\002\000\004\053\u0121\001\002\000" +
    "\004\010\u011f\001\002\000\066\007\011\014\ufff0\015\031" +
    "\016\023\017\055\024\033\026\032\027\013\031\ufff0\032" +
    "\056\033\053\036\ufff0\037\037\040\ufff0\041\052\042\ufff0" +
    "\043\ufff0\070\ufff0\071\036\072\057\073\060\074\012\075" +
    "\027\076\024\077\020\100\017\001\002\000\140\004\uff96" +
    "\005\uff96\007\uff96\014\uff96\015\uff96\016\uff96\017\uff96\024" +
    "\uff96\026\uff96\027\uff96\030\uff96\031\uff96\032\uff96\033\uff96" +
    "\036\uff96\037\uff96\040\uff96\041\uff96\042\uff96\043\uff96\044" +
    "\uff96\045\uff96\046\uff96\047\uff96\050\uff96\051\uff96\052\uff96" +
    "\053\uff96\054\uff96\055\uff96\056\uff96\057\uff96\060\uff96\061" +
    "\uff96\062\uff96\063\uff96\064\uff96\067\uff96\070\uff96\071\uff96" +
    "\072\uff96\073\uff96\074\uff96\075\uff96\076\uff96\077\uff96\100" +
    "\uff96\001\002\000\054\007\uff60\015\uff60\016\uff60\017\uff60" +
    "\024\uff60\026\uff60\027\uff60\032\uff60\033\uff60\037\uff60\040" +
    "\uff60\041\uff60\067\uff60\071\uff60\072\uff60\073\uff60\074\uff60" +
    "\075\uff60\076\uff60\077\uff60\100\uff60\001\002\000\070\007" +
    "\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\024\uffcc\026\uffcc" +
    "\027\uffcc\031\uffcc\032\uffcc\033\uffcc\036\uffcc\037\uffcc\040" +
    "\uffcc\041\uffcc\042\uffcc\043\uffcc\067\uffcc\070\uffcc\071\uffcc" +
    "\072\uffcc\073\uffcc\074\uffcc\075\uffcc\076\uffcc\077\uffcc\100" +
    "\uffcc\001\002\000\066\007\011\014\ufff0\015\031\016\023" +
    "\017\055\024\033\026\032\027\013\031\ufff0\032\056\033" +
    "\053\036\ufff0\037\037\040\ufff0\041\052\042\ufff0\043\ufff0" +
    "\070\ufff0\071\036\072\057\073\060\074\012\075\027\076" +
    "\024\077\020\100\017\001\002\000\066\007\011\014\ufff0" +
    "\015\031\016\023\017\055\024\033\026\032\027\013\031" +
    "\ufff0\032\056\033\053\036\ufff0\037\037\040\ufff0\041\052" +
    "\042\ufff0\043\ufff0\070\ufff0\071\036\072\057\073\060\074" +
    "\012\075\027\076\024\077\020\100\017\001\002\000\066" +
    "\007\011\014\ufff0\015\031\016\023\017\055\024\033\026" +
    "\032\027\013\031\ufff0\032\056\033\053\036\ufff0\037\037" +
    "\040\ufff0\041\052\042\ufff0\043\ufff0\070\ufff0\071\036\072" +
    "\057\073\060\074\012\075\027\076\024\077\020\100\017" +
    "\001\002\000\066\007\011\014\ufff0\015\031\016\023\017" +
    "\055\024\033\026\032\027\013\031\ufff0\032\056\033\053" +
    "\036\ufff0\037\037\040\ufff0\041\052\042\ufff0\043\ufff0\070" +
    "\ufff0\071\036\072\057\073\060\074\012\075\027\076\024" +
    "\077\020\100\017\001\002\000\070\007\uffd0\014\uffd0\015" +
    "\uffd0\016\uffd0\017\uffd0\024\uffd0\026\uffd0\027\uffd0\031\uffd0" +
    "\032\uffd0\033\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\042" +
    "\uffd0\043\uffd0\067\uffd0\070\uffd0\071\uffd0\072\uffd0\073\uffd0" +
    "\074\uffd0\075\uffd0\076\uffd0\077\uffd0\100\uffd0\001\002\000" +
    "\004\053\211\001\002\000\004\014\u0114\001\002\000\010" +
    "\026\351\066\352\075\350\001\002\000\066\007\011\014" +
    "\ufff0\015\031\016\023\017\055\024\033\026\032\027\013" +
    "\031\ufff0\032\056\033\053\036\ufff0\037\037\040\ufff0\041" +
    "\052\042\ufff0\043\ufff0\070\ufff0\071\036\072\057\073\060" +
    "\074\012\075\027\076\024\077\020\100\017\001\002\000" +
    "\004\042\323\001\002\000\004\075\274\001\002\000\066" +
    "\007\011\014\ufff0\015\031\016\023\017\055\024\033\026" +
    "\032\027\013\031\ufff0\032\056\033\053\036\ufff0\037\037" +
    "\040\ufff0\041\052\042\ufff0\043\ufff0\070\ufff0\071\036\072" +
    "\057\073\060\074\012\075\027\076\024\077\020\100\017" +
    "\001\002\000\010\026\uffbe\066\uffbe\075\uffbe\001\002\000" +
    "\016\071\036\072\057\073\060\074\012\075\062\076\024" +
    "\001\002\000\140\004\uff95\005\uff95\007\uff95\014\uff95\015" +
    "\uff95\016\uff95\017\uff95\024\uff95\026\uff95\027\uff95\030\uff95" +
    "\031\uff95\032\uff95\033\uff95\036\uff95\037\uff95\040\uff95\041" +
    "\uff95\042\uff95\043\uff95\044\uff95\045\uff95\046\uff95\047\uff95" +
    "\050\uff95\051\uff95\052\uff95\053\uff95\054\uff95\055\uff95\056" +
    "\uff95\057\uff95\060\uff95\061\uff95\062\uff95\063\uff95\064\uff95" +
    "\067\uff95\070\uff95\071\uff95\072\uff95\073\uff95\074\uff95\075" +
    "\uff95\076\uff95\077\uff95\100\uff95\001\002\000\140\004\uff94" +
    "\005\uff94\007\uff94\014\uff94\015\uff94\016\uff94\017\uff94\024" +
    "\uff94\026\uff94\027\uff94\030\uff94\031\uff94\032\uff94\033\uff94" +
    "\036\uff94\037\uff94\040\uff94\041\uff94\042\uff94\043\uff94\044" +
    "\uff94\045\uff94\046\uff94\047\uff94\050\uff94\051\uff94\052\uff94" +
    "\053\uff94\054\uff94\055\uff94\056\uff94\057\uff94\060\uff94\061" +
    "\uff94\062\uff94\063\uff94\064\uff94\067\uff94\070\uff94\071\uff94" +
    "\072\uff94\073\uff94\074\uff94\075\uff94\076\uff94\077\uff94\100" +
    "\uff94\001\002\000\124\004\210\007\uff70\014\uff70\015\uff70" +
    "\016\uff70\017\uff70\024\uff70\026\uff70\027\uff70\030\uff70\031" +
    "\uff70\032\uff70\033\uff70\036\uff70\037\uff70\040\uff70\041\uff70" +
    "\042\uff70\043\uff70\044\uffb6\045\uffb6\046\uffb6\047\uffb6\050" +
    "\uffb6\051\uffb6\053\211\055\uffb6\056\uffb6\057\uffb6\060\uffb6" +
    "\064\234\067\uff70\070\uff70\071\uff70\072\uff70\073\uff70\074" +
    "\uff70\075\uff70\076\uff70\077\uff70\100\uff70\001\002\000\134" +
    "\004\266\007\uff92\014\uff92\015\uff92\016\uff92\017\uff92\024" +
    "\uff92\026\uff92\027\uff92\030\uff92\031\uff92\032\uff92\033\uff92" +
    "\036\uff92\037\uff92\040\uff92\041\uff92\042\uff92\043\uff92\044" +
    "\uff92\045\uff92\046\uff92\047\uff92\050\uff92\051\uff92\053\uff92" +
    "\054\uff92\055\uff92\056\uff92\057\uff92\060\uff92\061\uff92\062" +
    "\uff92\063\uff92\064\uff92\067\uff92\070\uff92\071\uff92\072\uff92" +
    "\073\uff92\074\uff92\075\uff92\076\uff92\077\uff92\100\uff92\001" +
    "\002\000\014\055\162\056\163\057\164\060\165\064\161" +
    "\001\002\000\014\055\150\056\151\057\152\060\153\064" +
    "\147\001\002\000\030\044\237\045\241\046\242\047\236" +
    "\050\240\051\243\055\140\056\141\057\142\060\143\064" +
    "\137\001\002\000\056\007\uff64\014\uff64\015\uff64\016\uff64" +
    "\017\uff64\024\uff64\026\uff64\027\uff64\032\uff64\033\uff64\037" +
    "\uff64\041\uff64\043\uff64\067\uff64\071\uff64\072\uff64\073\uff64" +
    "\074\uff64\075\uff64\076\uff64\077\uff64\100\uff64\001\002\000" +
    "\056\007\011\014\uffd1\015\031\016\023\017\055\024\033" +
    "\026\032\027\013\032\056\033\053\037\037\041\052\043" +
    "\uffd1\067\070\071\036\072\057\073\060\074\012\075\027" +
    "\076\024\077\073\100\071\001\002\000\016\071\036\072" +
    "\057\073\060\074\012\075\062\076\024\001\002\000\070" +
    "\007\011\014\uffd1\015\031\016\023\017\055\024\033\026" +
    "\032\027\013\031\uffd1\032\056\033\053\036\uffd1\037\037" +
    "\040\uffd1\041\052\042\uffd1\043\uffd1\067\070\070\uffd1\071" +
    "\036\072\057\073\060\074\012\075\027\076\024\077\073" +
    "\100\071\001\002\000\070\007\011\014\uffd1\015\031\016" +
    "\023\017\055\024\033\026\032\027\013\031\uffd1\032\056" +
    "\033\053\036\uffd1\037\037\040\uffd1\041\052\042\uffd1\043" +
    "\uffd1\067\070\070\uffd1\071\036\072\057\073\060\074\012" +
    "\075\027\076\024\077\073\100\071\001\002\000\070\007" +
    "\011\014\uffd1\015\031\016\023\017\055\024\033\026\032" +
    "\027\013\031\uffd1\032\056\033\053\036\uffd1\037\037\040" +
    "\uffd1\041\052\042\uffd1\043\uffd1\067\070\070\uffd1\071\036" +
    "\072\057\073\060\074\012\075\027\076\024\077\073\100" +
    "\071\001\002\000\070\007\011\014\uffd1\015\031\016\023" +
    "\017\055\024\033\026\032\027\013\031\uffd1\032\056\033" +
    "\053\036\uffd1\037\037\040\uffd1\041\052\042\uffd1\043\uffd1" +
    "\067\070\070\uffd1\071\036\072\057\073\060\074\012\075" +
    "\027\076\024\077\073\100\071\001\002\000\066\007\011" +
    "\014\ufff0\015\031\016\023\017\055\024\033\026\032\027" +
    "\013\031\ufff0\032\056\033\053\036\ufff0\037\037\040\ufff0" +
    "\041\052\042\ufff0\043\ufff0\070\ufff0\071\036\072\057\073" +
    "\060\074\012\075\027\076\024\077\020\100\017\001\002" +
    "\000\070\007\011\014\uffd1\015\031\016\023\017\055\024" +
    "\033\026\032\027\013\031\uffd1\032\056\033\053\036\uffd1" +
    "\037\037\040\uffd1\041\052\042\uffd1\043\uffd1\067\070\070" +
    "\uffd1\071\036\072\057\073\060\074\012\075\027\076\024" +
    "\077\073\100\071\001\002\000\070\007\011\014\uffd1\015" +
    "\031\016\023\017\055\024\033\026\032\027\013\031\uffd1" +
    "\032\056\033\053\036\uffd1\037\037\040\uffd1\041\052\042" +
    "\uffd1\043\uffd1\067\070\070\uffd1\071\036\072\057\073\060" +
    "\074\012\075\027\076\024\077\073\100\071\001\002\000" +
    "\070\007\011\014\uffd1\015\031\016\023\017\055\024\033" +
    "\026\032\027\013\031\uffd1\032\056\033\053\036\uffd1\037" +
    "\037\040\uffd1\041\052\042\uffd1\043\uffd1\067\070\070\uffd1" +
    "\071\036\072\057\073\060\074\012\075\027\076\024\077" +
    "\073\100\071\001\002\000\070\007\011\014\uffd1\015\031" +
    "\016\023\017\055\024\033\026\032\027\013\031\uffd1\032" +
    "\056\033\053\036\uffd1\037\037\040\uffd1\041\052\042\uffd1" +
    "\043\uffd1\067\070\070\uffd1\071\036\072\057\073\060\074" +
    "\012\075\027\076\024\077\073\100\071\001\002\000\006" +
    "\014\uff53\043\117\001\002\000\070\007\011\014\uffd1\015" +
    "\031\016\023\017\055\024\033\026\032\027\013\031\uffd1" +
    "\032\056\033\053\036\uffd1\037\037\040\uffd1\041\052\042" +
    "\uffd1\043\uffd1\067\070\070\uffd1\071\036\072\057\073\060" +
    "\074\012\075\027\076\024\077\073\100\071\001\002\000" +
    "\070\007\011\014\uffd1\015\031\016\023\017\055\024\033" +
    "\026\032\027\013\031\uffd1\032\056\033\053\036\uffd1\037" +
    "\037\040\uffd1\041\052\042\uffd1\043\uffd1\067\070\070\uffd1" +
    "\071\036\072\057\073\060\074\012\075\027\076\024\077" +
    "\073\100\071\001\002\000\070\007\011\014\uffd1\015\031" +
    "\016\023\017\055\024\033\026\032\027\013\031\uffd1\032" +
    "\056\033\053\036\uffd1\037\037\040\uffd1\041\052\042\uffd1" +
    "\043\uffd1\067\070\070\uffd1\071\036\072\057\073\060\074" +
    "\012\075\027\076\024\077\073\100\071\001\002\000\070" +
    "\007\011\014\uffd1\015\031\016\023\017\055\024\033\026" +
    "\032\027\013\031\uffd1\032\056\033\053\036\uffd1\037\037" +
    "\040\uffd1\041\052\042\uffd1\043\uffd1\067\070\070\uffd1\071" +
    "\036\072\057\073\060\074\012\075\027\076\024\077\073" +
    "\100\071\001\002\000\070\007\011\014\uffd1\015\031\016" +
    "\023\017\055\024\033\026\032\027\013\031\uffd1\032\056" +
    "\033\053\036\uffd1\037\037\040\uffd1\041\052\042\uffd1\043" +
    "\uffd1\067\070\070\uffd1\071\036\072\057\073\060\074\012" +
    "\075\027\076\024\077\073\100\071\001\002\000\070\007" +
    "\011\014\uffd1\015\031\016\023\017\055\024\033\026\032" +
    "\027\013\031\uffd1\032\056\033\053\036\uffd1\037\037\040" +
    "\uffd1\041\052\042\uffd1\043\uffd1\067\070\070\uffd1\071\036" +
    "\072\057\073\060\074\012\075\027\076\024\077\073\100" +
    "\071\001\002\000\020\014\uffda\031\uffda\036\uffda\040\uffda" +
    "\042\uffda\043\uffda\070\uffda\001\002\000\020\014\uffdd\031" +
    "\uffdd\036\uffdd\040\uffdd\042\uffdd\043\uffdd\070\uffdd\001\002" +
    "\000\020\014\uffd9\031\uffd9\036\uffd9\040\uffd9\042\uffd9\043" +
    "\uffd9\070\uffd9\001\002\000\020\014\uffe0\031\uffe0\036\uffe0" +
    "\040\uffe0\042\uffe0\043\uffe0\070\uffe0\001\002\000\020\014" +
    "\uffdf\031\uffdf\036\uffdf\040\uffdf\042\uffdf\043\uffdf\070\uffdf" +
    "\001\002\000\020\014\uffd6\031\uffd6\036\uffd6\040\uffd6\042" +
    "\uffd6\043\uffd6\070\uffd6\001\002\000\004\032\123\001\002" +
    "\000\004\014\121\001\002\000\004\032\122\001\002\000" +
    "\070\007\uff63\014\uff63\015\uff63\016\uff63\017\uff63\024\uff63" +
    "\026\uff63\027\uff63\031\uff63\032\uff63\033\uff63\036\uff63\037" +
    "\uff63\040\uff63\041\uff63\042\uff63\043\uff63\067\uff63\070\uff63" +
    "\071\uff63\072\uff63\073\uff63\074\uff63\075\uff63\076\uff63\077" +
    "\uff63\100\uff63\001\002\000\004\014\uff54\001\002\000\020" +
    "\014\uffdc\031\uffdc\036\uffdc\040\uffdc\042\uffdc\043\uffdc\070" +
    "\uffdc\001\002\000\020\014\uffd3\031\uffd3\036\uffd3\040\uffd3" +
    "\042\uffd3\043\uffd3\070\uffd3\001\002\000\020\014\uffde\031" +
    "\uffde\036\uffde\040\uffde\042\uffde\043\uffde\070\uffde\001\002" +
    "\000\020\014\uffdb\031\uffdb\036\uffdb\040\uffdb\042\uffdb\043" +
    "\uffdb\070\uffdb\001\002\000\020\014\uffd2\031\uffd2\036\uffd2" +
    "\040\uffd2\042\uffd2\043\uffd2\070\uffd2\001\002\000\020\014" +
    "\uffd8\031\uffd8\036\uffd8\040\uffd8\042\uffd8\043\uffd8\070\uffd8" +
    "\001\002\000\020\014\uffd5\031\uffd5\036\uffd5\040\uffd5\042" +
    "\uffd5\043\uffd5\070\uffd5\001\002\000\020\014\uffd7\031\uffd7" +
    "\036\uffd7\040\uffd7\042\uffd7\043\uffd7\070\uffd7\001\002\000" +
    "\020\014\uffd4\031\uffd4\036\uffd4\040\uffd4\042\uffd4\043\uffd4" +
    "\070\uffd4\001\002\000\134\004\210\007\uffb6\014\uffb6\015" +
    "\uffb6\016\uffb6\017\uffb6\024\uffb6\026\uffb6\027\uffb6\030\uffb6" +
    "\031\uffb6\032\uffb6\033\uffb6\036\uffb6\037\uffb6\040\uffb6\041" +
    "\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6\047\uffb6" +
    "\050\uffb6\051\uffb6\053\211\054\uffb6\055\uffb6\056\uffb6\057" +
    "\uffb6\060\uffb6\061\uffb6\062\uffb6\063\uffb6\064\234\067\uffb6" +
    "\070\uffb6\071\uffb6\072\uffb6\073\uffb6\074\uffb6\075\uffb6\076" +
    "\uffb6\077\uffb6\100\uffb6\001\002\000\102\007\uff50\014\uff50" +
    "\015\uff50\016\uff50\017\uff50\024\uff50\026\uff50\027\uff50\031" +
    "\uff50\032\uff50\033\uff50\036\uff50\037\uff50\040\uff50\041\uff50" +
    "\042\uff50\043\uff50\055\140\056\141\057\142\060\143\064" +
    "\137\067\uff50\070\uff50\071\uff50\072\uff50\073\uff50\074\uff50" +
    "\075\uff50\076\uff50\077\uff50\100\uff50\001\002\000\016\071" +
    "\036\072\057\073\060\074\012\075\205\076\024\001\002" +
    "\000\016\071\036\072\057\073\060\074\012\075\062\076" +
    "\024\001\002\000\016\071\036\072\057\073\060\074\012" +
    "\075\062\076\024\001\002\000\016\071\036\072\057\073" +
    "\060\074\012\075\062\076\024\001\002\000\016\071\036" +
    "\072\057\073\060\074\012\075\062\076\024\001\002\000" +
    "\130\007\uffa8\014\uffa8\015\uffa8\016\uffa8\017\uffa8\024\uffa8" +
    "\026\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8\036" +
    "\uffa8\037\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8" +
    "\045\uffa8\046\uffa8\047\uffa8\050\uffa8\051\uffa8\054\uffa8\055" +
    "\uffa8\056\uffa8\057\uffa8\060\uffa8\061\uffa8\062\uffa8\063\uffa8" +
    "\064\161\067\uffa8\070\uffa8\071\uffa8\072\uffa8\073\uffa8\074" +
    "\uffa8\075\uffa8\076\uffa8\077\uffa8\100\uffa8\001\002\000\130" +
    "\007\uffb2\014\uffb2\015\uffb2\016\uffb2\017\uffb2\024\uffb2\026" +
    "\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2\036\uffb2" +
    "\037\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045" +
    "\uffb2\046\uffb2\047\uffb2\050\uffb2\051\uffb2\054\uffb2\055\uffb2" +
    "\056\uffb2\057\uffb2\060\uffb2\061\uffb2\062\uffb2\063\uffb2\064" +
    "\147\067\uffb2\070\uffb2\071\uffb2\072\uffb2\073\uffb2\074\uffb2" +
    "\075\uffb2\076\uffb2\077\uffb2\100\uffb2\001\002\000\130\007" +
    "\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7\024\uffb7\026\uffb7" +
    "\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\036\uffb7\037" +
    "\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7" +
    "\046\uffb7\047\uffb7\050\uffb7\051\uffb7\054\uffb7\055\uffb7\056" +
    "\uffb7\057\uffb7\060\uffb7\061\uffb7\062\uffb7\063\uffb7\064\137" +
    "\067\uffb7\070\uffb7\071\uffb7\072\uffb7\073\uffb7\074\uffb7\075" +
    "\uffb7\076\uffb7\077\uffb7\100\uffb7\001\002\000\016\071\036" +
    "\072\057\073\060\074\012\075\062\076\024\001\002\000" +
    "\016\071\036\072\057\073\060\074\012\075\062\076\024" +
    "\001\002\000\016\071\036\072\057\073\060\074\012\075" +
    "\062\076\024\001\002\000\016\071\036\072\057\073\060" +
    "\074\012\075\062\076\024\001\002\000\016\071\036\072" +
    "\057\073\060\074\012\075\062\076\024\001\002\000\130" +
    "\007\uffad\014\uffad\015\uffad\016\uffad\017\uffad\024\uffad\026" +
    "\uffad\027\uffad\030\uffad\031\uffad\032\uffad\033\uffad\036\uffad" +
    "\037\uffad\040\uffad\041\uffad\042\uffad\043\uffad\044\uffad\045" +
    "\uffad\046\uffad\047\uffad\050\uffad\051\uffad\054\uffad\055\uffad" +
    "\056\uffad\057\uffad\060\uffad\061\uffad\062\uffad\063\uffad\064" +
    "\137\067\uffad\070\uffad\071\uffad\072\uffad\073\uffad\074\uffad" +
    "\075\uffad\076\uffad\077\uffad\100\uffad\001\002\000\130\007" +
    "\uffae\014\uffae\015\uffae\016\uffae\017\uffae\024\uffae\026\uffae" +
    "\027\uffae\030\uffae\031\uffae\032\uffae\033\uffae\036\uffae\037" +
    "\uffae\040\uffae\041\uffae\042\uffae\043\uffae\044\uffae\045\uffae" +
    "\046\uffae\047\uffae\050\uffae\051\uffae\054\uffae\055\uffae\056" +
    "\uffae\057\uffae\060\uffae\061\uffae\062\uffae\063\uffae\064\137" +
    "\067\uffae\070\uffae\071\uffae\072\uffae\073\uffae\074\uffae\075" +
    "\uffae\076\uffae\077\uffae\100\uffae\001\002\000\130\007\uffaf" +
    "\014\uffaf\015\uffaf\016\uffaf\017\uffaf\024\uffaf\026\uffaf\027" +
    "\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf\036\uffaf\037\uffaf" +
    "\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046" +
    "\uffaf\047\uffaf\050\uffaf\051\uffaf\054\uffaf\055\uffaf\056\uffaf" +
    "\057\142\060\143\061\uffaf\062\uffaf\063\uffaf\064\137\067" +
    "\uffaf\070\uffaf\071\uffaf\072\uffaf\073\uffaf\074\uffaf\075\uffaf" +
    "\076\uffaf\077\uffaf\100\uffaf\001\002\000\130\007\uffb0\014" +
    "\uffb0\015\uffb0\016\uffb0\017\uffb0\024\uffb0\026\uffb0\027\uffb0" +
    "\030\uffb0\031\uffb0\032\uffb0\033\uffb0\036\uffb0\037\uffb0\040" +
    "\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0" +
    "\047\uffb0\050\uffb0\051\uffb0\054\uffb0\055\uffb0\056\uffb0\057" +
    "\142\060\143\061\uffb0\062\uffb0\063\uffb0\064\137\067\uffb0" +
    "\070\uffb0\071\uffb0\072\uffb0\073\uffb0\074\uffb0\075\uffb0\076" +
    "\uffb0\077\uffb0\100\uffb0\001\002\000\130\007\uffac\014\uffac" +
    "\015\uffac\016\uffac\017\uffac\024\uffac\026\uffac\027\uffac\030" +
    "\uffac\031\uffac\032\uffac\033\uffac\036\uffac\037\uffac\040\uffac" +
    "\041\uffac\042\uffac\043\uffac\044\uffac\045\uffac\046\uffac\047" +
    "\uffac\050\uffac\051\uffac\054\uffac\055\uffac\056\uffac\057\uffac" +
    "\060\uffac\061\uffac\062\uffac\063\uffac\064\uffac\067\uffac\070" +
    "\uffac\071\uffac\072\uffac\073\uffac\074\uffac\075\uffac\076\uffac" +
    "\077\uffac\100\uffac\001\002\000\016\071\036\072\057\073" +
    "\060\074\012\075\062\076\024\001\002\000\016\071\036" +
    "\072\057\073\060\074\012\075\062\076\024\001\002\000" +
    "\016\071\036\072\057\073\060\074\012\075\062\076\024" +
    "\001\002\000\016\071\036\072\057\073\060\074\012\075" +
    "\062\076\024\001\002\000\016\071\036\072\057\073\060" +
    "\074\012\075\062\076\024\001\002\000\130\007\uffa3\014" +
    "\uffa3\015\uffa3\016\uffa3\017\uffa3\024\uffa3\026\uffa3\027\uffa3" +
    "\030\uffa3\031\uffa3\032\uffa3\033\uffa3\036\uffa3\037\uffa3\040" +
    "\uffa3\041\uffa3\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3" +
    "\047\uffa3\050\uffa3\051\uffa3\054\uffa3\055\uffa3\056\uffa3\057" +
    "\uffa3\060\uffa3\061\uffa3\062\uffa3\063\uffa3\064\137\067\uffa3" +
    "\070\uffa3\071\uffa3\072\uffa3\073\uffa3\074\uffa3\075\uffa3\076" +
    "\uffa3\077\uffa3\100\uffa3\001\002\000\130\007\uffa4\014\uffa4" +
    "\015\uffa4\016\uffa4\017\uffa4\024\uffa4\026\uffa4\027\uffa4\030" +
    "\uffa4\031\uffa4\032\uffa4\033\uffa4\036\uffa4\037\uffa4\040\uffa4" +
    "\041\uffa4\042\uffa4\043\uffa4\044\uffa4\045\uffa4\046\uffa4\047" +
    "\uffa4\050\uffa4\051\uffa4\054\uffa4\055\uffa4\056\uffa4\057\uffa4" +
    "\060\uffa4\061\uffa4\062\uffa4\063\uffa4\064\137\067\uffa4\070" +
    "\uffa4\071\uffa4\072\uffa4\073\uffa4\074\uffa4\075\uffa4\076\uffa4" +
    "\077\uffa4\100\uffa4\001\002\000\130\007\uffa5\014\uffa5\015" +
    "\uffa5\016\uffa5\017\uffa5\024\uffa5\026\uffa5\027\uffa5\030\uffa5" +
    "\031\uffa5\032\uffa5\033\uffa5\036\uffa5\037\uffa5\040\uffa5\041" +
    "\uffa5\042\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5" +
    "\050\uffa5\051\uffa5\054\uffa5\055\uffa5\056\uffa5\057\142\060" +
    "\143\061\uffa5\062\uffa5\063\uffa5\064\137\067\uffa5\070\uffa5" +
    "\071\uffa5\072\uffa5\073\uffa5\074\uffa5\075\uffa5\076\uffa5\077" +
    "\uffa5\100\uffa5\001\002\000\130\007\uffa6\014\uffa6\015\uffa6" +
    "\016\uffa6\017\uffa6\024\uffa6\026\uffa6\027\uffa6\030\uffa6\031" +
    "\uffa6\032\uffa6\033\uffa6\036\uffa6\037\uffa6\040\uffa6\041\uffa6" +
    "\042\uffa6\043\uffa6\044\uffa6\045\uffa6\046\uffa6\047\uffa6\050" +
    "\uffa6\051\uffa6\054\uffa6\055\uffa6\056\uffa6\057\142\060\143" +
    "\061\uffa6\062\uffa6\063\uffa6\064\137\067\uffa6\070\uffa6\071" +
    "\uffa6\072\uffa6\073\uffa6\074\uffa6\075\uffa6\076\uffa6\077\uffa6" +
    "\100\uffa6\001\002\000\130\007\uffa2\014\uffa2\015\uffa2\016" +
    "\uffa2\017\uffa2\024\uffa2\026\uffa2\027\uffa2\030\uffa2\031\uffa2" +
    "\032\uffa2\033\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2\042" +
    "\uffa2\043\uffa2\044\uffa2\045\uffa2\046\uffa2\047\uffa2\050\uffa2" +
    "\051\uffa2\054\uffa2\055\uffa2\056\uffa2\057\uffa2\060\uffa2\061" +
    "\uffa2\062\uffa2\063\uffa2\064\uffa2\067\uffa2\070\uffa2\071\uffa2" +
    "\072\uffa2\073\uffa2\074\uffa2\075\uffa2\076\uffa2\077\uffa2\100" +
    "\uffa2\001\002\000\130\007\uffa9\014\uffa9\015\uffa9\016\uffa9" +
    "\017\uffa9\024\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9\032" +
    "\uffa9\033\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9" +
    "\043\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9\051" +
    "\uffa9\054\uffa9\055\uffa9\056\uffa9\057\uffa9\060\uffa9\061\uffa9" +
    "\062\uffa9\063\uffa9\064\161\067\uffa9\070\uffa9\071\uffa9\072" +
    "\uffa9\073\uffa9\074\uffa9\075\uffa9\076\uffa9\077\uffa9\100\uffa9" +
    "\001\002\000\130\007\uffb3\014\uffb3\015\uffb3\016\uffb3\017" +
    "\uffb3\024\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3" +
    "\033\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043" +
    "\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3" +
    "\054\uffb3\055\uffb3\056\uffb3\057\uffb3\060\uffb3\061\uffb3\062" +
    "\uffb3\063\uffb3\064\147\067\uffb3\070\uffb3\071\uffb3\072\uffb3" +
    "\073\uffb3\074\uffb3\075\uffb3\076\uffb3\077\uffb3\100\uffb3\001" +
    "\002\000\130\007\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8" +
    "\024\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033" +
    "\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8" +
    "\044\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\054" +
    "\uffb8\055\uffb8\056\uffb8\057\uffb8\060\uffb8\061\uffb8\062\uffb8" +
    "\063\uffb8\064\137\067\uffb8\070\uffb8\071\uffb8\072\uffb8\073" +
    "\uffb8\074\uffb8\075\uffb8\076\uffb8\077\uffb8\100\uffb8\001\002" +
    "\000\130\007\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa\024" +
    "\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa" +
    "\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044" +
    "\uffaa\045\uffaa\046\uffaa\047\uffaa\050\uffaa\051\uffaa\054\uffaa" +
    "\055\uffaa\056\uffaa\057\164\060\165\061\uffaa\062\uffaa\063" +
    "\uffaa\064\161\067\uffaa\070\uffaa\071\uffaa\072\uffaa\073\uffaa" +
    "\074\uffaa\075\uffaa\076\uffaa\077\uffaa\100\uffaa\001\002\000" +
    "\130\007\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4\024\uffb4" +
    "\026\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4\036" +
    "\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4" +
    "\045\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\054\uffb4\055" +
    "\uffb4\056\uffb4\057\152\060\153\061\uffb4\062\uffb4\063\uffb4" +
    "\064\147\067\uffb4\070\uffb4\071\uffb4\072\uffb4\073\uffb4\074" +
    "\uffb4\075\uffb4\076\uffb4\077\uffb4\100\uffb4\001\002\000\130" +
    "\007\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9\024\uffb9\026" +
    "\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9\036\uffb9" +
    "\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9\045" +
    "\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9\054\uffb9\055\uffb9" +
    "\056\uffb9\057\142\060\143\061\uffb9\062\uffb9\063\uffb9\064" +
    "\137\067\uffb9\070\uffb9\071\uffb9\072\uffb9\073\uffb9\074\uffb9" +
    "\075\uffb9\076\uffb9\077\uffb9\100\uffb9\001\002\000\130\007" +
    "\uffab\014\uffab\015\uffab\016\uffab\017\uffab\024\uffab\026\uffab" +
    "\027\uffab\030\uffab\031\uffab\032\uffab\033\uffab\036\uffab\037" +
    "\uffab\040\uffab\041\uffab\042\uffab\043\uffab\044\uffab\045\uffab" +
    "\046\uffab\047\uffab\050\uffab\051\uffab\054\uffab\055\uffab\056" +
    "\uffab\057\164\060\165\061\uffab\062\uffab\063\uffab\064\161" +
    "\067\uffab\070\uffab\071\uffab\072\uffab\073\uffab\074\uffab\075" +
    "\uffab\076\uffab\077\uffab\100\uffab\001\002\000\130\007\uffb5" +
    "\014\uffb5\015\uffb5\016\uffb5\017\uffb5\024\uffb5\026\uffb5\027" +
    "\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\036\uffb5\037\uffb5" +
    "\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5\046" +
    "\uffb5\047\uffb5\050\uffb5\051\uffb5\054\uffb5\055\uffb5\056\uffb5" +
    "\057\152\060\153\061\uffb5\062\uffb5\063\uffb5\064\147\067" +
    "\uffb5\070\uffb5\071\uffb5\072\uffb5\073\uffb5\074\uffb5\075\uffb5" +
    "\076\uffb5\077\uffb5\100\uffb5\001\002\000\130\007\uffba\014" +
    "\uffba\015\uffba\016\uffba\017\uffba\024\uffba\026\uffba\027\uffba" +
    "\030\uffba\031\uffba\032\uffba\033\uffba\036\uffba\037\uffba\040" +
    "\uffba\041\uffba\042\uffba\043\uffba\044\uffba\045\uffba\046\uffba" +
    "\047\uffba\050\uffba\051\uffba\054\uffba\055\uffba\056\uffba\057" +
    "\142\060\143\061\uffba\062\uffba\063\uffba\064\137\067\uffba" +
    "\070\uffba\071\uffba\072\uffba\073\uffba\074\uffba\075\uffba\076" +
    "\uffba\077\uffba\100\uffba\001\002\000\006\004\210\053\211" +
    "\001\002\000\100\004\uff92\005\uff92\007\uff92\014\uff92\015" +
    "\uff92\016\uff92\017\uff92\024\uff92\026\uff92\027\uff92\032\uff92" +
    "\033\uff92\037\uff92\041\uff92\042\uff92\052\uff92\053\uff92\054" +
    "\uff92\055\uff92\056\uff92\057\uff92\060\uff92\067\uff92\071\uff92" +
    "\072\uff92\073\uff92\074\uff92\075\uff92\076\uff92\077\uff92\100" +
    "\uff92\001\002\000\130\007\uffa7\014\uffa7\015\uffa7\016\uffa7" +
    "\017\uffa7\024\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7\032" +
    "\uffa7\033\uffa7\036\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7" +
    "\043\uffa7\044\uffa7\045\uffa7\046\uffa7\047\uffa7\050\uffa7\051" +
    "\uffa7\054\uffa7\055\uffa7\056\uffa7\057\uffa7\060\uffa7\061\uffa7" +
    "\062\uffa7\063\uffa7\064\uffa7\067\uffa7\070\uffa7\071\uffa7\072" +
    "\uffa7\073\uffa7\074\uffa7\075\uffa7\076\uffa7\077\uffa7\100\uffa7" +
    "\001\002\000\130\007\uffb1\014\uffb1\015\uffb1\016\uffb1\017" +
    "\uffb1\024\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1" +
    "\033\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1\043" +
    "\uffb1\044\uffb1\045\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1" +
    "\054\uffb1\055\uffb1\056\uffb1\057\uffb1\060\uffb1\061\uffb1\062" +
    "\uffb1\063\uffb1\064\uffb1\067\uffb1\070\uffb1\071\uffb1\072\uffb1" +
    "\073\uffb1\074\uffb1\075\uffb1\076\uffb1\077\uffb1\100\uffb1\001" +
    "\002\000\004\075\230\001\002\000\020\054\uff97\071\036" +
    "\072\057\073\060\074\012\075\205\076\024\001\002\000" +
    "\004\054\226\001\002\000\016\052\216\054\uff9d\055\214" +
    "\056\215\057\217\060\220\001\002\000\020\054\uff97\071" +
    "\036\072\057\073\060\074\012\075\205\076\024\001\002" +
    "\000\020\054\uff97\071\036\072\057\073\060\074\012\075" +
    "\205\076\024\001\002\000\020\054\uff97\071\036\072\057" +
    "\073\060\074\012\075\205\076\024\001\002\000\020\054" +
    "\uff97\071\036\072\057\073\060\074\012\075\205\076\024" +
    "\001\002\000\020\054\uff97\071\036\072\057\073\060\074" +
    "\012\075\205\076\024\001\002\000\004\054\uff98\001\002" +
    "\000\004\054\uff99\001\002\000\004\054\uff9c\001\002\000" +
    "\004\054\uff9a\001\002\000\004\054\uff9b\001\002\000\130" +
    "\007\uff9f\014\uff9f\015\uff9f\016\uff9f\017\uff9f\024\uff9f\026" +
    "\uff9f\027\uff9f\030\uff9f\031\uff9f\032\uff9f\033\uff9f\036\uff9f" +
    "\037\uff9f\040\uff9f\041\uff9f\042\uff9f\043\uff9f\044\uff9f\045" +
    "\uff9f\046\uff9f\047\uff9f\050\uff9f\051\uff9f\054\uff9f\055\uff9f" +
    "\056\uff9f\057\uff9f\060\uff9f\061\uff9f\062\uff9f\063\uff9f\064" +
    "\uff9f\067\uff9f\070\uff9f\071\uff9f\072\uff9f\073\uff9f\074\uff9f" +
    "\075\uff9f\076\uff9f\077\uff9f\100\uff9f\001\002\000\004\005" +
    "\233\001\002\000\006\005\uff85\052\231\001\002\000\004" +
    "\075\230\001\002\000\004\005\uff84\001\002\000\130\007" +
    "\uff9e\014\uff9e\015\uff9e\016\uff9e\017\uff9e\024\uff9e\026\uff9e" +
    "\027\uff9e\030\uff9e\031\uff9e\032\uff9e\033\uff9e\036\uff9e\037" +
    "\uff9e\040\uff9e\041\uff9e\042\uff9e\043\uff9e\044\uff9e\045\uff9e" +
    "\046\uff9e\047\uff9e\050\uff9e\051\uff9e\054\uff9e\055\uff9e\056" +
    "\uff9e\057\uff9e\060\uff9e\061\uff9e\062\uff9e\063\uff9e\064\uff9e" +
    "\067\uff9e\070\uff9e\071\uff9e\072\uff9e\073\uff9e\074\uff9e\075" +
    "\uff9e\076\uff9e\077\uff9e\100\uff9e\001\002\000\016\071\036" +
    "\072\057\073\060\074\012\075\062\076\024\001\002\000" +
    "\130\007\uffa1\014\uffa1\015\uffa1\016\uffa1\017\uffa1\024\uffa1" +
    "\026\uffa1\027\uffa1\030\uffa1\031\uffa1\032\uffa1\033\uffa1\036" +
    "\uffa1\037\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1\044\uffa1" +
    "\045\uffa1\046\uffa1\047\uffa1\050\uffa1\051\uffa1\054\uffa1\055" +
    "\uffa1\056\uffa1\057\uffa1\060\uffa1\061\uffa1\062\uffa1\063\uffa1" +
    "\064\uffa1\067\uffa1\070\uffa1\071\uffa1\072\uffa1\073\uffa1\074" +
    "\uffa1\075\uffa1\076\uffa1\077\uffa1\100\uffa1\001\002\000\016" +
    "\071\036\072\057\073\060\074\012\075\062\076\024\001" +
    "\002\000\016\071\036\072\057\073\060\074\012\075\062" +
    "\076\024\001\002\000\016\071\036\072\057\073\060\074" +
    "\012\075\062\076\024\001\002\000\016\071\036\072\057" +
    "\073\060\074\012\075\062\076\024\001\002\000\016\071" +
    "\036\072\057\073\060\074\012\075\062\076\024\001\002" +
    "\000\016\071\036\072\057\073\060\074\012\075\062\076" +
    "\024\001\002\000\112\007\uff6c\014\uff6c\015\uff6c\016\uff6c" +
    "\017\uff6c\024\uff6c\026\uff6c\027\uff6c\030\uff6c\031\uff6c\032" +
    "\uff6c\033\uff6c\036\uff6c\037\uff6c\040\uff6c\041\uff6c\042\uff6c" +
    "\043\uff6c\055\140\056\141\057\142\060\143\061\250\062" +
    "\247\063\246\064\137\067\uff6c\070\uff6c\071\uff6c\072\uff6c" +
    "\073\uff6c\074\uff6c\075\uff6c\076\uff6c\077\uff6c\100\uff6c\001" +
    "\002\000\072\007\uff71\014\uff71\015\uff71\016\uff71\017\uff71" +
    "\024\uff71\026\uff71\027\uff71\030\uff71\031\uff71\032\uff71\033" +
    "\uff71\036\uff71\037\uff71\040\uff71\041\uff71\042\uff71\043\uff71" +
    "\067\uff71\070\uff71\071\uff71\072\uff71\073\uff71\074\uff71\075" +
    "\uff71\076\uff71\077\uff71\100\uff71\001\002\000\016\071\036" +
    "\072\057\073\060\074\012\075\062\076\024\001\002\000" +
    "\016\071\036\072\057\073\060\074\012\075\062\076\024" +
    "\001\002\000\016\071\036\072\057\073\060\074\012\075" +
    "\062\076\024\001\002\000\072\007\uff6f\014\uff6f\015\uff6f" +
    "\016\uff6f\017\uff6f\024\uff6f\026\uff6f\027\uff6f\030\uff6f\031" +
    "\uff6f\032\uff6f\033\uff6f\036\uff6f\037\uff6f\040\uff6f\041\uff6f" +
    "\042\uff6f\043\uff6f\067\uff6f\070\uff6f\071\uff6f\072\uff6f\073" +
    "\uff6f\074\uff6f\075\uff6f\076\uff6f\077\uff6f\100\uff6f\001\002" +
    "\000\072\007\uff6e\014\uff6e\015\uff6e\016\uff6e\017\uff6e\024" +
    "\uff6e\026\uff6e\027\uff6e\030\uff6e\031\uff6e\032\uff6e\033\uff6e" +
    "\036\uff6e\037\uff6e\040\uff6e\041\uff6e\042\uff6e\043\uff6e\067" +
    "\uff6e\070\uff6e\071\uff6e\072\uff6e\073\uff6e\074\uff6e\075\uff6e" +
    "\076\uff6e\077\uff6e\100\uff6e\001\002\000\072\007\uff6d\014" +
    "\uff6d\015\uff6d\016\uff6d\017\uff6d\024\uff6d\026\uff6d\027\uff6d" +
    "\030\uff6d\031\uff6d\032\uff6d\033\uff6d\036\uff6d\037\uff6d\040" +
    "\uff6d\041\uff6d\042\uff6d\043\uff6d\067\uff6d\070\uff6d\071\uff6d" +
    "\072\uff6d\073\uff6d\074\uff6d\075\uff6d\076\uff6d\077\uff6d\100" +
    "\uff6d\001\002\000\112\007\uff6c\014\uff6c\015\uff6c\016\uff6c" +
    "\017\uff6c\024\uff6c\026\uff6c\027\uff6c\030\uff6c\031\uff6c\032" +
    "\uff6c\033\uff6c\036\uff6c\037\uff6c\040\uff6c\041\uff6c\042\uff6c" +
    "\043\uff6c\055\140\056\141\057\142\060\143\061\250\062" +
    "\247\063\246\064\137\067\uff6c\070\uff6c\071\uff6c\072\uff6c" +
    "\073\uff6c\074\uff6c\075\uff6c\076\uff6c\077\uff6c\100\uff6c\001" +
    "\002\000\072\007\uff74\014\uff74\015\uff74\016\uff74\017\uff74" +
    "\024\uff74\026\uff74\027\uff74\030\uff74\031\uff74\032\uff74\033" +
    "\uff74\036\uff74\037\uff74\040\uff74\041\uff74\042\uff74\043\uff74" +
    "\067\uff74\070\uff74\071\uff74\072\uff74\073\uff74\074\uff74\075" +
    "\uff74\076\uff74\077\uff74\100\uff74\001\002\000\112\007\uff6c" +
    "\014\uff6c\015\uff6c\016\uff6c\017\uff6c\024\uff6c\026\uff6c\027" +
    "\uff6c\030\uff6c\031\uff6c\032\uff6c\033\uff6c\036\uff6c\037\uff6c" +
    "\040\uff6c\041\uff6c\042\uff6c\043\uff6c\055\140\056\141\057" +
    "\142\060\143\061\250\062\247\063\246\064\137\067\uff6c" +
    "\070\uff6c\071\uff6c\072\uff6c\073\uff6c\074\uff6c\075\uff6c\076" +
    "\uff6c\077\uff6c\100\uff6c\001\002\000\072\007\uff75\014\uff75" +
    "\015\uff75\016\uff75\017\uff75\024\uff75\026\uff75\027\uff75\030" +
    "\uff75\031\uff75\032\uff75\033\uff75\036\uff75\037\uff75\040\uff75" +
    "\041\uff75\042\uff75\043\uff75\067\uff75\070\uff75\071\uff75\072" +
    "\uff75\073\uff75\074\uff75\075\uff75\076\uff75\077\uff75\100\uff75" +
    "\001\002\000\112\007\uff6c\014\uff6c\015\uff6c\016\uff6c\017" +
    "\uff6c\024\uff6c\026\uff6c\027\uff6c\030\uff6c\031\uff6c\032\uff6c" +
    "\033\uff6c\036\uff6c\037\uff6c\040\uff6c\041\uff6c\042\uff6c\043" +
    "\uff6c\055\140\056\141\057\142\060\143\061\250\062\247" +
    "\063\246\064\137\067\uff6c\070\uff6c\071\uff6c\072\uff6c\073" +
    "\uff6c\074\uff6c\075\uff6c\076\uff6c\077\uff6c\100\uff6c\001\002" +
    "\000\072\007\uff72\014\uff72\015\uff72\016\uff72\017\uff72\024" +
    "\uff72\026\uff72\027\uff72\030\uff72\031\uff72\032\uff72\033\uff72" +
    "\036\uff72\037\uff72\040\uff72\041\uff72\042\uff72\043\uff72\067" +
    "\uff72\070\uff72\071\uff72\072\uff72\073\uff72\074\uff72\075\uff72" +
    "\076\uff72\077\uff72\100\uff72\001\002\000\112\007\uff6c\014" +
    "\uff6c\015\uff6c\016\uff6c\017\uff6c\024\uff6c\026\uff6c\027\uff6c" +
    "\030\uff6c\031\uff6c\032\uff6c\033\uff6c\036\uff6c\037\uff6c\040" +
    "\uff6c\041\uff6c\042\uff6c\043\uff6c\055\140\056\141\057\142" +
    "\060\143\061\250\062\247\063\246\064\137\067\uff6c\070" +
    "\uff6c\071\uff6c\072\uff6c\073\uff6c\074\uff6c\075\uff6c\076\uff6c" +
    "\077\uff6c\100\uff6c\001\002\000\072\007\uff76\014\uff76\015" +
    "\uff76\016\uff76\017\uff76\024\uff76\026\uff76\027\uff76\030\uff76" +
    "\031\uff76\032\uff76\033\uff76\036\uff76\037\uff76\040\uff76\041" +
    "\uff76\042\uff76\043\uff76\067\uff76\070\uff76\071\uff76\072\uff76" +
    "\073\uff76\074\uff76\075\uff76\076\uff76\077\uff76\100\uff76\001" +
    "\002\000\112\007\uff6c\014\uff6c\015\uff6c\016\uff6c\017\uff6c" +
    "\024\uff6c\026\uff6c\027\uff6c\030\uff6c\031\uff6c\032\uff6c\033" +
    "\uff6c\036\uff6c\037\uff6c\040\uff6c\041\uff6c\042\uff6c\043\uff6c" +
    "\055\140\056\141\057\142\060\143\061\250\062\247\063" +
    "\246\064\137\067\uff6c\070\uff6c\071\uff6c\072\uff6c\073\uff6c" +
    "\074\uff6c\075\uff6c\076\uff6c\077\uff6c\100\uff6c\001\002\000" +
    "\072\007\uff73\014\uff73\015\uff73\016\uff73\017\uff73\024\uff73" +
    "\026\uff73\027\uff73\030\uff73\031\uff73\032\uff73\033\uff73\036" +
    "\uff73\037\uff73\040\uff73\041\uff73\042\uff73\043\uff73\067\uff73" +
    "\070\uff73\071\uff73\072\uff73\073\uff73\074\uff73\075\uff73\076" +
    "\uff73\077\uff73\100\uff73\001\002\000\016\071\036\072\057" +
    "\073\060\074\012\075\205\076\024\001\002\000\004\052" +
    "\270\001\002\000\016\071\036\072\057\073\060\074\012" +
    "\075\205\076\024\001\002\000\004\005\272\001\002\000" +
    "\130\007\uffa0\014\uffa0\015\uffa0\016\uffa0\017\uffa0\024\uffa0" +
    "\026\uffa0\027\uffa0\030\uffa0\031\uffa0\032\uffa0\033\uffa0\036" +
    "\uffa0\037\uffa0\040\uffa0\041\uffa0\042\uffa0\043\uffa0\044\uffa0" +
    "\045\uffa0\046\uffa0\047\uffa0\050\uffa0\051\uffa0\054\uffa0\055" +
    "\uffa0\056\uffa0\057\uffa0\060\uffa0\061\uffa0\062\uffa0\063\uffa0" +
    "\064\uffa0\067\uffa0\070\uffa0\071\uffa0\072\uffa0\073\uffa0\074" +
    "\uffa0\075\uffa0\076\uffa0\077\uffa0\100\uffa0\001\002\000\020" +
    "\014\ufffb\031\ufffb\036\ufffb\040\ufffb\042\ufffb\043\ufffb\070" +
    "\ufffb\001\002\000\004\010\275\001\002\000\016\011\302" +
    "\012\276\020\300\021\277\022\301\023\303\001\002\000" +
    "\076\007\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6\024\uffc6" +
    "\026\uffc6\027\uffc6\031\uffc6\032\uffc6\033\uffc6\036\uffc6\037" +
    "\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\051\uffc6\052\uffc6" +
    "\054\uffc6\067\uffc6\070\uffc6\071\uffc6\072\uffc6\073\uffc6\074" +
    "\uffc6\075\uffc6\076\uffc6\077\uffc6\100\uffc6\001\002\000\076" +
    "\007\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\024\uffc3\026" +
    "\uffc3\027\uffc3\031\uffc3\032\uffc3\033\uffc3\036\uffc3\037\uffc3" +
    "\040\uffc3\041\uffc3\042\uffc3\043\uffc3\051\uffc3\052\uffc3\054" +
    "\uffc3\067\uffc3\070\uffc3\071\uffc3\072\uffc3\073\uffc3\074\uffc3" +
    "\075\uffc3\076\uffc3\077\uffc3\100\uffc3\001\002\000\076\007" +
    "\uffc5\014\uffc5\015\uffc5\016\uffc5\017\uffc5\024\uffc5\026\uffc5" +
    "\027\uffc5\031\uffc5\032\uffc5\033\uffc5\036\uffc5\037\uffc5\040" +
    "\uffc5\041\uffc5\042\uffc5\043\uffc5\051\uffc5\052\uffc5\054\uffc5" +
    "\067\uffc5\070\uffc5\071\uffc5\072\uffc5\073\uffc5\074\uffc5\075" +
    "\uffc5\076\uffc5\077\uffc5\100\uffc5\001\002\000\076\007\uffc4" +
    "\014\uffc4\015\uffc4\016\uffc4\017\uffc4\024\uffc4\026\uffc4\027" +
    "\uffc4\031\uffc4\032\uffc4\033\uffc4\036\uffc4\037\uffc4\040\uffc4" +
    "\041\uffc4\042\uffc4\043\uffc4\051\uffc4\052\uffc4\054\uffc4\067" +
    "\uffc4\070\uffc4\071\uffc4\072\uffc4\073\uffc4\074\uffc4\075\uffc4" +
    "\076\uffc4\077\uffc4\100\uffc4\001\002\000\076\007\uffc7\014" +
    "\uffc7\015\uffc7\016\uffc7\017\uffc7\024\uffc7\026\uffc7\027\uffc7" +
    "\031\uffc7\032\uffc7\033\uffc7\036\uffc7\037\uffc7\040\uffc7\041" +
    "\uffc7\042\uffc7\043\uffc7\051\uffc7\052\uffc7\054\uffc7\067\uffc7" +
    "\070\uffc7\071\uffc7\072\uffc7\073\uffc7\074\uffc7\075\uffc7\076" +
    "\uffc7\077\uffc7\100\uffc7\001\002\000\076\007\uffc2\014\uffc2" +
    "\015\uffc2\016\uffc2\017\uffc2\024\uffc2\026\uffc2\027\uffc2\031" +
    "\uffc2\032\uffc2\033\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2" +
    "\042\uffc2\043\uffc2\051\uffc2\052\uffc2\054\uffc2\067\uffc2\070" +
    "\uffc2\071\uffc2\072\uffc2\073\uffc2\074\uffc2\075\uffc2\076\uffc2" +
    "\077\uffc2\100\uffc2\001\002\000\004\051\305\001\002\000" +
    "\006\071\310\072\307\001\002\000\004\034\311\001\002" +
    "\000\062\007\uff8f\015\uff8f\016\uff8f\017\uff8f\024\uff8f\026" +
    "\uff8f\027\uff8f\032\uff8f\033\uff8f\034\uff8f\035\uff8f\036\uff8f" +
    "\037\uff8f\041\uff8f\043\uff8f\067\uff8f\071\uff8f\072\uff8f\073" +
    "\uff8f\074\uff8f\075\uff8f\076\uff8f\077\uff8f\100\uff8f\001\002" +
    "\000\062\007\uff90\015\uff90\016\uff90\017\uff90\024\uff90\026" +
    "\uff90\027\uff90\032\uff90\033\uff90\034\uff90\035\uff90\036\uff90" +
    "\037\uff90\041\uff90\043\uff90\067\uff90\071\uff90\072\uff90\073" +
    "\uff90\074\uff90\075\uff90\076\uff90\077\uff90\100\uff90\001\002" +
    "\000\006\071\310\072\307\001\002\000\004\035\313\001" +
    "\002\000\006\071\310\072\307\001\002\000\056\007\uff62" +
    "\015\uff62\016\uff62\017\uff62\024\uff62\026\uff62\027\uff62\032" +
    "\uff62\033\uff62\036\uff62\037\uff62\041\uff62\043\uff62\067\uff62" +
    "\071\uff62\072\uff62\073\uff62\074\uff62\075\uff62\076\uff62\077" +
    "\uff62\100\uff62\001\002\000\056\007\011\015\031\016\023" +
    "\017\055\024\033\026\032\027\013\032\056\033\053\036" +
    "\uffd1\037\037\041\052\043\uffd1\067\070\071\036\072\057" +
    "\073\060\074\012\075\027\076\024\077\073\100\071\001" +
    "\002\000\006\036\uff51\043\320\001\002\000\004\036\322" +
    "\001\002\000\004\033\321\001\002\000\004\036\uff52\001" +
    "\002\000\070\007\uff61\014\uff61\015\uff61\016\uff61\017\uff61" +
    "\024\uff61\026\uff61\027\uff61\031\uff61\032\uff61\033\uff61\036" +
    "\uff61\037\uff61\040\uff61\041\uff61\042\uff61\043\uff61\067\uff61" +
    "\070\uff61\071\uff61\072\uff61\073\uff61\074\uff61\075\uff61\076" +
    "\uff61\077\uff61\100\uff61\001\002\000\004\075\324\001\002" +
    "\000\004\042\uff5e\001\002\000\004\042\326\001\002\000" +
    "\016\071\036\072\057\073\060\074\012\075\205\076\024" +
    "\001\002\000\056\007\uff5d\014\uff5d\015\uff5d\016\uff5d\017" +
    "\uff5d\024\uff5d\026\uff5d\027\uff5d\032\uff5d\033\uff5d\037\uff5d" +
    "\041\uff5d\042\uff5d\067\uff5d\071\uff5d\072\uff5d\073\uff5d\074" +
    "\uff5d\075\uff5d\076\uff5d\077\uff5d\100\uff5d\001\002\000\056" +
    "\007\011\014\uffd1\015\031\016\023\017\055\024\033\026" +
    "\032\027\013\032\056\033\053\037\037\041\052\042\uffd1" +
    "\067\070\071\036\072\057\073\060\074\012\075\027\076" +
    "\024\077\073\100\071\001\002\000\006\014\uff5c\042\uff5c" +
    "\001\002\000\006\014\uff55\042\333\001\002\000\020\031" +
    "\340\071\036\072\057\073\060\074\012\075\205\076\024" +
    "\001\002\000\004\014\335\001\002\000\004\041\336\001" +
    "\002\000\070\007\uff5b\014\uff5b\015\uff5b\016\uff5b\017\uff5b" +
    "\024\uff5b\026\uff5b\027\uff5b\031\uff5b\032\uff5b\033\uff5b\036" +
    "\uff5b\037\uff5b\040\uff5b\041\uff5b\042\uff5b\043\uff5b\067\uff5b" +
    "\070\uff5b\071\uff5b\072\uff5b\073\uff5b\074\uff5b\075\uff5b\076" +
    "\uff5b\077\uff5b\100\uff5b\001\002\000\056\007\uff5a\014\uff5a" +
    "\015\uff5a\016\uff5a\017\uff5a\024\uff5a\026\uff5a\027\uff5a\032" +
    "\uff5a\033\uff5a\037\uff5a\041\uff5a\042\uff5a\067\uff5a\071\uff5a" +
    "\072\uff5a\073\uff5a\074\uff5a\075\uff5a\076\uff5a\077\uff5a\100" +
    "\uff5a\001\002\000\054\007\uff57\014\uff57\015\uff57\016\uff57" +
    "\017\uff57\024\uff57\026\uff57\027\uff57\032\uff57\033\uff57\037" +
    "\uff57\041\uff57\067\uff57\071\uff57\072\uff57\073\uff57\074\uff57" +
    "\075\uff57\076\uff57\077\uff57\100\uff57\001\002\000\054\007" +
    "\011\014\uffd1\015\031\016\023\017\055\024\033\026\032" +
    "\027\013\032\056\033\053\037\037\041\052\067\070\071" +
    "\036\072\057\073\060\074\012\075\027\076\024\077\073" +
    "\100\071\001\002\000\004\014\uff56\001\002\000\056\007" +
    "\011\014\uffd1\015\031\016\023\017\055\024\033\026\032" +
    "\027\013\032\056\033\053\037\037\041\052\042\uffd1\067" +
    "\070\071\036\072\057\073\060\074\012\075\027\076\024" +
    "\077\073\100\071\001\002\000\006\014\uff59\042\uff59\001" +
    "\002\000\006\014\uff55\042\333\001\002\000\004\014\uff58" +
    "\001\002\000\020\014\ufff9\031\ufff9\036\ufff9\040\ufff9\042" +
    "\ufff9\043\ufff9\070\ufff9\001\002\000\010\004\u0108\010\u0107" +
    "\052\u0109\001\002\000\004\075\377\001\002\000\004\075" +
    "\356\001\002\000\004\010\354\001\002\000\016\011\302" +
    "\012\276\020\300\021\277\022\301\023\303\001\002\000" +
    "\070\007\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\024\uffcb" +
    "\026\uffcb\027\uffcb\031\uffcb\032\uffcb\033\uffcb\036\uffcb\037" +
    "\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\067\uffcb\070\uffcb" +
    "\071\uffcb\072\uffcb\073\uffcb\074\uffcb\075\uffcb\076\uffcb\077" +
    "\uffcb\100\uffcb\001\002\000\004\053\357\001\002\000\006" +
    "\054\uff7d\065\360\001\002\000\004\075\374\001\002\000" +
    "\006\052\372\054\uff7f\001\002\000\004\054\363\001\002" +
    "\000\004\010\364\001\002\000\016\011\302\012\276\020" +
    "\300\021\277\022\301\023\303\001\002\000\054\007\uff7b" +
    "\014\uff7b\015\uff7b\016\uff7b\017\uff7b\024\uff7b\026\uff7b\027" +
    "\uff7b\032\uff7b\033\uff7b\037\uff7b\041\uff7b\067\uff7b\071\uff7b" +
    "\072\uff7b\073\uff7b\074\uff7b\075\uff7b\076\uff7b\077\uff7b\100" +
    "\uff7b\001\002\000\054\007\011\014\uffd1\015\031\016\023" +
    "\017\055\024\033\026\032\027\013\032\056\033\053\037" +
    "\037\041\052\067\070\071\036\072\057\073\060\074\012" +
    "\075\027\076\024\077\073\100\071\001\002\000\004\014" +
    "\370\001\002\000\004\066\371\001\002\000\070\007\uff7a" +
    "\014\uff7a\015\uff7a\016\uff7a\017\uff7a\024\uff7a\026\uff7a\027" +
    "\uff7a\031\uff7a\032\uff7a\033\uff7a\036\uff7a\037\uff7a\040\uff7a" +
    "\041\uff7a\042\uff7a\043\uff7a\067\uff7a\070\uff7a\071\uff7a\072" +
    "\uff7a\073\uff7a\074\uff7a\075\uff7a\076\uff7a\077\uff7a\100\uff7a" +
    "\001\002\000\006\054\uff7d\065\360\001\002\000\004\054" +
    "\uff7e\001\002\000\004\010\375\001\002\000\016\011\302" +
    "\012\276\020\300\021\277\022\301\023\303\001\002\000" +
    "\006\052\uff7c\054\uff7c\001\002\000\004\053\u0100\001\002" +
    "\000\006\054\uff7d\065\360\001\002\000\004\054\u0102\001" +
    "\002\000\054\007\uff81\014\uff81\015\uff81\016\uff81\017\uff81" +
    "\024\uff81\026\uff81\027\uff81\032\uff81\033\uff81\037\uff81\041" +
    "\uff81\067\uff81\071\uff81\072\uff81\073\uff81\074\uff81\075\uff81" +
    "\076\uff81\077\uff81\100\uff81\001\002\000\054\007\011\014" +
    "\uffd1\015\031\016\023\017\055\024\033\026\032\027\013" +
    "\032\056\033\053\037\037\041\052\067\070\071\036\072" +
    "\057\073\060\074\012\075\027\076\024\077\073\100\071" +
    "\001\002\000\004\014\u0105\001\002\000\004\026\u0106\001" +
    "\002\000\070\007\uff80\014\uff80\015\uff80\016\uff80\017\uff80" +
    "\024\uff80\026\uff80\027\uff80\031\uff80\032\uff80\033\uff80\036" +
    "\uff80\037\uff80\040\uff80\041\uff80\042\uff80\043\uff80\067\uff80" +
    "\070\uff80\071\uff80\072\uff80\073\uff80\074\uff80\075\uff80\076" +
    "\uff80\077\uff80\100\uff80\001\002\000\016\011\302\012\276" +
    "\020\300\021\277\022\301\023\303\001\002\000\004\075" +
    "\230\001\002\000\004\075\u010a\001\002\000\006\010\uffbd" +
    "\052\u0109\001\002\000\004\010\uffbc\001\002\000\004\005" +
    "\u010d\001\002\000\004\010\u010e\001\002\000\016\011\302" +
    "\012\276\020\300\021\277\022\301\023\303\001\002\000" +
    "\070\007\uff87\014\uff87\015\uff87\016\uff87\017\uff87\024\uff87" +
    "\026\uff87\027\uff87\031\uff87\032\uff87\033\uff87\036\uff87\037" +
    "\uff87\040\uff87\041\uff87\042\uff87\043\uff87\067\uff87\070\uff87" +
    "\071\uff87\072\uff87\073\uff87\074\uff87\075\uff87\076\uff87\077" +
    "\uff87\100\uff87\001\002\000\072\007\uffc9\014\uffc9\015\uffc9" +
    "\016\uffc9\017\uffc9\024\uffc9\026\uffc9\027\uffc9\031\uffc9\032" +
    "\uffc9\033\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9" +
    "\043\uffc9\051\u0111\067\uffc9\070\uffc9\071\uffc9\072\uffc9\073" +
    "\uffc9\074\uffc9\075\uffc9\076\uffc9\077\uffc9\100\uffc9\001\002" +
    "\000\020\025\u0112\071\036\072\057\073\060\074\012\075" +
    "\062\076\024\001\002\000\070\007\uff8c\014\uff8c\015\uff8c" +
    "\016\uff8c\017\uff8c\024\uff8c\026\uff8c\027\uff8c\031\uff8c\032" +
    "\uff8c\033\uff8c\036\uff8c\037\uff8c\040\uff8c\041\uff8c\042\uff8c" +
    "\043\uff8c\067\uff8c\070\uff8c\071\uff8c\072\uff8c\073\uff8c\074" +
    "\uff8c\075\uff8c\076\uff8c\077\uff8c\100\uff8c\001\002\000\102" +
    "\007\uff8e\014\uff8e\015\uff8e\016\uff8e\017\uff8e\024\uff8e\026" +
    "\uff8e\027\uff8e\031\uff8e\032\uff8e\033\uff8e\036\uff8e\037\uff8e" +
    "\040\uff8e\041\uff8e\042\uff8e\043\uff8e\055\140\056\141\057" +
    "\142\060\143\064\137\067\uff8e\070\uff8e\071\uff8e\072\uff8e" +
    "\073\uff8e\074\uff8e\075\uff8e\076\uff8e\077\uff8e\100\uff8e\001" +
    "\002\000\004\013\u0115\001\002\000\004\002\uffff\001\002" +
    "\000\020\014\ufff6\031\ufff6\036\ufff6\040\ufff6\042\ufff6\043" +
    "\ufff6\070\ufff6\001\002\000\020\014\ufffe\031\ufffe\036\ufffe" +
    "\040\ufffe\042\ufffe\043\ufffe\070\ufffe\001\002\000\020\014" +
    "\ufffd\031\ufffd\036\ufffd\040\ufffd\042\ufffd\043\ufffd\070\ufffd" +
    "\001\002\000\020\014\ufff4\031\ufff4\036\ufff4\040\ufff4\042" +
    "\ufff4\043\ufff4\070\ufff4\001\002\000\054\007\011\015\031" +
    "\016\023\017\055\024\033\026\032\027\013\032\056\033" +
    "\053\037\037\040\uffd1\041\052\067\070\071\036\072\057" +
    "\073\060\074\012\075\027\076\024\077\073\100\071\001" +
    "\002\000\004\040\u011c\001\002\000\016\071\036\072\057" +
    "\073\060\074\012\075\062\076\024\001\002\000\070\007" +
    "\uff5f\014\uff5f\015\uff5f\016\uff5f\017\uff5f\024\uff5f\026\uff5f" +
    "\027\uff5f\031\uff5f\032\uff5f\033\uff5f\036\uff5f\037\uff5f\040" +
    "\uff5f\041\uff5f\042\uff5f\043\uff5f\067\uff5f\070\uff5f\071\uff5f" +
    "\072\uff5f\073\uff5f\074\uff5f\075\uff5f\076\uff5f\077\uff5f\100" +
    "\uff5f\001\002\000\020\014\ufff8\031\ufff8\036\ufff8\040\ufff8" +
    "\042\ufff8\043\ufff8\070\ufff8\001\002\000\016\011\302\012" +
    "\276\020\300\021\277\022\301\023\303\001\002\000\070" +
    "\007\uffca\014\uffca\015\uffca\016\uffca\017\uffca\024\uffca\026" +
    "\uffca\027\uffca\031\uffca\032\uffca\033\uffca\036\uffca\037\uffca" +
    "\040\uffca\041\uffca\042\uffca\043\uffca\067\uffca\070\uffca\071" +
    "\uffca\072\uffca\073\uffca\074\uffca\075\uffca\076\uffca\077\uffca" +
    "\100\uffca\001\002\000\016\071\036\072\057\073\060\074" +
    "\012\075\062\076\024\001\002\000\016\054\u0123\055\140" +
    "\056\141\057\142\060\143\064\137\001\002\000\070\007" +
    "\uff82\014\uff82\015\uff82\016\uff82\017\uff82\024\uff82\026\uff82" +
    "\027\uff82\031\uff82\032\uff82\033\uff82\036\uff82\037\uff82\040" +
    "\uff82\041\uff82\042\uff82\043\uff82\067\uff82\070\uff82\071\uff82" +
    "\072\uff82\073\uff82\074\uff82\075\uff82\076\uff82\077\uff82\100" +
    "\uff82\001\002\000\004\053\u0125\001\002\000\004\054\u0126" +
    "\001\002\000\052\007\uff8a\014\uff8a\015\uff8a\016\uff8a\017" +
    "\uff8a\024\uff8a\026\uff8a\027\uff8a\032\uff8a\033\uff8a\037\uff8a" +
    "\041\uff8a\071\uff8a\072\uff8a\073\uff8a\074\uff8a\075\uff8a\076" +
    "\uff8a\077\uff8a\100\uff8a\001\002\000\052\007\011\014\uffe1" +
    "\015\031\016\023\017\055\024\033\026\032\027\013\032" +
    "\056\033\053\037\037\041\052\071\036\072\057\073\060" +
    "\074\012\075\027\076\024\077\u012a\100\u0129\001\002\000" +
    "\052\007\011\014\uffe1\015\031\016\023\017\055\024\033" +
    "\026\032\027\013\032\056\033\053\037\037\041\052\071" +
    "\036\072\057\073\060\074\012\075\027\076\024\077\u012a" +
    "\100\u0129\001\002\000\052\007\011\014\uffe1\015\031\016" +
    "\023\017\055\024\033\026\032\027\013\032\056\033\053" +
    "\037\037\041\052\071\036\072\057\073\060\074\012\075" +
    "\027\076\024\077\u012a\100\u0129\001\002\000\052\007\011" +
    "\014\uffe1\015\031\016\023\017\055\024\033\026\032\027" +
    "\013\032\056\033\053\037\037\041\052\071\036\072\057" +
    "\073\060\074\012\075\027\076\024\077\u012a\100\u0129\001" +
    "\002\000\004\014\u0143\001\002\000\052\007\011\014\uffe1" +
    "\015\031\016\023\017\055\024\033\026\032\027\013\032" +
    "\056\033\053\037\037\041\052\071\036\072\057\073\060" +
    "\074\012\075\027\076\024\077\u012a\100\u0129\001\002\000" +
    "\052\007\011\014\uffe1\015\031\016\023\017\055\024\033" +
    "\026\032\027\013\032\056\033\053\037\037\041\052\071" +
    "\036\072\057\073\060\074\012\075\027\076\024\077\u012a" +
    "\100\u0129\001\002\000\052\007\011\014\uffe1\015\031\016" +
    "\023\017\055\024\033\026\032\027\013\032\056\033\053" +
    "\037\037\041\052\071\036\072\057\073\060\074\012\075" +
    "\027\076\024\077\u012a\100\u0129\001\002\000\052\007\011" +
    "\014\uffe1\015\031\016\023\017\055\024\033\026\032\027" +
    "\013\032\056\033\053\037\037\041\052\071\036\072\057" +
    "\073\060\074\012\075\027\076\024\077\u012a\100\u0129\001" +
    "\002\000\052\007\011\014\uffe1\015\031\016\023\017\055" +
    "\024\033\026\032\027\013\032\056\033\053\037\037\041" +
    "\052\071\036\072\057\073\060\074\012\075\027\076\024" +
    "\077\u012a\100\u0129\001\002\000\052\007\011\014\uffe1\015" +
    "\031\016\023\017\055\024\033\026\032\027\013\032\056" +
    "\033\053\037\037\041\052\071\036\072\057\073\060\074" +
    "\012\075\027\076\024\077\u012a\100\u0129\001\002\000\004" +
    "\014\uff88\001\002\000\052\007\011\014\uffe1\015\031\016" +
    "\023\017\055\024\033\026\032\027\013\032\056\033\053" +
    "\037\037\041\052\071\036\072\057\073\060\074\012\075" +
    "\027\076\024\077\u012a\100\u0129\001\002\000\052\007\011" +
    "\014\uffe1\015\031\016\023\017\055\024\033\026\032\027" +
    "\013\032\056\033\053\037\037\041\052\071\036\072\057" +
    "\073\060\074\012\075\027\076\024\077\u012a\100\u0129\001" +
    "\002\000\052\007\011\014\uffe1\015\031\016\023\017\055" +
    "\024\033\026\032\027\013\032\056\033\053\037\037\041" +
    "\052\071\036\072\057\073\060\074\012\075\027\076\024" +
    "\077\u012a\100\u0129\001\002\000\052\007\011\014\uffe1\015" +
    "\031\016\023\017\055\024\033\026\032\027\013\032\056" +
    "\033\053\037\037\041\052\071\036\072\057\073\060\074" +
    "\012\075\027\076\024\077\u012a\100\u0129\001\002\000\052" +
    "\007\011\014\uffe1\015\031\016\023\017\055\024\033\026" +
    "\032\027\013\032\056\033\053\037\037\041\052\071\036" +
    "\072\057\073\060\074\012\075\027\076\024\077\u012a\100" +
    "\u0129\001\002\000\004\014\uffe9\001\002\000\004\014\uffec" +
    "\001\002\000\004\014\uffe8\001\002\000\004\014\uffef\001" +
    "\002\000\004\014\uffee\001\002\000\004\014\uffe5\001\002" +
    "\000\004\014\uffeb\001\002\000\004\014\uffed\001\002\000" +
    "\004\014\uffea\001\002\000\004\014\uffe2\001\002\000\004" +
    "\014\uffe7\001\002\000\004\026\u0144\001\002\000\070\007" +
    "\uff89\014\uff89\015\uff89\016\uff89\017\uff89\024\uff89\026\uff89" +
    "\027\uff89\031\uff89\032\uff89\033\uff89\036\uff89\037\uff89\040" +
    "\uff89\041\uff89\042\uff89\043\uff89\067\uff89\070\uff89\071\uff89" +
    "\072\uff89\073\uff89\074\uff89\075\uff89\076\uff89\077\uff89\100" +
    "\uff89\001\002\000\004\014\uffe4\001\002\000\004\014\uffe3" +
    "\001\002\000\004\014\uffe6\001\002\000\020\014\ufffa\031" +
    "\ufffa\036\ufffa\040\ufffa\042\ufffa\043\ufffa\070\ufffa\001\002" +
    "\000\016\011\302\012\276\020\300\021\277\022\301\023" +
    "\303\001\002\000\016\071\036\072\057\073\060\074\012" +
    "\075\062\076\024\001\002\000\004\075\230\001\002\000" +
    "\004\005\u014d\001\002\000\006\010\u014e\051\u014f\001\002" +
    "\000\016\011\302\012\276\020\300\021\277\022\301\023" +
    "\303\001\002\000\016\071\036\072\057\073\060\074\012" +
    "\075\062\076\024\001\002\000\102\007\uff83\014\uff83\015" +
    "\uff83\016\uff83\017\uff83\024\uff83\026\uff83\027\uff83\031\uff83" +
    "\032\uff83\033\uff83\036\uff83\037\uff83\040\uff83\041\uff83\042" +
    "\uff83\043\uff83\055\140\056\141\057\142\060\143\064\137" +
    "\067\uff83\070\uff83\071\uff83\072\uff83\073\uff83\074\uff83\075" +
    "\uff83\076\uff83\077\uff83\100\uff83\001\002\000\070\007\uff86" +
    "\014\uff86\015\uff86\016\uff86\017\uff86\024\uff86\026\uff86\027" +
    "\uff86\031\uff86\032\uff86\033\uff86\036\uff86\037\uff86\040\uff86" +
    "\041\uff86\042\uff86\043\uff86\067\uff86\070\uff86\071\uff86\072" +
    "\uff86\073\uff86\074\uff86\075\uff86\076\uff86\077\uff86\100\uff86" +
    "\001\002\000\102\007\uffbb\014\uffbb\015\uffbb\016\uffbb\017" +
    "\uffbb\024\uffbb\026\uffbb\027\uffbb\031\uffbb\032\uffbb\033\uffbb" +
    "\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\055" +
    "\140\056\141\057\142\060\143\064\137\067\uffbb\070\uffbb" +
    "\071\uffbb\072\uffbb\073\uffbb\074\uffbb\075\uffbb\076\uffbb\077" +
    "\uffbb\100\uffbb\001\002\000\072\007\uffc8\014\uffc8\015\uffc8" +
    "\016\uffc8\017\uffc8\024\uffc8\026\uffc8\027\uffc8\031\uffc8\032" +
    "\uffc8\033\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8" +
    "\043\uffc8\051\u0154\067\uffc8\070\uffc8\071\uffc8\072\uffc8\073" +
    "\uffc8\074\uffc8\075\uffc8\076\uffc8\077\uffc8\100\uffc8\001\002" +
    "\000\020\025\u0155\071\036\072\057\073\060\074\012\075" +
    "\062\076\024\001\002\000\070\007\uff8b\014\uff8b\015\uff8b" +
    "\016\uff8b\017\uff8b\024\uff8b\026\uff8b\027\uff8b\031\uff8b\032" +
    "\uff8b\033\uff8b\036\uff8b\037\uff8b\040\uff8b\041\uff8b\042\uff8b" +
    "\043\uff8b\067\uff8b\070\uff8b\071\uff8b\072\uff8b\073\uff8b\074" +
    "\uff8b\075\uff8b\076\uff8b\077\uff8b\100\uff8b\001\002\000\102" +
    "\007\uff8d\014\uff8d\015\uff8d\016\uff8d\017\uff8d\024\uff8d\026" +
    "\uff8d\027\uff8d\031\uff8d\032\uff8d\033\uff8d\036\uff8d\037\uff8d" +
    "\040\uff8d\041\uff8d\042\uff8d\043\uff8d\055\140\056\141\057" +
    "\142\060\143\064\137\067\uff8d\070\uff8d\071\uff8d\072\uff8d" +
    "\073\uff8d\074\uff8d\075\uff8d\076\uff8d\077\uff8d\100\uff8d\001" +
    "\002\000\020\014\ufffc\031\ufffc\036\ufffc\040\ufffc\042\ufffc" +
    "\043\ufffc\070\ufffc\001\002\000\020\014\ufff1\031\ufff1\036" +
    "\ufff1\040\ufff1\042\ufff1\043\ufff1\070\ufff1\001\002\000\020" +
    "\014\ufff7\031\ufff7\036\ufff7\040\ufff7\042\ufff7\043\ufff7\070" +
    "\ufff7\001\002\000\020\014\ufff3\031\ufff3\036\ufff3\040\ufff3" +
    "\042\ufff3\043\ufff3\070\ufff3\001\002\000\020\014\ufff2\031" +
    "\ufff2\036\ufff2\040\ufff2\042\ufff2\043\ufff2\070\ufff2\001\002" +
    "\000\020\014\ufff5\031\ufff5\036\ufff5\040\ufff5\042\ufff5\043" +
    "\ufff5\070\ufff5\001\002\000\004\030\u015e\001\002\000\060" +
    "\007\uff79\014\uff79\015\uff79\016\uff79\017\uff79\024\uff79\026" +
    "\uff79\027\uff79\031\uff79\032\uff79\033\uff79\037\uff79\041\uff79" +
    "\067\uff79\070\uff79\071\uff79\072\uff79\073\uff79\074\uff79\075" +
    "\uff79\076\uff79\077\uff79\100\uff79\001\002\000\060\007\011" +
    "\014\uffd1\015\031\016\023\017\055\024\033\026\032\027" +
    "\013\031\uffd1\032\056\033\053\037\037\041\052\067\070" +
    "\070\uffd1\071\036\072\057\073\060\074\012\075\027\076" +
    "\024\077\073\100\071\001\002\000\010\014\uff78\031\uff78" +
    "\070\uff78\001\002\000\010\014\uff65\031\uff65\070\u0163\001" +
    "\002\000\006\014\uff69\031\u016a\001\002\000\016\071\036" +
    "\072\057\073\060\074\012\075\062\076\024\001\002\000" +
    "\004\030\u0165\001\002\000\060\007\uff68\014\uff68\015\uff68" +
    "\016\uff68\017\uff68\024\uff68\026\uff68\027\uff68\031\uff68\032" +
    "\uff68\033\uff68\037\uff68\041\uff68\067\uff68\070\uff68\071\uff68" +
    "\072\uff68\073\uff68\074\uff68\075\uff68\076\uff68\077\uff68\100" +
    "\uff68\001\002\000\060\007\011\014\uffd1\015\031\016\023" +
    "\017\055\024\033\026\032\027\013\031\uffd1\032\056\033" +
    "\053\037\037\041\052\067\070\070\uffd1\071\036\072\057" +
    "\073\060\074\012\075\027\076\024\077\073\100\071\001" +
    "\002\000\010\014\uff67\031\uff67\070\uff67\001\002\000\010" +
    "\014\uff65\031\uff65\070\u0163\001\002\000\006\014\uff66\031" +
    "\uff66\001\002\000\054\007\uff6b\014\uff6b\015\uff6b\016\uff6b" +
    "\017\uff6b\024\uff6b\026\uff6b\027\uff6b\032\uff6b\033\uff6b\037" +
    "\uff6b\041\uff6b\067\uff6b\071\uff6b\072\uff6b\073\uff6b\074\uff6b" +
    "\075\uff6b\076\uff6b\077\uff6b\100\uff6b\001\002\000\004\014" +
    "\u016c\001\002\000\004\027\u016d\001\002\000\070\007\uff77" +
    "\014\uff77\015\uff77\016\uff77\017\uff77\024\uff77\026\uff77\027" +
    "\uff77\031\uff77\032\uff77\033\uff77\036\uff77\037\uff77\040\uff77" +
    "\041\uff77\042\uff77\043\uff77\067\uff77\070\uff77\071\uff77\072" +
    "\uff77\073\uff77\074\uff77\075\uff77\076\uff77\077\uff77\100\uff77" +
    "\001\002\000\054\007\011\014\uffd1\015\031\016\023\017" +
    "\055\024\033\026\032\027\013\032\056\033\053\037\037" +
    "\041\052\067\070\071\036\072\057\073\060\074\012\075" +
    "\027\076\024\077\073\100\071\001\002\000\004\014\uff6a" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u016d\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\053\007\001\001" +
    "\000\054\003\046\005\042\006\041\007\025\012\047\014" +
    "\033\015\045\016\021\021\027\023\034\024\043\026\053" +
    "\030\015\031\044\035\014\036\020\037\040\041\013\042" +
    "\037\046\024\050\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\010\064\015\060\032\u015c\046\063\052" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\054" +
    "\003\u015b\005\042\006\041\007\025\012\047\014\033\015" +
    "\045\016\021\021\027\023\034\024\043\026\053\030\015" +
    "\031\044\035\014\036\020\037\040\041\013\042\037\046" +
    "\024\050\050\001\001\000\054\003\u015a\005\042\006\041" +
    "\007\025\012\047\014\033\015\045\016\021\021\027\023" +
    "\034\024\043\026\053\030\015\031\044\035\014\036\020" +
    "\037\040\041\013\042\037\046\024\050\050\001\001\000" +
    "\054\003\u0159\005\042\006\041\007\025\012\047\014\033" +
    "\015\045\016\021\021\027\023\034\024\043\026\053\030" +
    "\015\031\044\035\014\036\020\037\040\041\013\042\037" +
    "\046\024\050\050\001\001\000\002\001\001\000\054\003" +
    "\u0158\005\042\006\041\007\025\012\047\014\033\015\045" +
    "\016\021\021\027\023\034\024\043\026\053\030\015\031" +
    "\044\035\014\036\020\037\040\041\013\042\037\046\024" +
    "\050\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\003\u0157\005\042\006\041\007\025\012\047\014\033" +
    "\015\045\016\021\021\027\023\034\024\043\026\053\030" +
    "\015\031\044\035\014\036\020\037\040\041\013\042\037" +
    "\046\024\050\050\001\001\000\054\003\u0156\005\042\006" +
    "\041\007\025\012\047\014\033\015\045\016\021\021\027" +
    "\023\034\024\043\026\053\030\015\031\044\035\014\036" +
    "\020\037\040\041\013\042\037\046\024\050\050\001\001" +
    "\000\002\001\001\000\054\003\u0147\005\042\006\041\007" +
    "\025\012\047\014\033\015\045\016\021\021\027\023\034" +
    "\024\043\026\053\030\015\031\044\035\014\036\020\037" +
    "\040\041\013\042\037\046\024\050\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\054\003\u011d\005\042\006\041\007\025\012\047" +
    "\014\033\015\045\016\021\021\027\023\034\024\043\026" +
    "\053\030\015\031\044\035\014\036\020\037\040\041\013" +
    "\042\037\046\024\050\050\001\001\000\002\001\001\000" +
    "\004\066\u0119\001\001\000\002\001\001\000\054\003\u0118" +
    "\005\042\006\041\007\025\012\047\014\033\015\045\016" +
    "\021\021\027\023\034\024\043\026\053\030\015\031\044" +
    "\035\014\036\020\037\040\041\013\042\037\046\024\050" +
    "\050\001\001\000\054\003\u0117\005\042\006\041\007\025" +
    "\012\047\014\033\015\045\016\021\021\027\023\034\024" +
    "\043\026\053\030\015\031\044\035\014\036\020\037\040" +
    "\041\013\042\037\046\024\050\050\001\001\000\054\003" +
    "\u0116\005\042\006\041\007\025\012\047\014\033\015\045" +
    "\016\021\021\027\023\034\024\043\026\053\030\015\031" +
    "\044\035\014\036\020\037\040\041\013\042\037\046\024" +
    "\050\050\001\001\000\054\003\u0115\005\042\006\041\007" +
    "\025\012\047\014\033\015\045\016\021\021\027\023\034" +
    "\024\043\026\053\030\015\031\044\035\014\036\020\037" +
    "\040\041\013\042\037\046\024\050\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\352\001\001\000\054\003\346\005\042\006\041\007\025" +
    "\012\047\014\033\015\045\016\021\021\027\023\034\024" +
    "\043\026\053\030\015\031\044\035\014\036\020\037\040" +
    "\041\013\042\037\046\024\050\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\054\003\272\005\042\006\041" +
    "\007\025\012\047\014\033\015\045\016\021\021\027\023" +
    "\034\024\043\026\053\030\015\031\044\035\014\036\020" +
    "\037\040\041\013\042\037\046\024\050\050\001\001\000" +
    "\002\001\001\000\014\010\064\015\060\032\065\046\063" +
    "\052\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\064\066\001\001\000" +
    "\056\005\104\006\103\007\075\012\047\014\033\015\045" +
    "\016\073\021\076\023\100\024\105\025\101\026\107\030" +
    "\071\031\044\035\014\036\020\037\102\041\013\042\037" +
    "\046\074\050\106\051\077\001\001\000\012\010\135\015" +
    "\134\046\063\052\062\001\001\000\056\005\104\006\103" +
    "\007\075\012\047\014\033\015\045\016\073\021\076\023" +
    "\100\024\105\025\133\026\107\030\071\031\044\035\014" +
    "\036\020\037\102\041\013\042\037\046\074\050\106\051" +
    "\077\001\001\000\056\005\104\006\103\007\075\012\047" +
    "\014\033\015\045\016\073\021\076\023\100\024\105\025" +
    "\132\026\107\030\071\031\044\035\014\036\020\037\102" +
    "\041\013\042\037\046\074\050\106\051\077\001\001\000" +
    "\056\005\104\006\103\007\075\012\047\014\033\015\045" +
    "\016\073\021\076\023\100\024\105\025\131\026\107\030" +
    "\071\031\044\035\014\036\020\037\102\041\013\042\037" +
    "\046\074\050\106\051\077\001\001\000\056\005\104\006" +
    "\103\007\075\012\047\014\033\015\045\016\073\021\076" +
    "\023\100\024\105\025\130\026\107\030\071\031\044\035" +
    "\014\036\020\037\102\041\013\042\037\046\074\050\106" +
    "\051\077\001\001\000\054\003\127\005\042\006\041\007" +
    "\025\012\047\014\033\015\045\016\021\021\027\023\034" +
    "\024\043\026\053\030\015\031\044\035\014\036\020\037" +
    "\040\041\013\042\037\046\024\050\050\001\001\000\056" +
    "\005\104\006\103\007\075\012\047\014\033\015\045\016" +
    "\073\021\076\023\100\024\105\025\126\026\107\030\071" +
    "\031\044\035\014\036\020\037\102\041\013\042\037\046" +
    "\074\050\106\051\077\001\001\000\056\005\104\006\103" +
    "\007\075\012\047\014\033\015\045\016\073\021\076\023" +
    "\100\024\105\025\125\026\107\030\071\031\044\035\014" +
    "\036\020\037\102\041\013\042\037\046\074\050\106\051" +
    "\077\001\001\000\056\005\104\006\103\007\075\012\047" +
    "\014\033\015\045\016\073\021\076\023\100\024\105\025" +
    "\124\026\107\030\071\031\044\035\014\036\020\037\102" +
    "\041\013\042\037\046\074\050\106\051\077\001\001\000" +
    "\056\005\104\006\103\007\075\012\047\014\033\015\045" +
    "\016\073\021\076\023\100\024\105\025\123\026\107\030" +
    "\071\031\044\035\014\036\020\037\102\041\013\042\037" +
    "\046\074\050\106\051\077\001\001\000\004\044\117\001" +
    "\001\000\056\005\104\006\103\007\075\012\047\014\033" +
    "\015\045\016\073\021\076\023\100\024\105\025\115\026" +
    "\107\030\071\031\044\035\014\036\020\037\102\041\013" +
    "\042\037\046\074\050\106\051\077\001\001\000\056\005" +
    "\104\006\103\007\075\012\047\014\033\015\045\016\073" +
    "\021\076\023\100\024\105\025\114\026\107\030\071\031" +
    "\044\035\014\036\020\037\102\041\013\042\037\046\074" +
    "\050\106\051\077\001\001\000\056\005\104\006\103\007" +
    "\075\012\047\014\033\015\045\016\073\021\076\023\100" +
    "\024\105\025\113\026\107\030\071\031\044\035\014\036" +
    "\020\037\102\041\013\042\037\046\074\050\106\051\077" +
    "\001\001\000\056\005\104\006\103\007\075\012\047\014" +
    "\033\015\045\016\073\021\076\023\100\024\105\025\112" +
    "\026\107\030\071\031\044\035\014\036\020\037\102\041" +
    "\013\042\037\046\074\050\106\051\077\001\001\000\056" +
    "\005\104\006\103\007\075\012\047\014\033\015\045\016" +
    "\073\021\076\023\100\024\105\025\111\026\107\030\071" +
    "\031\044\035\014\036\020\037\102\041\013\042\037\046" +
    "\074\050\106\051\077\001\001\000\056\005\104\006\103" +
    "\007\075\012\047\014\033\015\045\016\073\021\076\023" +
    "\100\024\105\025\110\026\107\030\071\031\044\035\014" +
    "\036\020\037\102\041\013\042\037\046\074\050\106\051" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\015\203\046\206\052\205\001\001\000\012\010" +
    "\202\015\134\046\201\052\200\001\001\000\012\010\177" +
    "\015\134\046\176\052\175\001\001\000\012\010\174\015" +
    "\134\046\173\052\172\001\001\000\012\010\145\015\134" +
    "\046\144\052\143\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\010\157\015\134\046\063" +
    "\052\062\001\001\000\012\010\156\015\134\046\063\052" +
    "\062\001\001\000\012\010\155\015\134\046\063\052\062" +
    "\001\001\000\012\010\154\015\134\046\063\052\062\001" +
    "\001\000\012\010\153\015\134\046\063\052\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\010\171\015\134" +
    "\046\063\052\062\001\001\000\012\010\170\015\134\046" +
    "\063\052\062\001\001\000\012\010\167\015\134\046\063" +
    "\052\062\001\001\000\012\010\166\015\134\046\063\052" +
    "\062\001\001\000\012\010\165\015\134\046\063\052\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\226" +
    "\001\001\000\006\015\212\047\211\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\212\047\224\001\001" +
    "\000\006\015\212\047\223\001\001\000\006\015\212\047" +
    "\222\001\001\000\006\015\212\047\221\001\001\000\006" +
    "\015\212\047\220\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\231\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\010\234\015\134\046\063\052\062\001\001\000" +
    "\002\001\001\000\012\010\263\015\134\046\063\052\062" +
    "\001\001\000\012\010\261\015\134\046\063\052\062\001" +
    "\001\000\012\010\257\015\134\046\063\052\062\001\001" +
    "\000\012\010\255\015\134\046\063\052\062\001\001\000" +
    "\012\010\253\015\134\046\063\052\062\001\001\000\012" +
    "\010\243\015\134\046\063\052\062\001\001\000\004\013" +
    "\244\001\001\000\002\001\001\000\014\010\064\015\060" +
    "\032\252\046\063\052\062\001\001\000\014\010\064\015" +
    "\060\032\251\046\063\052\062\001\001\000\014\010\064" +
    "\015\060\032\250\046\063\052\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\254" +
    "\001\001\000\002\001\001\000\004\013\256\001\001\000" +
    "\002\001\001\000\004\013\260\001\001\000\002\001\001" +
    "\000\004\013\262\001\001\000\002\001\001\000\004\013" +
    "\264\001\001\000\002\001\001\000\004\015\266\001\001" +
    "\000\002\001\001\000\004\015\270\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\303\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\040\305\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\040\311\001\001\000\002\001\001\000\004\040" +
    "\313\001\001\000\004\065\314\001\001\000\056\005\104" +
    "\006\103\007\075\012\047\014\033\015\045\016\073\021" +
    "\076\023\100\024\105\025\315\026\107\030\071\031\044" +
    "\035\014\036\020\037\102\041\013\042\037\046\074\050" +
    "\106\051\077\001\001\000\004\045\316\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\067\324\001\001\000\002" +
    "\001\001\000\004\015\326\001\001\000\004\070\327\001" +
    "\001\000\056\005\104\006\103\007\075\012\047\014\033" +
    "\015\045\016\073\021\076\023\100\024\105\025\330\026" +
    "\107\030\071\031\044\035\014\036\020\037\102\041\013" +
    "\042\037\046\074\050\106\051\077\001\001\000\004\071" +
    "\331\001\001\000\004\043\333\001\001\000\004\015\336" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\072\342\001\001\000\004\074\340\001\001" +
    "\000\056\005\104\006\103\007\075\012\047\014\033\015" +
    "\045\016\073\021\076\023\100\024\105\025\341\026\107" +
    "\030\071\031\044\035\014\036\020\037\102\041\013\042" +
    "\037\046\074\050\106\051\077\001\001\000\002\001\001" +
    "\000\056\005\104\006\103\007\075\012\047\014\033\015" +
    "\045\016\073\021\076\023\100\024\105\025\343\026\107" +
    "\030\071\031\044\035\014\036\020\037\102\041\013\042" +
    "\037\046\074\050\106\051\077\001\001\000\004\073\344" +
    "\001\001\000\004\043\345\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\354\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\017\360\027\361" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\364\001\001\000\004" +
    "\056\365\001\001\000\056\005\104\006\103\007\075\012" +
    "\047\014\033\015\045\016\073\021\076\023\100\024\105" +
    "\025\366\026\107\030\071\031\044\035\014\036\020\037" +
    "\102\041\013\042\037\046\074\050\106\051\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\017\360\027\372\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\375\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\017\360\027\u0100\001\001\000\002" +
    "\001\001\000\004\055\u0102\001\001\000\056\005\104\006" +
    "\103\007\075\012\047\014\033\015\045\016\073\021\076" +
    "\023\100\024\105\025\u0103\026\107\030\071\031\044\035" +
    "\014\036\020\037\102\041\013\042\037\046\074\050\106" +
    "\051\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\u010f\001\001\000\004\022\u010b" +
    "\001\001\000\004\014\u010a\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\u010e\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\010\u0112\015\134\046\063\052\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\056\005\104\006\103\007\075\012" +
    "\047\014\033\015\045\016\073\021\076\023\100\024\105" +
    "\025\u011a\026\107\030\071\031\044\035\014\036\020\037" +
    "\102\041\013\042\037\046\074\050\106\051\077\001\001" +
    "\000\002\001\001\000\014\010\064\015\060\032\u011c\046" +
    "\063\052\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\u011f\001\001\000\002\001\001\000\012\010" +
    "\u0121\015\134\046\063\052\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\054\u0126\001\001\000\056\004\u0131\005\u0133\006\u0132" +
    "\007\u012d\012\047\014\033\015\045\016\u012b\020\u012a\021" +
    "\u012e\023\u012f\024\u0134\026\u0136\030\u0127\031\044\035\014" +
    "\036\020\037\u0130\041\013\042\037\046\u012c\050\u0135\001" +
    "\001\000\054\004\u0146\005\u0133\006\u0132\007\u012d\012\047" +
    "\014\033\015\045\016\u012b\021\u012e\023\u012f\024\u0134\026" +
    "\u0136\030\u0127\031\044\035\014\036\020\037\u0130\041\013" +
    "\042\037\046\u012c\050\u0135\001\001\000\054\004\u0145\005" +
    "\u0133\006\u0132\007\u012d\012\047\014\033\015\045\016\u012b" +
    "\021\u012e\023\u012f\024\u0134\026\u0136\030\u0127\031\044\035" +
    "\014\036\020\037\u0130\041\013\042\037\046\u012c\050\u0135" +
    "\001\001\000\054\004\u0144\005\u0133\006\u0132\007\u012d\012" +
    "\047\014\033\015\045\016\u012b\021\u012e\023\u012f\024\u0134" +
    "\026\u0136\030\u0127\031\044\035\014\036\020\037\u0130\041" +
    "\013\042\037\046\u012c\050\u0135\001\001\000\002\001\001" +
    "\000\054\004\u0141\005\u0133\006\u0132\007\u012d\012\047\014" +
    "\033\015\045\016\u012b\021\u012e\023\u012f\024\u0134\026\u0136" +
    "\030\u0127\031\044\035\014\036\020\037\u0130\041\013\042" +
    "\037\046\u012c\050\u0135\001\001\000\054\004\u0140\005\u0133" +
    "\006\u0132\007\u012d\012\047\014\033\015\045\016\u012b\021" +
    "\u012e\023\u012f\024\u0134\026\u0136\030\u0127\031\044\035\014" +
    "\036\020\037\u0130\041\013\042\037\046\u012c\050\u0135\001" +
    "\001\000\054\004\u013f\005\u0133\006\u0132\007\u012d\012\047" +
    "\014\033\015\045\016\u012b\021\u012e\023\u012f\024\u0134\026" +
    "\u0136\030\u0127\031\044\035\014\036\020\037\u0130\041\013" +
    "\042\037\046\u012c\050\u0135\001\001\000\054\004\u013e\005" +
    "\u0133\006\u0132\007\u012d\012\047\014\033\015\045\016\u012b" +
    "\021\u012e\023\u012f\024\u0134\026\u0136\030\u0127\031\044\035" +
    "\014\036\020\037\u0130\041\013\042\037\046\u012c\050\u0135" +
    "\001\001\000\054\004\u013d\005\u0133\006\u0132\007\u012d\012" +
    "\047\014\033\015\045\016\u012b\021\u012e\023\u012f\024\u0134" +
    "\026\u0136\030\u0127\031\044\035\014\036\020\037\u0130\041" +
    "\013\042\037\046\u012c\050\u0135\001\001\000\054\004\u013c" +
    "\005\u0133\006\u0132\007\u012d\012\047\014\033\015\045\016" +
    "\u012b\021\u012e\023\u012f\024\u0134\026\u0136\030\u0127\031\044" +
    "\035\014\036\020\037\u0130\041\013\042\037\046\u012c\050" +
    "\u0135\001\001\000\002\001\001\000\054\004\u013b\005\u0133" +
    "\006\u0132\007\u012d\012\047\014\033\015\045\016\u012b\021" +
    "\u012e\023\u012f\024\u0134\026\u0136\030\u0127\031\044\035\014" +
    "\036\020\037\u0130\041\013\042\037\046\u012c\050\u0135\001" +
    "\001\000\054\004\u013a\005\u0133\006\u0132\007\u012d\012\047" +
    "\014\033\015\045\016\u012b\021\u012e\023\u012f\024\u0134\026" +
    "\u0136\030\u0127\031\044\035\014\036\020\037\u0130\041\013" +
    "\042\037\046\u012c\050\u0135\001\001\000\054\004\u0139\005" +
    "\u0133\006\u0132\007\u012d\012\047\014\033\015\045\016\u012b" +
    "\021\u012e\023\u012f\024\u0134\026\u0136\030\u0127\031\044\035" +
    "\014\036\020\037\u0130\041\013\042\037\046\u012c\050\u0135" +
    "\001\001\000\054\004\u0138\005\u0133\006\u0132\007\u012d\012" +
    "\047\014\033\015\045\016\u012b\021\u012e\023\u012f\024\u0134" +
    "\026\u0136\030\u0127\031\044\035\014\036\020\037\u0130\041" +
    "\013\042\037\046\u012c\050\u0135\001\001\000\054\004\u0137" +
    "\005\u0133\006\u0132\007\u012d\012\047\014\033\015\045\016" +
    "\u012b\021\u012e\023\u012f\024\u0134\026\u0136\030\u0127\031\044" +
    "\035\014\036\020\037\u0130\041\013\042\037\046\u012c\050" +
    "\u0135\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\u0152\001\001\000" +
    "\012\010\u0151\015\134\046\063\052\062\001\001\000\004" +
    "\022\u014b\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\u0150\001\001\000\012\010\u014f\015\134\046\063" +
    "\052\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\010\u0155\015\134" +
    "\046\063\052\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\057\u015e\001\001\000\056\005\104" +
    "\006\103\007\075\012\047\014\033\015\045\016\073\021" +
    "\076\023\100\024\105\025\u015f\026\107\030\071\031\044" +
    "\035\014\036\020\037\102\041\013\042\037\046\074\050" +
    "\106\051\077\001\001\000\004\060\u0160\001\001\000\004" +
    "\034\u0161\001\001\000\004\033\u016a\001\001\000\014\010" +
    "\064\015\060\032\u0163\046\063\052\062\001\001\000\002" +
    "\001\001\000\004\062\u0165\001\001\000\056\005\104\006" +
    "\103\007\075\012\047\014\033\015\045\016\073\021\076" +
    "\023\100\024\105\025\u0166\026\107\030\071\031\044\035" +
    "\014\036\020\037\102\041\013\042\037\046\074\050\106" +
    "\051\077\001\001\000\004\063\u0167\001\001\000\004\034" +
    "\u0168\001\001\000\002\001\001\000\004\061\u016d\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\005\104\006\103\007\075\012\047\014\033\015\045" +
    "\016\073\021\076\023\100\024\105\025\u016e\026\107\030" +
    "\071\031\044\035\014\036\020\037\102\041\013\042\037" +
    "\046\074\050\106\051\077\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public ArrayList al = new ArrayList();
    public ArrayList erroresS = new ArrayList();
    public ArrayList erroresS1 = new ArrayList();


    /**Metodo al que se llama automáticamente ante algún error sintactico.*/
    public void syntax_error(Symbol s){
        String lexema = s.value.toString();
        int fila = s.right+1;
        int columna = s.left+1;
        
        System.err.println("Error en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador '"
        +s.value + "' no reconocido." );


        erroresS.add("Error en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador '"
        +s.value + "' no reconocido.\n");
    }

    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de
    errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String lexema = s.value.toString();
        int fila = s.right+1;
        int columna = s.left+1;

        System.err.println("Error en la Línea " + (s.right+1)+ " Columna "+(s.left+1)+". Identificador '" +
        s.value + "' no reconocido.");
        
        erroresS1.add("Error en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador '"
        +s.value + "' no reconocido.\n");
    }

    /*public Nodo getRaiz(){
        return action_obj.raiz;
    }*/

    


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {


    //Nodo raiz=null;
    Sintactico sin = new Sintactico();
    ArrayList corchetes = new ArrayList();
    

  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // RETORNO ::= resReturn EXP 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		parser.al.add("\treturn "+val+"\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETORNO",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // SALIRF ::= 
            {
              Object RESULT =null;
		RESULT="";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SALIRF",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // SALIRF ::= exit resFor 
            {
              Object RESULT =null;
		parser.al.add("\tbreak;\n\t");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SALIRF",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // SALIRW ::= 
            {
              Object RESULT =null;
		RESULT="";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SALIRW",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // SALIRW ::= exit resWhile 
            {
              Object RESULT =null;
		parser.al.add("\tbreak;\n\t");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SALIRW",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // CUERPOSWITCH ::= 
            {
              Object RESULT =null;
		RESULT="";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOSWITCH",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // CUERPOSWITCH ::= resCase resElse NT$17 COD3 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int codleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int codright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object cod = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOSWITCH",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // NT$17 ::= 
            {
              Object RESULT =null;
parser.al.add("\tdefault:\n\t");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$17",58, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // CUERPOSWITCH ::= resCase VALOR NT$15 COD3 NT$16 CUERPOSWITCH 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int codleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int codright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object cod = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOSWITCH",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // NT$16 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int codleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int codright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object cod = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
parser.al.add("\tbreak;\n\t");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$16",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // NT$15 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
parser.al.add("\tCase "+val+":\n\t");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$15",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // SENTSWITCH ::= select resCase iden NT$12 resCase VALOR NT$13 COD3 NT$14 CUERPOSWITCH end select 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int codleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int codright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object cod = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		parser.al.add("\n\t}\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTSWITCH",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // NT$14 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int codleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int codright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object cod = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
parser.al.add("\tbreak;\n\t");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$14",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // NT$13 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
parser.al.add("\tCase "+val+":\n\t");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$13",54, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // NT$12 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
parser.al.add("\tswitch("+id+") {\n\t");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$12",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // SENTDOWHILE ::= resDo NT$11 COD3 loopUntil CONDICION 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int codleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int codright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object cod = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		parser.al.add("\t} while("+cond+");\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTDOWHILE",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // NT$11 ::= 
            {
              Object RESULT =null;
parser.al.add("\tDo{\n\t");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$11",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // SENTFOR ::= resFor iden as TIPO igual NUM resTo NUM step NUM NT$10 COD3 SALIRF next 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).value;
		int inicioleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int inicioright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Object inicio = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String signo = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int finright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object fin = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int saltoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int saltoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object salto = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int codleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int codright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object cod = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		parser.al.add("\n\t}\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTFOR",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // NT$10 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int inicioleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int inicioright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object inicio = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String signo = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int finright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object fin = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int saltoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int saltoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object salto = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
int primero = Integer.parseInt(inicio.toString());
                                                                                            int segundo = Integer.parseInt(fin.toString());
                                                                                            if(primero < segundo){
                                                                                            parser.al.add("\t"+"for("+"int"+" "+id+" = "+inicio+"; "+id+" < "+fin+"; "+id+" = "+id+" + ("+salto+") ){\n\t");
                                                                                            } else{
                                                                                            parser.al.add("\t"+"for("+"int"+" "+id+" = "+inicio+"; "+id+" > "+fin+"; "+id+" = "+id+" + ("+salto+") ){\n\t");
                                                                                            }
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$10",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // SENTWHILE ::= resWhile CONDICION NT$9 COD3 SALIRW end resWhile 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int codleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int codright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object cod = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		parser.al.add("\n\t}\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTWHILE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // NT$9 ::= 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
parser.al.add("\t"+"While("+cond+"){\n\t");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$9",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // SENTELSEIF ::= 
            {
              Object RESULT =null;
		RESULT="";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTELSEIF",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // SENTELSEIF ::= resElseIf CONDICION resThen NT$7 COD3 NT$8 SENTELSEIF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int codleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int codright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object cod = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTELSEIF",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int codleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int codright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object cod = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
parser.al.add("\n\t}\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$8",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // NT$7 ::= 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
parser.al.add("\t"+"else if("+cond+"){\n\t");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$7",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // SENTELSE ::= 
            {
              Object RESULT =null;
		RESULT="";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTELSE",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // SENTELSE ::= resElse NT$6 COD3 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		parser.al.add("\n\t}\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTELSE",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // NT$6 ::= 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
parser.al.add("\t"+val1+"{\n\t");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$6",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // OPLOG ::= 
            {
              Object RESULT =null;
		RESULT="";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPLOG",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // OPLOG ::= not CONDICION 
            {
              Object RESULT =null;
		int con2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int con2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object con2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=" ! "+con2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPLOG",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // OPLOG ::= or CONDICION 
            {
              Object RESULT =null;
		int con2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int con2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object con2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=" || "+con2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPLOG",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // OPLOG ::= and CONDICION 
            {
              Object RESULT =null;
		int con2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int con2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object con2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=" && "+con2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPLOG",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // CONDICION ::= VALOR 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // CONDICION ::= EXP igual EXP OPLOG 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"=="+val2+o;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // CONDICION ::= EXP menorMayor EXP OPLOG 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"!="+val2+o;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // CONDICION ::= EXP mayorIgual EXP OPLOG 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+">="+val2+o;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // CONDICION ::= EXP mayorq EXP OPLOG 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+">"+val2+o;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // CONDICION ::= EXP menorIgual EXP OPLOG 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"<="+val2+o;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // CONDICION ::= EXP menorq EXP OPLOG 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"<"+val2+o;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // SENTIF ::= resIf CONDICION resThen NT$4 COD3 NT$5 SENTELSEIF SENTELSE end resIf 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int codleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int codright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object cod = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int elsifleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int elsifright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object elsif = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int elsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int elsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object els = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		parser.al.add(elsif);parser.al.add(els);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTIF",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int codleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int codright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object cod = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
parser.al.add("\n\t}\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$5",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // NT$4 ::= 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
parser.al.add("\t"+"if("+cond+"){\n\t");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$4",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // FUNCION ::= ACCESO func iden parentesisA LISTAPARAM parentesisC as TIPO NT$3 COD3 end func 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int accleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).left;
		int accright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).right;
		Object acc = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int codleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int codright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object cod = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		parser.al.add("\n\t}\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // NT$3 ::= 
            {
              Object RESULT =null;
		int accleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int accright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object acc = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
parser.al.add("\t"+acc+" "+tipo+" "+id+" ("+lp+"){\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$3",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // PARAMETRO ::= byval iden as TIPO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=tipo+" "+id;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETRO",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // LISTAPARAM ::= 
            {
              Object RESULT =null;
		RESULT="";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAPARAM",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // LISTAPARAM ::= PARAMETRO coma LISTAPARAM 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val+" , "+val1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAPARAM",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // LISTAPARAM ::= PARAMETRO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAPARAM",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // MET ::= ACCESO sub iden parentesisA LISTAPARAM parentesisC NT$2 COD3 end sub 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int accleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int accright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Object acc = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int codleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int codright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object cod = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		parser.al.add("\t}\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MET",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // NT$2 ::= 
            {
              Object RESULT =null;
		int accleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int accright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object acc = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
parser.al.add("\t"+acc+" void "+id+" ("+lp+"){\n\t");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$2",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // IMP ::= cwl parentesisA EXP parentesisC 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		parser.al.add("\t"+"System.out.println("+val+");\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMP",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ASGARR ::= iden corA ARRLISTA corC igual EXP 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int exppleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exppright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object expp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		parser.al.add("\t"+id+val+" = "+expp+";\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASGARR",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ARRLISTA ::= iden coma ARRLISTA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT="["+val+"]"+val1;corchetes.add(RESULT);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARRLISTA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ARRLISTA ::= iden 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT="["+val+"]";corchetes.add(RESULT);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARRLISTA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ARREGLOS ::= iden corA ARRLISTA corC as TIPO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		String cor="";for(int i=0;i<corchetes.size();i++){cor+="[]";};parser.al.add("\t"+tipo+" "+cor+" "+id+" = new "+tipo+" "+val+";\n");corchetes.clear();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ARREGLOS ::= ACCESO iden corA ARRLISTA corC as TIPO 
            {
              Object RESULT =null;
		int accleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int accright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object acc = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		String cor="";for(int i=0;i<corchetes.size();i++){cor+="[]";};parser.al.add("\t"+acc+" "+tipo+" "+cor+" "+id+" = new "+tipo+" "+val+";\n");corchetes.clear();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // SENTENCIA ::= COD2 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // METMAIN ::= sub main parentesisA parentesisC NT$1 SENTENCIA end sub 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		System.out.println("\n\t}");
                                   parser.al.add("\n\t}\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METMAIN",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // NT$1 ::= 
            {
              Object RESULT =null;
System.out.println("\t"+"public static void main(String[] args){\n\t");
                                             parser.al.add("\t"+"public static void main(String[] args){\n\t");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // DYA2 ::= iden as TIPO igual crl 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		if(tipo=="String"){parser.al.add("\t"+tipo+" "+id+" = sc.nextLine();\n");}else{parser.al.add("\t"+"int "+id+" = sc.nextInt();\n");};
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DYA2",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // DYA2 ::= ACCESO iden as TIPO igual crl 
            {
              Object RESULT =null;
		int accleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int accright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object acc = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		if(tipo=="String"){parser.al.add("\t"+acc+" "+tipo+" "+id+" = sc.nextLine();\n");}else{parser.al.add("\t"+acc+" int "+id+" = sc.nextInt();\n");};
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DYA2",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // DYA ::= iden as TIPO igual EXP 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object dato = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		parser.al.add("\t"+tipo+" "+id+" = "+dato+";\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DYA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // DYA ::= ACCESO iden as TIPO igual EXP 
            {
              Object RESULT =null;
		int accleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int accright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object acc = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object dato = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		parser.al.add("\t"+acc+" "+tipo+" "+id+" = "+dato+";\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DYA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // NUM ::= decimal 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NUM",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // NUM ::= entero 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NUM",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // VALOR ::= caracter 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // VALOR ::= iden 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // VALOR ::= bool 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // VALOR ::= cadena 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // VALOR ::= decimal 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // VALOR ::= entero 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // PARAMFUNC ::= 
            {
              Object RESULT =null;
		RESULT="";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMFUNC",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // PARAMFUNC ::= VALOR div PARAMFUNC 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"/"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMFUNC",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // PARAMFUNC ::= VALOR mul PARAMFUNC 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"*"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMFUNC",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // PARAMFUNC ::= VALOR menos PARAMFUNC 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"-"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMFUNC",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // PARAMFUNC ::= VALOR mas PARAMFUNC 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"+"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMFUNC",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // PARAMFUNC ::= VALOR coma PARAMFUNC 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+","+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMFUNC",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // PARAMFUNC ::= VALOR 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMFUNC",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // LLAMARR ::= VALOR corA ARRLISTA corC 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=val1+""+ar;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMARR",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // LLAMFUNC ::= VALOR parentesisA PARAMFUNC parentesisC 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int pfleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int pfright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object pf = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=val1+"("+pf+")";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMFUNC",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXP ::= iden corA VALOR coma VALOR corC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=id+"["+id1+"]"+id2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXP ::= VALOR and2 EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+" + "+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXP ::= LLAMARR and2 EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"+"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXP ::= LLAMARR div EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"/"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXP ::= LLAMARR mul EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"*"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXP ::= LLAMARR menos EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"-"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXP ::= LLAMARR mas EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"+"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXP ::= EXP and2 LLAMARR 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"+"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXP ::= EXP div LLAMARR 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"/"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXP ::= EXP mul LLAMARR 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"*"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXP ::= EXP menos LLAMARR 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"-"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXP ::= EXP mas LLAMARR 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"+"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXP ::= LLAMFUNC and2 EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"+"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXP ::= LLAMFUNC div EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"/"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXP ::= LLAMFUNC mul EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"*"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXP ::= LLAMFUNC menos EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"-"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXP ::= LLAMFUNC mas EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"+"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXP ::= EXP and2 LLAMFUNC 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"+"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXP ::= EXP div LLAMFUNC 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"/"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXP ::= EXP mul LLAMFUNC 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"*"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXP ::= EXP menos LLAMFUNC 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"-"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXP ::= EXP mas LLAMFUNC 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"+"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXP ::= VALOR 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXP ::= EXP div EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"/"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXP ::= EXP mul EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"*"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXP ::= EXP menos EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"-"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXP ::= EXP mas EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"+"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ASIGNACION ::= iden igual EXP 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object dato = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		System.out.println("\t"+ id + " = " + dato +";");
                                      parser.al.add("\t"+ id + " = " + dato +";\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LISTAID ::= iden coma LISTAID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=id+","+id1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAID",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // LISTAID ::= iden 
            {
              Object RESULT =null;
		int id2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=id2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAID",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ACCESO ::= resStatic 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT="static";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESO",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ACCESO ::= dim 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT="private";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESO",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ACCESO ::= resPrivate 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT="private";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESO",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ACCESO ::= resPublic 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT="public";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESO",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // TIPO ::= resLong 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT="long";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // TIPO ::= resChar 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT="char";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // TIPO ::= resDouble 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT="double";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // TIPO ::= resBoolean 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT="boolean";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // TIPO ::= resString 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT="String";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // TIPO ::= resInteger 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT="int";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION ::= iden as TIPO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		System.out.println("\t"+ tipo + " " + id +";"); 
                                        parser.al.add("\t"+ tipo + " " + id +";\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION ::= ACCESO iden as TIPO 
            {
              Object RESULT =null;
		int accleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int accright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object acc = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		System.out.println("\t"+ acc + " " + tipo + " " + id +";"); 
                                                   parser.al.add("\t"+ acc + " " + tipo + " " + id +";\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION ::= LISTAID as TIPO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		System.out.println("\t"+ tipo + " " + id +";"); 
                                        parser.al.add("\t"+ tipo + " " + id +";\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACION ::= ACCESO LISTAID as TIPO 
            {
              Object RESULT =null;
		int accleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int accright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object acc = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		System.out.println("\t"+ acc + " " + tipo + " " + id +";"); 
                                                   parser.al.add("\t"+ acc + " " + tipo + " " + id +";\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CICLOS ::= SENTSWITCH 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLOS",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CICLOS ::= SENTDOWHILE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLOS",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CICLOS ::= SENTWHILE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLOS",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CICLOS ::= SENTFOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLOS",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CICLOS ::= SENTIF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLOS",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // COD3 ::= 
            {
              Object RESULT =null;
		RESULT="";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD3",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // COD3 ::= LLAMFUNC COD 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		parser.al.add("\t"+val+";\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD3",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // COD3 ::= RETORNO COD3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD3",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // COD3 ::= Comentario2 COD3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD3",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // COD3 ::= Comentario1 COD3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD3",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // COD3 ::= CICLOS COD3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD3",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // COD3 ::= FUNCION COD3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD3",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // COD3 ::= METMAIN COD3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD3",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // COD3 ::= MET COD3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD3",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // COD3 ::= DYA2 COD3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD3",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // COD3 ::= DYA COD3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD3",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // COD3 ::= IMP COD3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD3",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // COD3 ::= ASGARR COD3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD3",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // COD3 ::= ARREGLOS COD3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD3",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // COD3 ::= ASIGNACION COD3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD3",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // COD3 ::= DECLARACION COD3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD3",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // COD2 ::= 
            {
              Object RESULT =null;
		RESULT="";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD2",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // COD2 ::= LLAMFUNC COD2 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		parser.al.add("\t"+val+";\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD2",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // COD2 ::= Comentario2 COD2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD2",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // COD2 ::= Comentario1 COD2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD2",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // COD2 ::= CICLOS COD2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD2",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // COD2 ::= FUNCION COD2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD2",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // COD2 ::= METMAIN COD2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD2",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // COD2 ::= MET COD2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD2",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // COD2 ::= DYA2 COD2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD2",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // COD2 ::= DYA COD2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD2",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // COD2 ::= IMP COD2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD2",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // COD2 ::= ASGARR COD2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD2",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // COD2 ::= ARREGLOS COD2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD2",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // COD2 ::= ASIGNACION COD2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD2",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // COD2 ::= DECLARACION COD2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD2",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // COD ::= 
            {
              Object RESULT =null;
		RESULT="";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // COD ::= LLAMFUNC COD 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		parser.al.add("\t"+val+";\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // COD ::= Comentario2 COD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // COD ::= Comentario1 COD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // COD ::= CICLOS COD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // COD ::= FUNCION COD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // COD ::= MET COD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // COD ::= METMAIN COD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // COD ::= IMP COD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // COD ::= ASGARR COD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // COD ::= ARREGLOS COD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // COD ::= DYA2 COD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // COD ::= DYA COD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // COD ::= ASIGNACION COD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // COD ::= DECLARACION COD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= module iden NT$0 COD end module 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int codleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int codright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object cod = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		System.out.println("\n"+"}");
                              parser.al.add("\n"+"}");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
System.out.println("import java.util.Scanner;\n\n\n"+"public class "+ id + "{"+"\n\t"); 
                          parser.al.add("import java.util.Scanner;\n\n\n"+"public class "+ id + "{"+"\n\n");
                          parser.al.add("\t"+"static Scanner sc = new Scanner(System.in);\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

