
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Feb 23 18:55:30 CST 2018
//----------------------------------------------------

package Analisis;

import java.util.ArrayList;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Feb 23 18:55:30 CST 2018
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\310\000\002\002\004\000\002\054\002\000\002\002" +
    "\010\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\003\004\000\002" +
    "\003\004\000\002\003\004\000\002\003\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\002\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\004\004\000\002\004\004\000\002\004\004\000\002" +
    "\004\004\000\002\004\004\000\002\004\004\000\002\004" +
    "\004\000\002\004\004\000\002\004\004\000\002\004\004" +
    "\000\002\004\002\000\002\025\004\000\002\025\004\000" +
    "\002\025\004\000\002\025\004\000\002\025\004\000\002" +
    "\025\004\000\002\025\004\000\002\025\004\000\002\025" +
    "\004\000\002\025\004\000\002\025\004\000\002\025\004" +
    "\000\002\025\004\000\002\025\004\000\002\025\004\000" +
    "\002\025\004\000\002\025\004\000\002\025\002\000\002" +
    "\037\003\000\002\037\003\000\002\037\003\000\002\037" +
    "\003\000\002\037\003\000\002\005\006\000\002\005\005" +
    "\000\002\005\006\000\002\005\005\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\014\003" +
    "\000\002\014\005\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\003\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\010\010\000\002\047\006" +
    "\000\002\053\006\000\002\050\003\000\002\050\005\000" +
    "\002\050\005\000\002\050\005\000\002\050\005\000\002" +
    "\050\005\000\002\050\002\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\040\003\000\002\040\003\000" +
    "\002\007\010\000\002\007\010\000\002\007\010\000\002" +
    "\007\007\000\002\007\007\000\002\007\007\000\002\026" +
    "\010\000\002\026\007\000\002\055\002\000\002\016\013" +
    "\000\002\020\003\000\002\021\011\000\002\021\010\000" +
    "\002\022\003\000\002\022\005\000\002\051\010\000\002" +
    "\023\006\000\002\056\002\000\002\024\014\000\002\057" +
    "\002\000\002\024\013\000\002\027\003\000\002\027\005" +
    "\000\002\027\002\000\002\017\006\000\002\060\002\000" +
    "\002\030\016\000\002\061\002\000\002\030\015\000\002" +
    "\062\002\000\002\063\002\000\002\031\014\000\002\032" +
    "\006\000\002\032\006\000\002\032\006\000\002\032\006" +
    "\000\002\032\006\000\002\032\006\000\002\032\003\000" +
    "\002\013\004\000\002\013\004\000\002\013\004\000\002" +
    "\013\002\000\002\064\002\000\002\033\005\000\002\033" +
    "\002\000\002\065\002\000\002\066\002\000\002\034\011" +
    "\000\002\034\002\000\002\067\002\000\002\035\010\000" +
    "\002\070\002\000\002\036\020\000\002\044\003\000\002" +
    "\044\003\000\002\044\003\000\002\044\003\000\002\044" +
    "\002\000\002\071\002\000\002\041\007\000\002\072\002" +
    "\000\002\073\002\000\002\074\002\000\002\042\016\000" +
    "\002\075\002\000\002\076\002\000\002\043\010\000\002" +
    "\077\002\000\002\043\006\000\002\043\002\000\002\045" +
    "\004\000\002\046\004\000\002\052\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0199\000\004\013\004\001\002\000\004\075\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\054\007\000\014\000\015\000\016\000\017\000\024" +
    "\000\026\000\027\000\032\000\033\000\037\000\041\000" +
    "\066\000\071\000\072\000\073\000\074\000\075\000\076" +
    "\000\077\000\100\000\001\002\000\054\007\011\014\ufff0" +
    "\015\032\016\023\017\056\024\034\026\033\027\013\032" +
    "\057\033\054\037\040\041\053\066\026\071\037\072\060" +
    "\073\061\074\012\075\030\076\024\077\020\100\017\001" +
    "\002\000\010\026\uffbd\066\uffbd\075\uffbd\001\002\000\144" +
    "\004\uff88\005\uff88\007\uff88\014\uff88\015\uff88\016\uff88\017" +
    "\uff88\024\uff88\026\uff88\027\uff88\030\uff88\031\uff88\032\uff88" +
    "\033\uff88\035\uff88\036\uff88\037\uff88\040\uff88\041\uff88\042" +
    "\uff88\043\uff88\044\uff88\045\uff88\046\uff88\047\uff88\050\uff88" +
    "\051\uff88\052\uff88\053\uff88\054\uff88\055\uff88\056\uff88\057" +
    "\uff88\060\uff88\061\uff88\062\uff88\063\uff88\064\uff88\066\uff88" +
    "\067\uff88\070\uff88\071\uff88\072\uff88\073\uff88\074\uff88\075" +
    "\uff88\076\uff88\077\uff88\100\uff88\001\002\000\016\071\037" +
    "\072\060\073\061\074\012\075\063\076\024\001\002\000" +
    "\072\007\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\024\uffcb" +
    "\026\uffcb\027\uffcb\031\uffcb\032\uffcb\033\uffcb\036\uffcb\037" +
    "\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\066\uffcb\067\uffcb" +
    "\070\uffcb\071\uffcb\072\uffcb\073\uffcb\074\uffcb\075\uffcb\076" +
    "\uffcb\077\uffcb\100\uffcb\001\002\000\072\007\uffcc\014\uffcc" +
    "\015\uffcc\016\uffcc\017\uffcc\024\uffcc\026\uffcc\027\uffcc\031" +
    "\uffcc\032\uffcc\033\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc" +
    "\042\uffcc\043\uffcc\066\uffcc\067\uffcc\070\uffcc\071\uffcc\072" +
    "\uffcc\073\uffcc\074\uffcc\075\uffcc\076\uffcc\077\uffcc\100\uffcc" +
    "\001\002\000\066\007\011\014\ufff0\015\032\016\023\017" +
    "\056\024\034\026\033\027\013\031\ufff0\032\057\033\054" +
    "\036\ufff0\037\040\040\ufff0\041\053\042\ufff0\066\026\070" +
    "\ufff0\071\037\072\060\073\061\074\012\075\030\076\024" +
    "\077\020\100\017\001\002\000\066\007\011\014\ufff0\015" +
    "\032\016\023\017\056\024\034\026\033\027\013\031\ufff0" +
    "\032\057\033\054\036\ufff0\037\040\040\ufff0\041\053\042" +
    "\ufff0\066\026\070\ufff0\071\037\072\060\073\061\074\012" +
    "\075\030\076\024\077\020\100\017\001\002\000\066\007" +
    "\011\014\ufff0\015\032\016\023\017\056\024\034\026\033" +
    "\027\013\031\ufff0\032\057\033\054\036\ufff0\037\040\040" +
    "\ufff0\041\053\042\ufff0\066\026\070\ufff0\071\037\072\060" +
    "\073\061\074\012\075\030\076\024\077\020\100\017\001" +
    "\002\000\072\007\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd" +
    "\024\uffcd\026\uffcd\027\uffcd\031\uffcd\032\uffcd\033\uffcd\036" +
    "\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\066\uffcd" +
    "\067\uffcd\070\uffcd\071\uffcd\072\uffcd\073\uffcd\074\uffcd\075" +
    "\uffcd\076\uffcd\077\uffcd\100\uffcd\001\002\000\066\007\011" +
    "\014\ufff0\015\032\016\023\017\056\024\034\026\033\027" +
    "\013\031\ufff0\032\057\033\054\036\ufff0\037\040\040\ufff0" +
    "\041\053\042\ufff0\066\026\070\ufff0\071\037\072\060\073" +
    "\061\074\012\075\030\076\024\077\020\100\017\001\002" +
    "\000\010\026\uffbe\066\uffbe\075\uffbe\001\002\000\144\004" +
    "\uff86\005\uff86\007\uff86\014\uff86\015\uff86\016\uff86\017\uff86" +
    "\024\uff86\026\uff86\027\uff86\030\uff86\031\uff86\032\uff86\033" +
    "\uff86\035\uff86\036\uff86\037\uff86\040\uff86\041\uff86\042\uff86" +
    "\043\uff86\044\uff86\045\uff86\046\uff86\047\uff86\050\uff86\051" +
    "\uff86\052\uff86\053\uff86\054\uff86\055\uff86\056\uff86\057\uff86" +
    "\060\uff86\061\uff86\062\uff86\063\uff86\064\uff86\066\uff86\067" +
    "\uff86\070\uff86\071\uff86\072\uff86\073\uff86\074\uff86\075\uff86" +
    "\076\uff86\077\uff86\100\uff86\001\002\000\066\007\011\014" +
    "\ufff0\015\032\016\023\017\056\024\034\026\033\027\013" +
    "\031\ufff0\032\057\033\054\036\ufff0\037\040\040\ufff0\041" +
    "\053\042\ufff0\066\026\070\ufff0\071\037\072\060\073\061" +
    "\074\012\075\030\076\024\077\020\100\017\001\002\000" +
    "\004\075\u017a\001\002\000\066\007\011\014\ufff0\015\032" +
    "\016\023\017\056\024\034\026\033\027\013\031\ufff0\032" +
    "\057\033\054\036\ufff0\037\040\040\ufff0\041\053\042\ufff0" +
    "\066\026\070\ufff0\071\037\072\060\073\061\074\012\075" +
    "\030\076\024\077\020\100\017\001\002\000\014\004\u0167" +
    "\010\u0166\051\u0168\052\u0140\053\uff87\001\002\000\066\007" +
    "\011\014\ufff0\015\032\016\023\017\056\024\034\026\033" +
    "\027\013\031\ufff0\032\057\033\054\036\ufff0\037\040\040" +
    "\ufff0\041\053\042\ufff0\066\026\070\ufff0\071\037\072\060" +
    "\073\061\074\012\075\030\076\024\077\020\100\017\001" +
    "\002\000\010\026\uffbf\066\uffbf\075\uffbf\001\002\000\004" +
    "\075\u015d\001\002\000\004\053\u015a\001\002\000\004\010" +
    "\u0158\001\002\000\066\007\011\014\ufff0\015\032\016\023" +
    "\017\056\024\034\026\033\027\013\031\ufff0\032\057\033" +
    "\054\036\ufff0\037\040\040\ufff0\041\053\042\ufff0\066\026" +
    "\070\ufff0\071\037\072\060\073\061\074\012\075\030\076" +
    "\024\077\020\100\017\001\002\000\144\004\uff8b\005\uff8b" +
    "\007\uff8b\014\uff8b\015\uff8b\016\uff8b\017\uff8b\024\uff8b\026" +
    "\uff8b\027\uff8b\030\uff8b\031\uff8b\032\uff8b\033\uff8b\035\uff8b" +
    "\036\uff8b\037\uff8b\040\uff8b\041\uff8b\042\uff8b\043\uff8b\044" +
    "\uff8b\045\uff8b\046\uff8b\047\uff8b\050\uff8b\051\uff8b\052\uff8b" +
    "\053\uff8b\054\uff8b\055\uff8b\056\uff8b\057\uff8b\060\uff8b\061" +
    "\uff8b\062\uff8b\063\uff8b\064\uff8b\066\uff8b\067\uff8b\070\uff8b" +
    "\071\uff8b\072\uff8b\073\uff8b\074\uff8b\075\uff8b\076\uff8b\077" +
    "\uff8b\100\uff8b\001\002\000\060\007\uff48\015\uff48\016\uff48" +
    "\017\uff48\024\uff48\026\uff48\027\uff48\032\uff48\033\uff48\037" +
    "\uff48\040\uff48\041\uff48\043\uff48\066\uff48\067\uff48\071\uff48" +
    "\072\uff48\073\uff48\074\uff48\075\uff48\076\uff48\077\uff48\100" +
    "\uff48\001\002\000\072\007\uffca\014\uffca\015\uffca\016\uffca" +
    "\017\uffca\024\uffca\026\uffca\027\uffca\031\uffca\032\uffca\033" +
    "\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca\043\uffca" +
    "\066\uffca\067\uffca\070\uffca\071\uffca\072\uffca\073\uffca\074" +
    "\uffca\075\uffca\076\uffca\077\uffca\100\uffca\001\002\000\066" +
    "\007\011\014\ufff0\015\032\016\023\017\056\024\034\026" +
    "\033\027\013\031\ufff0\032\057\033\054\036\ufff0\037\040" +
    "\040\ufff0\041\053\042\ufff0\066\026\070\ufff0\071\037\072" +
    "\060\073\061\074\012\075\030\076\024\077\020\100\017" +
    "\001\002\000\066\007\011\014\ufff0\015\032\016\023\017" +
    "\056\024\034\026\033\027\013\031\ufff0\032\057\033\054" +
    "\036\ufff0\037\040\040\ufff0\041\053\042\ufff0\066\026\070" +
    "\ufff0\071\037\072\060\073\061\074\012\075\030\076\024" +
    "\077\020\100\017\001\002\000\066\007\011\014\ufff0\015" +
    "\032\016\023\017\056\024\034\026\033\027\013\031\ufff0" +
    "\032\057\033\054\036\ufff0\037\040\040\ufff0\041\053\042" +
    "\ufff0\066\026\070\ufff0\071\037\072\060\073\061\074\012" +
    "\075\030\076\024\077\020\100\017\001\002\000\066\007" +
    "\011\014\ufff0\015\032\016\023\017\056\024\034\026\033" +
    "\027\013\031\ufff0\032\057\033\054\036\ufff0\037\040\040" +
    "\ufff0\041\053\042\ufff0\066\026\070\ufff0\071\037\072\060" +
    "\073\061\074\012\075\030\076\024\077\020\100\017\001" +
    "\002\000\072\007\uffce\014\uffce\015\uffce\016\uffce\017\uffce" +
    "\024\uffce\026\uffce\027\uffce\031\uffce\032\uffce\033\uffce\036" +
    "\uffce\037\uffce\040\uffce\041\uffce\042\uffce\043\uffce\066\uffce" +
    "\067\uffce\070\uffce\071\uffce\072\uffce\073\uffce\074\uffce\075" +
    "\uffce\076\uffce\077\uffce\100\uffce\001\002\000\004\053\212" +
    "\001\002\000\004\014\u014d\001\002\000\010\026\374\066" +
    "\375\075\373\001\002\000\066\007\011\014\ufff0\015\032" +
    "\016\023\017\056\024\034\026\033\027\013\031\ufff0\032" +
    "\057\033\054\036\ufff0\037\040\040\ufff0\041\053\042\ufff0" +
    "\066\026\070\ufff0\071\037\072\060\073\061\074\012\075" +
    "\030\076\024\077\020\100\017\001\002\000\004\042\346" +
    "\001\002\000\004\075\315\001\002\000\066\007\011\014" +
    "\ufff0\015\032\016\023\017\056\024\034\026\033\027\013" +
    "\031\ufff0\032\057\033\054\036\ufff0\037\040\040\ufff0\041" +
    "\053\042\ufff0\066\026\070\ufff0\071\037\072\060\073\061" +
    "\074\012\075\030\076\024\077\020\100\017\001\002\000" +
    "\010\026\uffbc\066\uffbc\075\uffbc\001\002\000\016\071\037" +
    "\072\060\073\061\074\012\075\063\076\024\001\002\000" +
    "\144\004\uff8a\005\uff8a\007\uff8a\014\uff8a\015\uff8a\016\uff8a" +
    "\017\uff8a\024\uff8a\026\uff8a\027\uff8a\030\uff8a\031\uff8a\032" +
    "\uff8a\033\uff8a\035\uff8a\036\uff8a\037\uff8a\040\uff8a\041\uff8a" +
    "\042\uff8a\043\uff8a\044\uff8a\045\uff8a\046\uff8a\047\uff8a\050" +
    "\uff8a\051\uff8a\052\uff8a\053\uff8a\054\uff8a\055\uff8a\056\uff8a" +
    "\057\uff8a\060\uff8a\061\uff8a\062\uff8a\063\uff8a\064\uff8a\066" +
    "\uff8a\067\uff8a\070\uff8a\071\uff8a\072\uff8a\073\uff8a\074\uff8a" +
    "\075\uff8a\076\uff8a\077\uff8a\100\uff8a\001\002\000\144\004" +
    "\uff89\005\uff89\007\uff89\014\uff89\015\uff89\016\uff89\017\uff89" +
    "\024\uff89\026\uff89\027\uff89\030\uff89\031\uff89\032\uff89\033" +
    "\uff89\035\uff89\036\uff89\037\uff89\040\uff89\041\uff89\042\uff89" +
    "\043\uff89\044\uff89\045\uff89\046\uff89\047\uff89\050\uff89\051" +
    "\uff89\052\uff89\053\uff89\054\uff89\055\uff89\056\uff89\057\uff89" +
    "\060\uff89\061\uff89\062\uff89\063\uff89\064\uff89\066\uff89\067" +
    "\uff89\070\uff89\071\uff89\072\uff89\073\uff89\074\uff89\075\uff89" +
    "\076\uff89\077\uff89\100\uff89\001\002\000\126\004\211\007" +
    "\uff5d\014\uff5d\015\uff5d\016\uff5d\017\uff5d\024\uff5d\026\uff5d" +
    "\027\uff5d\030\uff5d\031\uff5d\032\uff5d\033\uff5d\036\uff5d\037" +
    "\uff5d\040\uff5d\041\uff5d\042\uff5d\043\uff5d\044\uffb1\045\uffb1" +
    "\046\uffb1\047\uffb1\050\uffb1\051\uffb1\053\212\055\uffb1\056" +
    "\uffb1\057\uffb1\060\uffb1\064\252\066\uff5d\067\uff5d\070\uff5d" +
    "\071\uff5d\072\uff5d\073\uff5d\074\uff5d\075\uff5d\076\uff5d\077" +
    "\uff5d\100\uff5d\001\002\000\144\004\307\005\uff87\007\uff87" +
    "\014\uff87\015\uff87\016\uff87\017\uff87\024\uff87\026\uff87\027" +
    "\uff87\030\uff87\031\uff87\032\uff87\033\uff87\035\uff87\036\uff87" +
    "\037\uff87\040\uff87\041\uff87\042\uff87\043\uff87\044\uff87\045" +
    "\uff87\046\uff87\047\uff87\050\uff87\051\uff87\052\uff87\053\uff87" +
    "\054\uff87\055\uff87\056\uff87\057\uff87\060\uff87\061\uff87\062" +
    "\uff87\063\uff87\064\uff87\066\uff87\067\uff87\070\uff87\071\uff87" +
    "\072\uff87\073\uff87\074\uff87\075\uff87\076\uff87\077\uff87\100" +
    "\uff87\001\002\000\014\055\174\056\175\057\176\060\177" +
    "\064\173\001\002\000\014\055\162\056\163\057\164\060" +
    "\165\064\161\001\002\000\030\044\260\045\262\046\264" +
    "\047\257\050\261\051\263\055\151\056\144\057\143\060" +
    "\141\064\150\001\002\000\060\007\uff51\014\uff51\015\uff51" +
    "\016\uff51\017\uff51\024\uff51\026\uff51\027\uff51\032\uff51\033" +
    "\uff51\037\uff51\041\uff51\043\uff51\066\uff51\067\uff51\071\uff51" +
    "\072\uff51\073\uff51\074\uff51\075\uff51\076\uff51\077\uff51\100" +
    "\uff51\001\002\000\060\007\011\014\uffcf\015\032\016\023" +
    "\017\056\024\034\026\033\027\013\032\057\033\054\037" +
    "\040\041\053\043\071\066\026\067\073\071\037\072\060" +
    "\073\061\074\012\075\030\076\024\077\076\100\074\001" +
    "\002\000\006\032\255\033\256\001\002\000\072\007\011" +
    "\014\uffcf\015\032\016\023\017\056\024\034\026\033\027" +
    "\013\031\uffcf\032\057\033\054\036\uffcf\037\040\040\uffcf" +
    "\041\053\042\uffcf\043\071\066\026\067\073\070\uffcf\071" +
    "\037\072\060\073\061\074\012\075\030\076\024\077\076" +
    "\100\074\001\002\000\016\071\037\072\060\073\061\074" +
    "\012\075\063\076\024\001\002\000\072\007\011\014\uffcf" +
    "\015\032\016\023\017\056\024\034\026\033\027\013\031" +
    "\uffcf\032\057\033\054\036\uffcf\037\040\040\uffcf\041\053" +
    "\042\uffcf\043\071\066\026\067\073\070\uffcf\071\037\072" +
    "\060\073\061\074\012\075\030\076\024\077\076\100\074" +
    "\001\002\000\072\007\011\014\uffcf\015\032\016\023\017" +
    "\056\024\034\026\033\027\013\031\uffcf\032\057\033\054" +
    "\036\uffcf\037\040\040\uffcf\041\053\042\uffcf\043\071\066" +
    "\026\067\073\070\uffcf\071\037\072\060\073\061\074\012" +
    "\075\030\076\024\077\076\100\074\001\002\000\072\007" +
    "\011\014\uffcf\015\032\016\023\017\056\024\034\026\033" +
    "\027\013\031\uffcf\032\057\033\054\036\uffcf\037\040\040" +
    "\uffcf\041\053\042\uffcf\043\071\066\026\067\073\070\uffcf" +
    "\071\037\072\060\073\061\074\012\075\030\076\024\077" +
    "\076\100\074\001\002\000\072\007\011\014\uffcf\015\032" +
    "\016\023\017\056\024\034\026\033\027\013\031\uffcf\032" +
    "\057\033\054\036\uffcf\037\040\040\uffcf\041\053\042\uffcf" +
    "\043\071\066\026\067\073\070\uffcf\071\037\072\060\073" +
    "\061\074\012\075\030\076\024\077\076\100\074\001\002" +
    "\000\072\007\011\014\uffcf\015\032\016\023\017\056\024" +
    "\034\026\033\027\013\031\uffcf\032\057\033\054\036\uffcf" +
    "\037\040\040\uffcf\041\053\042\uffcf\043\071\066\026\067" +
    "\073\070\uffcf\071\037\072\060\073\061\074\012\075\030" +
    "\076\024\077\076\100\074\001\002\000\066\007\011\014" +
    "\ufff0\015\032\016\023\017\056\024\034\026\033\027\013" +
    "\031\ufff0\032\057\033\054\036\ufff0\037\040\040\ufff0\041" +
    "\053\042\ufff0\066\026\070\ufff0\071\037\072\060\073\061" +
    "\074\012\075\030\076\024\077\020\100\017\001\002\000" +
    "\072\007\011\014\uffcf\015\032\016\023\017\056\024\034" +
    "\026\033\027\013\031\uffcf\032\057\033\054\036\uffcf\037" +
    "\040\040\uffcf\041\053\042\uffcf\043\071\066\026\067\073" +
    "\070\uffcf\071\037\072\060\073\061\074\012\075\030\076" +
    "\024\077\076\100\074\001\002\000\072\007\011\014\uffcf" +
    "\015\032\016\023\017\056\024\034\026\033\027\013\031" +
    "\uffcf\032\057\033\054\036\uffcf\037\040\040\uffcf\041\053" +
    "\042\uffcf\043\071\066\026\067\073\070\uffcf\071\037\072" +
    "\060\073\061\074\012\075\030\076\024\077\076\100\074" +
    "\001\002\000\072\007\011\014\uffcf\015\032\016\023\017" +
    "\056\024\034\026\033\027\013\031\uffcf\032\057\033\054" +
    "\036\uffcf\037\040\040\uffcf\041\053\042\uffcf\043\071\066" +
    "\026\067\073\070\uffcf\071\037\072\060\073\061\074\012" +
    "\075\030\076\024\077\076\100\074\001\002\000\072\007" +
    "\011\014\uffcf\015\032\016\023\017\056\024\034\026\033" +
    "\027\013\031\uffcf\032\057\033\054\036\uffcf\037\040\040" +
    "\uffcf\041\053\042\uffcf\043\071\066\026\067\073\070\uffcf" +
    "\071\037\072\060\073\061\074\012\075\030\076\024\077" +
    "\076\100\074\001\002\000\004\014\123\001\002\000\072" +
    "\007\011\014\uffcf\015\032\016\023\017\056\024\034\026" +
    "\033\027\013\031\uffcf\032\057\033\054\036\uffcf\037\040" +
    "\040\uffcf\041\053\042\uffcf\043\071\066\026\067\073\070" +
    "\uffcf\071\037\072\060\073\061\074\012\075\030\076\024" +
    "\077\076\100\074\001\002\000\072\007\011\014\uffcf\015" +
    "\032\016\023\017\056\024\034\026\033\027\013\031\uffcf" +
    "\032\057\033\054\036\uffcf\037\040\040\uffcf\041\053\042" +
    "\uffcf\043\071\066\026\067\073\070\uffcf\071\037\072\060" +
    "\073\061\074\012\075\030\076\024\077\076\100\074\001" +
    "\002\000\072\007\011\014\uffcf\015\032\016\023\017\056" +
    "\024\034\026\033\027\013\031\uffcf\032\057\033\054\036" +
    "\uffcf\037\040\040\uffcf\041\053\042\uffcf\043\071\066\026" +
    "\067\073\070\uffcf\071\037\072\060\073\061\074\012\075" +
    "\030\076\024\077\076\100\074\001\002\000\072\007\011" +
    "\014\uffcf\015\032\016\023\017\056\024\034\026\033\027" +
    "\013\031\uffcf\032\057\033\054\036\uffcf\037\040\040\uffcf" +
    "\041\053\042\uffcf\043\071\066\026\067\073\070\uffcf\071" +
    "\037\072\060\073\061\074\012\075\030\076\024\077\076" +
    "\100\074\001\002\000\072\007\011\014\uffcf\015\032\016" +
    "\023\017\056\024\034\026\033\027\013\031\uffcf\032\057" +
    "\033\054\036\uffcf\037\040\040\uffcf\041\053\042\uffcf\043" +
    "\071\066\026\067\073\070\uffcf\071\037\072\060\073\061" +
    "\074\012\075\030\076\024\077\076\100\074\001\002\000" +
    "\072\007\011\014\uffcf\015\032\016\023\017\056\024\034" +
    "\026\033\027\013\031\uffcf\032\057\033\054\036\uffcf\037" +
    "\040\040\uffcf\041\053\042\uffcf\043\071\066\026\067\073" +
    "\070\uffcf\071\037\072\060\073\061\074\012\075\030\076" +
    "\024\077\076\100\074\001\002\000\016\014\uffda\031\uffda" +
    "\036\uffda\040\uffda\042\uffda\070\uffda\001\002\000\016\014" +
    "\uffdd\031\uffdd\036\uffdd\040\uffdd\042\uffdd\070\uffdd\001\002" +
    "\000\016\014\uffd9\031\uffd9\036\uffd9\040\uffd9\042\uffd9\070" +
    "\uffd9\001\002\000\016\014\uffe0\031\uffe0\036\uffe0\040\uffe0" +
    "\042\uffe0\070\uffe0\001\002\000\016\014\uffdf\031\uffdf\036" +
    "\uffdf\040\uffdf\042\uffdf\070\uffdf\001\002\000\016\014\uffd6" +
    "\031\uffd6\036\uffd6\040\uffd6\042\uffd6\070\uffd6\001\002\000" +
    "\004\032\124\001\002\000\072\007\uff50\014\uff50\015\uff50" +
    "\016\uff50\017\uff50\024\uff50\026\uff50\027\uff50\031\uff50\032" +
    "\uff50\033\uff50\036\uff50\037\uff50\040\uff50\041\uff50\042\uff50" +
    "\043\uff50\066\uff50\067\uff50\070\uff50\071\uff50\072\uff50\073" +
    "\uff50\074\uff50\075\uff50\076\uff50\077\uff50\100\uff50\001\002" +
    "\000\016\014\uffdc\031\uffdc\036\uffdc\040\uffdc\042\uffdc\070" +
    "\uffdc\001\002\000\016\014\uffd1\031\uffd1\036\uffd1\040\uffd1" +
    "\042\uffd1\070\uffd1\001\002\000\016\014\uffde\031\uffde\036" +
    "\uffde\040\uffde\042\uffde\070\uffde\001\002\000\016\014\uffdb" +
    "\031\uffdb\036\uffdb\040\uffdb\042\uffdb\070\uffdb\001\002\000" +
    "\016\014\uffd0\031\uffd0\036\uffd0\040\uffd0\042\uffd0\070\uffd0" +
    "\001\002\000\016\014\uffd2\031\uffd2\036\uffd2\040\uffd2\042" +
    "\uffd2\070\uffd2\001\002\000\016\014\uffd8\031\uffd8\036\uffd8" +
    "\040\uffd8\042\uffd8\070\uffd8\001\002\000\016\014\uffd5\031" +
    "\uffd5\036\uffd5\040\uffd5\042\uffd5\070\uffd5\001\002\000\016" +
    "\014\uffd7\031\uffd7\036\uffd7\040\uffd7\042\uffd7\070\uffd7\001" +
    "\002\000\016\014\uffd4\031\uffd4\036\uffd4\040\uffd4\042\uffd4" +
    "\070\uffd4\001\002\000\144\004\211\005\uffb1\007\uffb1\014" +
    "\uffb1\015\uffb1\016\uffb1\017\uffb1\024\uffb1\026\uffb1\027\uffb1" +
    "\030\uffb1\031\uffb1\032\uffb1\033\uffb1\035\uffb1\036\uffb1\037" +
    "\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1" +
    "\046\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1\053\212\054" +
    "\uffb1\055\uffb1\056\uffb1\057\uffb1\060\uffb1\061\uffb1\062\uffb1" +
    "\063\uffb1\064\252\066\uffb1\067\uffb1\070\uffb1\071\uffb1\072" +
    "\uffb1\073\uffb1\074\uffb1\075\uffb1\076\uffb1\077\uffb1\100\uffb1" +
    "\001\002\000\120\007\uff3a\014\uff3a\015\uff3a\016\uff3a\017" +
    "\uff3a\024\uff3a\026\uff3a\027\uff3a\031\uff3a\032\uff3a\033\uff3a" +
    "\036\uff3a\037\uff3a\040\uff3a\041\uff3a\042\uff3a\043\uff3a\044" +
    "\145\045\147\046\153\047\142\050\146\051\152\055\151" +
    "\056\144\057\143\060\141\064\150\066\uff3a\067\uff3a\070" +
    "\uff3a\071\uff3a\072\uff3a\073\uff3a\074\uff3a\075\uff3a\076\uff3a" +
    "\077\uff3a\100\uff3a\001\002\000\016\071\037\072\060\073" +
    "\061\074\012\075\063\076\024\001\002\000\016\071\037" +
    "\072\060\073\061\074\012\075\063\076\024\001\002\000" +
    "\016\071\037\072\060\073\061\074\012\075\063\076\024" +
    "\001\002\000\016\071\037\072\060\073\061\074\012\075" +
    "\063\076\024\001\002\000\016\071\037\072\060\073\061" +
    "\074\012\075\063\076\024\001\002\000\016\071\037\072" +
    "\060\073\061\074\012\075\063\076\024\001\002\000\016" +
    "\071\037\072\060\073\061\074\012\075\063\076\024\001" +
    "\002\000\016\071\037\072\060\073\061\074\012\075\206" +
    "\076\024\001\002\000\016\071\037\072\060\073\061\074" +
    "\012\075\063\076\024\001\002\000\016\071\037\072\060" +
    "\073\061\074\012\075\063\076\024\001\002\000\016\071" +
    "\037\072\060\073\061\074\012\075\063\076\024\001\002" +
    "\000\140\005\uff99\007\uff99\014\uff99\015\uff99\016\uff99\017" +
    "\uff99\024\uff99\026\uff99\027\uff99\030\uff99\031\uff99\032\uff99" +
    "\033\uff99\035\uff99\036\uff99\037\uff99\040\uff99\041\uff99\042" +
    "\uff99\043\uff99\044\uff99\045\uff99\046\uff99\047\uff99\050\uff99" +
    "\051\uff99\052\uff99\054\uff99\055\uff99\056\uff99\057\uff99\060" +
    "\uff99\061\uff99\062\uff99\063\uff99\064\uff99\066\uff99\067\uff99" +
    "\070\uff99\071\uff99\072\uff99\073\uff99\074\uff99\075\uff99\076" +
    "\uff99\077\uff99\100\uff99\001\002\000\140\005\uff96\007\uff96" +
    "\014\uff96\015\uff96\016\uff96\017\uff96\024\uff96\026\uff96\027" +
    "\uff96\030\uff96\031\uff96\032\uff96\033\uff96\035\uff96\036\uff96" +
    "\037\uff96\040\uff96\041\uff96\042\uff96\043\uff96\044\uff96\045" +
    "\uff96\046\uff96\047\uff96\050\uff96\051\uff96\052\uff96\054\uff96" +
    "\055\uff96\056\uff96\057\uff96\060\uff96\061\uff96\062\uff96\063" +
    "\uff96\064\uff96\066\uff96\067\uff96\070\uff96\071\uff96\072\uff96" +
    "\073\uff96\074\uff96\075\uff96\076\uff96\077\uff96\100\uff96\001" +
    "\002\000\140\005\uffa6\007\uffa6\014\uffa6\015\uffa6\016\uffa6" +
    "\017\uffa6\024\uffa6\026\uffa6\027\uffa6\030\uffa6\031\uffa6\032" +
    "\uffa6\033\uffa6\035\uffa6\036\uffa6\037\uffa6\040\uffa6\041\uffa6" +
    "\042\uffa6\043\uffa6\044\uffa6\045\uffa6\046\uffa6\047\uffa6\050" +
    "\uffa6\051\uffa6\052\uffa6\054\uffa6\055\uffa6\056\uffa6\057\176" +
    "\060\177\061\uffa6\062\uffa6\063\uffa6\064\173\066\uffa6\067" +
    "\uffa6\070\uffa6\071\uffa6\072\uffa6\073\uffa6\074\uffa6\075\uffa6" +
    "\076\uffa6\077\uffa6\100\uffa6\001\002\000\140\005\uffb0\007" +
    "\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\024\uffb0\026\uffb0" +
    "\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\035\uffb0\036" +
    "\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0" +
    "\045\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0\054" +
    "\uffb0\055\uffb0\056\uffb0\057\164\060\165\061\uffb0\062\uffb0" +
    "\063\uffb0\064\161\066\uffb0\067\uffb0\070\uffb0\071\uffb0\072" +
    "\uffb0\073\uffb0\074\uffb0\075\uffb0\076\uffb0\077\uffb0\100\uffb0" +
    "\001\002\000\140\005\uffb5\007\uffb5\014\uffb5\015\uffb5\016" +
    "\uffb5\017\uffb5\024\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5" +
    "\032\uffb5\033\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5\041" +
    "\uffb5\042\uffb5\043\uffb5\044\145\045\147\046\153\047\142" +
    "\050\146\051\152\052\uffb5\054\uffb5\055\uffb5\056\uffb5\057" +
    "\143\060\141\061\uffb5\062\uffb5\063\uffb5\064\150\066\uffb5" +
    "\067\uffb5\070\uffb5\071\uffb5\072\uffb5\073\uffb5\074\uffb5\075" +
    "\uffb5\076\uffb5\077\uffb5\100\uffb5\001\002\000\016\071\037" +
    "\072\060\073\061\074\012\075\063\076\024\001\002\000" +
    "\016\071\037\072\060\073\061\074\012\075\063\076\024" +
    "\001\002\000\016\071\037\072\060\073\061\074\012\075" +
    "\063\076\024\001\002\000\016\071\037\072\060\073\061" +
    "\074\012\075\063\076\024\001\002\000\016\071\037\072" +
    "\060\073\061\074\012\075\063\076\024\001\002\000\140" +
    "\005\uffa8\007\uffa8\014\uffa8\015\uffa8\016\uffa8\017\uffa8\024" +
    "\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8" +
    "\035\uffa8\036\uffa8\037\uffa8\040\uffa8\041\uffa8\042\uffa8\043" +
    "\uffa8\044\145\045\147\046\153\047\142\050\146\051\152" +
    "\052\uffa8\054\uffa8\055\uffa8\056\uffa8\057\uffa8\060\uffa8\061" +
    "\uffa8\062\uffa8\063\uffa8\064\150\066\uffa8\067\uffa8\070\uffa8" +
    "\071\uffa8\072\uffa8\073\uffa8\074\uffa8\075\uffa8\076\uffa8\077" +
    "\uffa8\100\uffa8\001\002\000\140\005\uffa9\007\uffa9\014\uffa9" +
    "\015\uffa9\016\uffa9\017\uffa9\024\uffa9\026\uffa9\027\uffa9\030" +
    "\uffa9\031\uffa9\032\uffa9\033\uffa9\035\uffa9\036\uffa9\037\uffa9" +
    "\040\uffa9\041\uffa9\042\uffa9\043\uffa9\044\145\045\147\046" +
    "\153\047\142\050\146\051\152\052\uffa9\054\uffa9\055\uffa9" +
    "\056\uffa9\057\uffa9\060\uffa9\061\uffa9\062\uffa9\063\uffa9\064" +
    "\150\066\uffa9\067\uffa9\070\uffa9\071\uffa9\072\uffa9\073\uffa9" +
    "\074\uffa9\075\uffa9\076\uffa9\077\uffa9\100\uffa9\001\002\000" +
    "\140\005\uffaa\007\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa" +
    "\024\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa\033" +
    "\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa" +
    "\043\uffaa\044\145\045\147\046\153\047\142\050\146\051" +
    "\152\052\uffaa\054\uffaa\055\uffaa\056\uffaa\057\143\060\141" +
    "\061\uffaa\062\uffaa\063\uffaa\064\150\066\uffaa\067\uffaa\070" +
    "\uffaa\071\uffaa\072\uffaa\073\uffaa\074\uffaa\075\uffaa\076\uffaa" +
    "\077\uffaa\100\uffaa\001\002\000\140\005\uffab\007\uffab\014" +
    "\uffab\015\uffab\016\uffab\017\uffab\024\uffab\026\uffab\027\uffab" +
    "\030\uffab\031\uffab\032\uffab\033\uffab\035\uffab\036\uffab\037" +
    "\uffab\040\uffab\041\uffab\042\uffab\043\uffab\044\145\045\147" +
    "\046\153\047\142\050\146\051\152\052\uffab\054\uffab\055" +
    "\uffab\056\uffab\057\143\060\141\061\uffab\062\uffab\063\uffab" +
    "\064\150\066\uffab\067\uffab\070\uffab\071\uffab\072\uffab\073" +
    "\uffab\074\uffab\075\uffab\076\uffab\077\uffab\100\uffab\001\002" +
    "\000\140\005\uffa7\007\uffa7\014\uffa7\015\uffa7\016\uffa7\017" +
    "\uffa7\024\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7" +
    "\033\uffa7\035\uffa7\036\uffa7\037\uffa7\040\uffa7\041\uffa7\042" +
    "\uffa7\043\uffa7\044\145\045\147\046\153\047\142\050\146" +
    "\051\152\052\uffa7\054\uffa7\055\uffa7\056\uffa7\057\uffa7\060" +
    "\uffa7\061\uffa7\062\uffa7\063\uffa7\064\uffa7\066\uffa7\067\uffa7" +
    "\070\uffa7\071\uffa7\072\uffa7\073\uffa7\074\uffa7\075\uffa7\076" +
    "\uffa7\077\uffa7\100\uffa7\001\002\000\016\071\037\072\060" +
    "\073\061\074\012\075\063\076\024\001\002\000\016\071" +
    "\037\072\060\073\061\074\012\075\063\076\024\001\002" +
    "\000\016\071\037\072\060\073\061\074\012\075\063\076" +
    "\024\001\002\000\016\071\037\072\060\073\061\074\012" +
    "\075\063\076\024\001\002\000\016\071\037\072\060\073" +
    "\061\074\012\075\063\076\024\001\002\000\140\005\uff9e" +
    "\007\uff9e\014\uff9e\015\uff9e\016\uff9e\017\uff9e\024\uff9e\026" +
    "\uff9e\027\uff9e\030\uff9e\031\uff9e\032\uff9e\033\uff9e\035\uff9e" +
    "\036\uff9e\037\uff9e\040\uff9e\041\uff9e\042\uff9e\043\uff9e\044" +
    "\145\045\147\046\153\047\142\050\146\051\152\052\uff9e" +
    "\054\uff9e\055\uff9e\056\uff9e\057\uff9e\060\uff9e\061\uff9e\062" +
    "\uff9e\063\uff9e\064\150\066\uff9e\067\uff9e\070\uff9e\071\uff9e" +
    "\072\uff9e\073\uff9e\074\uff9e\075\uff9e\076\uff9e\077\uff9e\100" +
    "\uff9e\001\002\000\140\005\uff9f\007\uff9f\014\uff9f\015\uff9f" +
    "\016\uff9f\017\uff9f\024\uff9f\026\uff9f\027\uff9f\030\uff9f\031" +
    "\uff9f\032\uff9f\033\uff9f\035\uff9f\036\uff9f\037\uff9f\040\uff9f" +
    "\041\uff9f\042\uff9f\043\uff9f\044\145\045\147\046\153\047" +
    "\142\050\146\051\152\052\uff9f\054\uff9f\055\uff9f\056\uff9f" +
    "\057\uff9f\060\uff9f\061\uff9f\062\uff9f\063\uff9f\064\150\066" +
    "\uff9f\067\uff9f\070\uff9f\071\uff9f\072\uff9f\073\uff9f\074\uff9f" +
    "\075\uff9f\076\uff9f\077\uff9f\100\uff9f\001\002\000\140\005" +
    "\uffa0\007\uffa0\014\uffa0\015\uffa0\016\uffa0\017\uffa0\024\uffa0" +
    "\026\uffa0\027\uffa0\030\uffa0\031\uffa0\032\uffa0\033\uffa0\035" +
    "\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0\042\uffa0\043\uffa0" +
    "\044\145\045\147\046\153\047\142\050\146\051\152\052" +
    "\uffa0\054\uffa0\055\uffa0\056\uffa0\057\143\060\141\061\uffa0" +
    "\062\uffa0\063\uffa0\064\150\066\uffa0\067\uffa0\070\uffa0\071" +
    "\uffa0\072\uffa0\073\uffa0\074\uffa0\075\uffa0\076\uffa0\077\uffa0" +
    "\100\uffa0\001\002\000\140\005\uffa1\007\uffa1\014\uffa1\015" +
    "\uffa1\016\uffa1\017\uffa1\024\uffa1\026\uffa1\027\uffa1\030\uffa1" +
    "\031\uffa1\032\uffa1\033\uffa1\035\uffa1\036\uffa1\037\uffa1\040" +
    "\uffa1\041\uffa1\042\uffa1\043\uffa1\044\145\045\147\046\153" +
    "\047\142\050\146\051\152\052\uffa1\054\uffa1\055\uffa1\056" +
    "\uffa1\057\143\060\141\061\uffa1\062\uffa1\063\uffa1\064\150" +
    "\066\uffa1\067\uffa1\070\uffa1\071\uffa1\072\uffa1\073\uffa1\074" +
    "\uffa1\075\uffa1\076\uffa1\077\uffa1\100\uffa1\001\002\000\140" +
    "\005\uff9d\007\uff9d\014\uff9d\015\uff9d\016\uff9d\017\uff9d\024" +
    "\uff9d\026\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d\033\uff9d" +
    "\035\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d\042\uff9d\043" +
    "\uff9d\044\145\045\147\046\153\047\142\050\146\051\152" +
    "\052\uff9d\054\uff9d\055\uff9d\056\uff9d\057\uff9d\060\uff9d\061" +
    "\uff9d\062\uff9d\063\uff9d\064\uff9d\066\uff9d\067\uff9d\070\uff9d" +
    "\071\uff9d\072\uff9d\073\uff9d\074\uff9d\075\uff9d\076\uff9d\077" +
    "\uff9d\100\uff9d\001\002\000\006\004\211\053\212\001\002" +
    "\000\104\004\uff87\005\uff87\007\uff87\014\uff87\015\uff87\016" +
    "\uff87\017\uff87\024\uff87\026\uff87\027\uff87\032\uff87\033\uff87" +
    "\037\uff87\041\uff87\042\uff87\043\uff87\052\uff87\053\uff87\054" +
    "\uff87\055\uff87\056\uff87\057\uff87\060\uff87\066\uff87\067\uff87" +
    "\071\uff87\072\uff87\073\uff87\074\uff87\075\uff87\076\uff87\077" +
    "\uff87\100\uff87\001\002\000\140\005\uffa2\007\uffa2\014\uffa2" +
    "\015\uffa2\016\uffa2\017\uffa2\024\uffa2\026\uffa2\027\uffa2\030" +
    "\uffa2\031\uffa2\032\uffa2\033\uffa2\035\uffa2\036\uffa2\037\uffa2" +
    "\040\uffa2\041\uffa2\042\uffa2\043\uffa2\044\uffa2\045\uffa2\046" +
    "\uffa2\047\uffa2\050\uffa2\051\uffa2\052\uffa2\054\uffa2\055\uffa2" +
    "\056\uffa2\057\uffa2\060\uffa2\061\uffa2\062\uffa2\063\uffa2\064" +
    "\uffa2\066\uffa2\067\uffa2\070\uffa2\071\uffa2\072\uffa2\073\uffa2" +
    "\074\uffa2\075\uffa2\076\uffa2\077\uffa2\100\uffa2\001\002\000" +
    "\140\005\uffac\007\uffac\014\uffac\015\uffac\016\uffac\017\uffac" +
    "\024\uffac\026\uffac\027\uffac\030\uffac\031\uffac\032\uffac\033" +
    "\uffac\035\uffac\036\uffac\037\uffac\040\uffac\041\uffac\042\uffac" +
    "\043\uffac\044\uffac\045\uffac\046\uffac\047\uffac\050\uffac\051" +
    "\uffac\052\uffac\054\uffac\055\uffac\056\uffac\057\uffac\060\uffac" +
    "\061\uffac\062\uffac\063\uffac\064\uffac\066\uffac\067\uffac\070" +
    "\uffac\071\uffac\072\uffac\073\uffac\074\uffac\075\uffac\076\uffac" +
    "\077\uffac\100\uffac\001\002\000\016\071\037\072\060\073" +
    "\061\074\012\075\063\076\024\001\002\000\020\054\uff8c" +
    "\071\037\072\060\073\061\074\012\075\206\076\024\001" +
    "\002\000\004\054\227\001\002\000\016\052\217\054\uff92" +
    "\055\215\056\216\057\220\060\221\001\002\000\020\054" +
    "\uff8c\071\037\072\060\073\061\074\012\075\206\076\024" +
    "\001\002\000\020\054\uff8c\071\037\072\060\073\061\074" +
    "\012\075\206\076\024\001\002\000\020\054\uff8c\071\037" +
    "\072\060\073\061\074\012\075\206\076\024\001\002\000" +
    "\020\054\uff8c\071\037\072\060\073\061\074\012\075\206" +
    "\076\024\001\002\000\020\054\uff8c\071\037\072\060\073" +
    "\061\074\012\075\206\076\024\001\002\000\004\054\uff8d" +
    "\001\002\000\004\054\uff8e\001\002\000\004\054\uff91\001" +
    "\002\000\004\054\uff8f\001\002\000\004\054\uff90\001\002" +
    "\000\140\005\uff94\007\uff94\014\uff94\015\uff94\016\uff94\017" +
    "\uff94\024\uff94\026\uff94\027\uff94\030\uff94\031\uff94\032\uff94" +
    "\033\uff94\035\uff94\036\uff94\037\uff94\040\uff94\041\uff94\042" +
    "\uff94\043\uff94\044\uff94\045\uff94\046\uff94\047\uff94\050\uff94" +
    "\051\uff94\052\uff94\054\uff94\055\uff94\056\uff94\057\uff94\060" +
    "\uff94\061\uff94\062\uff94\063\uff94\064\uff94\066\uff94\067\uff94" +
    "\070\uff94\071\uff94\072\uff94\073\uff94\074\uff94\075\uff94\076" +
    "\uff94\077\uff94\100\uff94\001\002\000\004\005\234\001\002" +
    "\000\034\005\uff76\044\145\045\147\046\153\047\142\050" +
    "\146\051\152\052\232\055\151\056\144\057\143\060\141" +
    "\064\150\001\002\000\016\071\037\072\060\073\061\074" +
    "\012\075\063\076\024\001\002\000\004\005\uff75\001\002" +
    "\000\140\005\uff93\007\uff93\014\uff93\015\uff93\016\uff93\017" +
    "\uff93\024\uff93\026\uff93\027\uff93\030\uff93\031\uff93\032\uff93" +
    "\033\uff93\035\uff93\036\uff93\037\uff93\040\uff93\041\uff93\042" +
    "\uff93\043\uff93\044\uff93\045\uff93\046\uff93\047\uff93\050\uff93" +
    "\051\uff93\052\uff93\054\uff93\055\uff93\056\uff93\057\uff93\060" +
    "\uff93\061\uff93\062\uff93\063\uff93\064\uff93\066\uff93\067\uff93" +
    "\070\uff93\071\uff93\072\uff93\073\uff93\074\uff93\075\uff93\076" +
    "\uff93\077\uff93\100\uff93\001\002\000\140\005\uff9a\007\uff9a" +
    "\014\uff9a\015\uff9a\016\uff9a\017\uff9a\024\uff9a\026\uff9a\027" +
    "\uff9a\030\uff9a\031\uff9a\032\uff9a\033\uff9a\035\uff9a\036\uff9a" +
    "\037\uff9a\040\uff9a\041\uff9a\042\uff9a\043\uff9a\044\uff9a\045" +
    "\uff9a\046\uff9a\047\uff9a\050\uff9a\051\uff9a\052\uff9a\054\uff9a" +
    "\055\uff9a\056\uff9a\057\uff9a\060\uff9a\061\uff9a\062\uff9a\063" +
    "\uff9a\064\uff9a\066\uff9a\067\uff9a\070\uff9a\071\uff9a\072\uff9a" +
    "\073\uff9a\074\uff9a\075\uff9a\076\uff9a\077\uff9a\100\uff9a\001" +
    "\002\000\140\005\uff97\007\uff97\014\uff97\015\uff97\016\uff97" +
    "\017\uff97\024\uff97\026\uff97\027\uff97\030\uff97\031\uff97\032" +
    "\uff97\033\uff97\035\uff97\036\uff97\037\uff97\040\uff97\041\uff97" +
    "\042\uff97\043\uff97\044\uff97\045\uff97\046\uff97\047\uff97\050" +
    "\uff97\051\uff97\052\uff97\054\uff97\055\uff97\056\uff97\057\uff97" +
    "\060\uff97\061\uff97\062\uff97\063\uff97\064\uff97\066\uff97\067" +
    "\uff97\070\uff97\071\uff97\072\uff97\073\uff97\074\uff97\075\uff97" +
    "\076\uff97\077\uff97\100\uff97\001\002\000\140\005\uff9b\007" +
    "\uff9b\014\uff9b\015\uff9b\016\uff9b\017\uff9b\024\uff9b\026\uff9b" +
    "\027\uff9b\030\uff9b\031\uff9b\032\uff9b\033\uff9b\035\uff9b\036" +
    "\uff9b\037\uff9b\040\uff9b\041\uff9b\042\uff9b\043\uff9b\044\uff9b" +
    "\045\uff9b\046\uff9b\047\uff9b\050\uff9b\051\uff9b\052\uff9b\054" +
    "\uff9b\055\uff9b\056\uff9b\057\uff9b\060\uff9b\061\uff9b\062\uff9b" +
    "\063\uff9b\064\uff9b\066\uff9b\067\uff9b\070\uff9b\071\uff9b\072" +
    "\uff9b\073\uff9b\074\uff9b\075\uff9b\076\uff9b\077\uff9b\100\uff9b" +
    "\001\002\000\140\005\uffa5\007\uffa5\014\uffa5\015\uffa5\016" +
    "\uffa5\017\uffa5\024\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5" +
    "\032\uffa5\033\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5\041" +
    "\uffa5\042\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5" +
    "\050\uffa5\051\uffa5\052\uffa5\054\uffa5\055\uffa5\056\uffa5\057" +
    "\176\060\177\061\uffa5\062\uffa5\063\uffa5\064\173\066\uffa5" +
    "\067\uffa5\070\uffa5\071\uffa5\072\uffa5\073\uffa5\074\uffa5\075" +
    "\uffa5\076\uffa5\077\uffa5\100\uffa5\001\002\000\140\005\uffaf" +
    "\007\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf\024\uffaf\026" +
    "\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf\035\uffaf" +
    "\036\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044" +
    "\uffaf\045\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf" +
    "\054\uffaf\055\uffaf\056\uffaf\057\164\060\165\061\uffaf\062" +
    "\uffaf\063\uffaf\064\161\066\uffaf\067\uffaf\070\uffaf\071\uffaf" +
    "\072\uffaf\073\uffaf\074\uffaf\075\uffaf\076\uffaf\077\uffaf\100" +
    "\uffaf\001\002\000\140\005\uffb4\007\uffb4\014\uffb4\015\uffb4" +
    "\016\uffb4\017\uffb4\024\uffb4\026\uffb4\027\uffb4\030\uffb4\031" +
    "\uffb4\032\uffb4\033\uffb4\035\uffb4\036\uffb4\037\uffb4\040\uffb4" +
    "\041\uffb4\042\uffb4\043\uffb4\044\145\045\147\046\153\047" +
    "\142\050\146\051\152\052\uffb4\054\uffb4\055\uffb4\056\uffb4" +
    "\057\143\060\141\061\uffb4\062\uffb4\063\uffb4\064\150\066" +
    "\uffb4\067\uffb4\070\uffb4\071\uffb4\072\uffb4\073\uffb4\074\uffb4" +
    "\075\uffb4\076\uffb4\077\uffb4\100\uffb4\001\002\000\140\005" +
    "\uffa4\007\uffa4\014\uffa4\015\uffa4\016\uffa4\017\uffa4\024\uffa4" +
    "\026\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4\033\uffa4\035" +
    "\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4" +
    "\044\uffa4\045\uffa4\046\uffa4\047\uffa4\050\uffa4\051\uffa4\052" +
    "\uffa4\054\uffa4\055\uffa4\056\uffa4\057\uffa4\060\uffa4\061\uffa4" +
    "\062\uffa4\063\uffa4\064\173\066\uffa4\067\uffa4\070\uffa4\071" +
    "\uffa4\072\uffa4\073\uffa4\074\uffa4\075\uffa4\076\uffa4\077\uffa4" +
    "\100\uffa4\001\002\000\140\005\uffae\007\uffae\014\uffae\015" +
    "\uffae\016\uffae\017\uffae\024\uffae\026\uffae\027\uffae\030\uffae" +
    "\031\uffae\032\uffae\033\uffae\035\uffae\036\uffae\037\uffae\040" +
    "\uffae\041\uffae\042\uffae\043\uffae\044\uffae\045\uffae\046\uffae" +
    "\047\uffae\050\uffae\051\uffae\052\uffae\054\uffae\055\uffae\056" +
    "\uffae\057\uffae\060\uffae\061\uffae\062\uffae\063\uffae\064\161" +
    "\066\uffae\067\uffae\070\uffae\071\uffae\072\uffae\073\uffae\074" +
    "\uffae\075\uffae\076\uffae\077\uffae\100\uffae\001\002\000\140" +
    "\005\uffb3\007\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3\024" +
    "\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3" +
    "\035\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043" +
    "\uffb3\044\145\045\147\046\153\047\142\050\146\051\152" +
    "\052\uffb3\054\uffb3\055\uffb3\056\uffb3\057\uffb3\060\uffb3\061" +
    "\uffb3\062\uffb3\063\uffb3\064\150\066\uffb3\067\uffb3\070\uffb3" +
    "\071\uffb3\072\uffb3\073\uffb3\074\uffb3\075\uffb3\076\uffb3\077" +
    "\uffb3\100\uffb3\001\002\000\140\005\uff98\007\uff98\014\uff98" +
    "\015\uff98\016\uff98\017\uff98\024\uff98\026\uff98\027\uff98\030" +
    "\uff98\031\uff98\032\uff98\033\uff98\035\uff98\036\uff98\037\uff98" +
    "\040\uff98\041\uff98\042\uff98\043\uff98\044\uff98\045\uff98\046" +
    "\uff98\047\uff98\050\uff98\051\uff98\052\uff98\054\uff98\055\uff98" +
    "\056\uff98\057\uff98\060\uff98\061\uff98\062\uff98\063\uff98\064" +
    "\uff98\066\uff98\067\uff98\070\uff98\071\uff98\072\uff98\073\uff98" +
    "\074\uff98\075\uff98\076\uff98\077\uff98\100\uff98\001\002\000" +
    "\140\005\uffa3\007\uffa3\014\uffa3\015\uffa3\016\uffa3\017\uffa3" +
    "\024\uffa3\026\uffa3\027\uffa3\030\uffa3\031\uffa3\032\uffa3\033" +
    "\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3\041\uffa3\042\uffa3" +
    "\043\uffa3\044\uffa3\045\uffa3\046\uffa3\047\uffa3\050\uffa3\051" +
    "\uffa3\052\uffa3\054\uffa3\055\uffa3\056\uffa3\057\uffa3\060\uffa3" +
    "\061\uffa3\062\uffa3\063\uffa3\064\173\066\uffa3\067\uffa3\070" +
    "\uffa3\071\uffa3\072\uffa3\073\uffa3\074\uffa3\075\uffa3\076\uffa3" +
    "\077\uffa3\100\uffa3\001\002\000\140\005\uffad\007\uffad\014" +
    "\uffad\015\uffad\016\uffad\017\uffad\024\uffad\026\uffad\027\uffad" +
    "\030\uffad\031\uffad\032\uffad\033\uffad\035\uffad\036\uffad\037" +
    "\uffad\040\uffad\041\uffad\042\uffad\043\uffad\044\uffad\045\uffad" +
    "\046\uffad\047\uffad\050\uffad\051\uffad\052\uffad\054\uffad\055" +
    "\uffad\056\uffad\057\uffad\060\uffad\061\uffad\062\uffad\063\uffad" +
    "\064\161\066\uffad\067\uffad\070\uffad\071\uffad\072\uffad\073" +
    "\uffad\074\uffad\075\uffad\076\uffad\077\uffad\100\uffad\001\002" +
    "\000\140\005\uffb2\007\uffb2\014\uffb2\015\uffb2\016\uffb2\017" +
    "\uffb2\024\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2" +
    "\033\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2\042" +
    "\uffb2\043\uffb2\044\145\045\147\046\153\047\142\050\146" +
    "\051\152\052\uffb2\054\uffb2\055\uffb2\056\uffb2\057\uffb2\060" +
    "\uffb2\061\uffb2\062\uffb2\063\uffb2\064\150\066\uffb2\067\uffb2" +
    "\070\uffb2\071\uffb2\072\uffb2\073\uffb2\074\uffb2\075\uffb2\076" +
    "\uffb2\077\uffb2\100\uffb2\001\002\000\016\071\037\072\060" +
    "\073\061\074\012\075\063\076\024\001\002\000\140\005" +
    "\uff9c\007\uff9c\014\uff9c\015\uff9c\016\uff9c\017\uff9c\024\uff9c" +
    "\026\uff9c\027\uff9c\030\uff9c\031\uff9c\032\uff9c\033\uff9c\035" +
    "\uff9c\036\uff9c\037\uff9c\040\uff9c\041\uff9c\042\uff9c\043\uff9c" +
    "\044\145\045\147\046\153\047\142\050\146\051\152\052" +
    "\uff9c\054\uff9c\055\uff9c\056\uff9c\057\uff9c\060\uff9c\061\uff9c" +
    "\062\uff9c\063\uff9c\064\uff9c\066\uff9c\067\uff9c\070\uff9c\071" +
    "\uff9c\072\uff9c\073\uff9c\074\uff9c\075\uff9c\076\uff9c\077\uff9c" +
    "\100\uff9c\001\002\000\016\014\uffd3\031\uffd3\036\uffd3\040" +
    "\uffd3\042\uffd3\070\uffd3\001\002\000\072\007\uff3c\014\uff3c" +
    "\015\uff3c\016\uff3c\017\uff3c\024\uff3c\026\uff3c\027\uff3c\031" +
    "\uff3c\032\uff3c\033\uff3c\036\uff3c\037\uff3c\040\uff3c\041\uff3c" +
    "\042\uff3c\043\uff3c\066\uff3c\067\uff3c\070\uff3c\071\uff3c\072" +
    "\uff3c\073\uff3c\074\uff3c\075\uff3c\076\uff3c\077\uff3c\100\uff3c" +
    "\001\002\000\072\007\uff3b\014\uff3b\015\uff3b\016\uff3b\017" +
    "\uff3b\024\uff3b\026\uff3b\027\uff3b\031\uff3b\032\uff3b\033\uff3b" +
    "\036\uff3b\037\uff3b\040\uff3b\041\uff3b\042\uff3b\043\uff3b\066" +
    "\uff3b\067\uff3b\070\uff3b\071\uff3b\072\uff3b\073\uff3b\074\uff3b" +
    "\075\uff3b\076\uff3b\077\uff3b\100\uff3b\001\002\000\016\071" +
    "\037\072\060\073\061\074\012\075\063\076\024\001\002" +
    "\000\016\071\037\072\060\073\061\074\012\075\063\076" +
    "\024\001\002\000\016\071\037\072\060\073\061\074\012" +
    "\075\063\076\024\001\002\000\016\071\037\072\060\073" +
    "\061\074\012\075\063\076\024\001\002\000\016\071\037" +
    "\072\060\073\061\074\012\075\063\076\024\001\002\000" +
    "\016\071\037\072\060\073\061\074\012\075\063\076\024" +
    "\001\002\000\130\007\uff59\014\uff59\015\uff59\016\uff59\017" +
    "\uff59\024\uff59\026\uff59\027\uff59\030\uff59\031\uff59\032\uff59" +
    "\033\uff59\036\uff59\037\uff59\040\uff59\041\uff59\042\uff59\043" +
    "\uff59\044\uff99\045\uff99\046\uff99\047\uff99\050\uff99\051\uff99" +
    "\055\uff99\056\uff99\057\uff99\060\uff99\061\271\062\270\063" +
    "\267\064\uff99\066\uff59\067\uff59\070\uff59\071\uff59\072\uff59" +
    "\073\uff59\074\uff59\075\uff59\076\uff59\077\uff59\100\uff59\001" +
    "\002\000\074\007\uff61\014\uff61\015\uff61\016\uff61\017\uff61" +
    "\024\uff61\026\uff61\027\uff61\030\uff61\031\uff61\032\uff61\033" +
    "\uff61\036\uff61\037\uff61\040\uff61\041\uff61\042\uff61\043\uff61" +
    "\066\uff61\067\uff61\070\uff61\071\uff61\072\uff61\073\uff61\074" +
    "\uff61\075\uff61\076\uff61\077\uff61\100\uff61\001\002\000\016" +
    "\071\037\072\060\073\061\074\012\075\063\076\024\001" +
    "\002\000\016\071\037\072\060\073\061\074\012\075\063" +
    "\076\024\001\002\000\016\071\037\072\060\073\061\074" +
    "\012\075\063\076\024\001\002\000\074\007\uff5c\014\uff5c" +
    "\015\uff5c\016\uff5c\017\uff5c\024\uff5c\026\uff5c\027\uff5c\030" +
    "\uff5c\031\uff5c\032\uff5c\033\uff5c\036\uff5c\037\uff5c\040\uff5c" +
    "\041\uff5c\042\uff5c\043\uff5c\066\uff5c\067\uff5c\070\uff5c\071" +
    "\uff5c\072\uff5c\073\uff5c\074\uff5c\075\uff5c\076\uff5c\077\uff5c" +
    "\100\uff5c\001\002\000\074\007\uff5b\014\uff5b\015\uff5b\016" +
    "\uff5b\017\uff5b\024\uff5b\026\uff5b\027\uff5b\030\uff5b\031\uff5b" +
    "\032\uff5b\033\uff5b\036\uff5b\037\uff5b\040\uff5b\041\uff5b\042" +
    "\uff5b\043\uff5b\066\uff5b\067\uff5b\070\uff5b\071\uff5b\072\uff5b" +
    "\073\uff5b\074\uff5b\075\uff5b\076\uff5b\077\uff5b\100\uff5b\001" +
    "\002\000\074\007\uff5a\014\uff5a\015\uff5a\016\uff5a\017\uff5a" +
    "\024\uff5a\026\uff5a\027\uff5a\030\uff5a\031\uff5a\032\uff5a\033" +
    "\uff5a\036\uff5a\037\uff5a\040\uff5a\041\uff5a\042\uff5a\043\uff5a" +
    "\066\uff5a\067\uff5a\070\uff5a\071\uff5a\072\uff5a\073\uff5a\074" +
    "\uff5a\075\uff5a\076\uff5a\077\uff5a\100\uff5a\001\002\000\130" +
    "\007\uff59\014\uff59\015\uff59\016\uff59\017\uff59\024\uff59\026" +
    "\uff59\027\uff59\030\uff59\031\uff59\032\uff59\033\uff59\036\uff59" +
    "\037\uff59\040\uff59\041\uff59\042\uff59\043\uff59\044\uff96\045" +
    "\uff96\046\uff96\047\uff96\050\uff96\051\uff96\055\uff96\056\uff96" +
    "\057\uff96\060\uff96\061\271\062\270\063\267\064\uff96\066" +
    "\uff59\067\uff59\070\uff59\071\uff59\072\uff59\073\uff59\074\uff59" +
    "\075\uff59\076\uff59\077\uff59\100\uff59\001\002\000\074\007" +
    "\uff5e\014\uff5e\015\uff5e\016\uff5e\017\uff5e\024\uff5e\026\uff5e" +
    "\027\uff5e\030\uff5e\031\uff5e\032\uff5e\033\uff5e\036\uff5e\037" +
    "\uff5e\040\uff5e\041\uff5e\042\uff5e\043\uff5e\066\uff5e\067\uff5e" +
    "\070\uff5e\071\uff5e\072\uff5e\073\uff5e\074\uff5e\075\uff5e\076" +
    "\uff5e\077\uff5e\100\uff5e\001\002\000\130\007\uff59\014\uff59" +
    "\015\uff59\016\uff59\017\uff59\024\uff59\026\uff59\027\uff59\030" +
    "\uff59\031\uff59\032\uff59\033\uff59\036\uff59\037\uff59\040\uff59" +
    "\041\uff59\042\uff59\043\uff59\044\uff9a\045\uff9a\046\uff9a\047" +
    "\uff9a\050\uff9a\051\uff9a\055\uff9a\056\uff9a\057\uff9a\060\uff9a" +
    "\061\271\062\270\063\267\064\uff9a\066\uff59\067\uff59\070" +
    "\uff59\071\uff59\072\uff59\073\uff59\074\uff59\075\uff59\076\uff59" +
    "\077\uff59\100\uff59\001\002\000\074\007\uff62\014\uff62\015" +
    "\uff62\016\uff62\017\uff62\024\uff62\026\uff62\027\uff62\030\uff62" +
    "\031\uff62\032\uff62\033\uff62\036\uff62\037\uff62\040\uff62\041" +
    "\uff62\042\uff62\043\uff62\066\uff62\067\uff62\070\uff62\071\uff62" +
    "\072\uff62\073\uff62\074\uff62\075\uff62\076\uff62\077\uff62\100" +
    "\uff62\001\002\000\130\007\uff59\014\uff59\015\uff59\016\uff59" +
    "\017\uff59\024\uff59\026\uff59\027\uff59\030\uff59\031\uff59\032" +
    "\uff59\033\uff59\036\uff59\037\uff59\040\uff59\041\uff59\042\uff59" +
    "\043\uff59\044\uff97\045\uff97\046\uff97\047\uff97\050\uff97\051" +
    "\uff97\055\uff97\056\uff97\057\uff97\060\uff97\061\271\062\270" +
    "\063\267\064\uff97\066\uff59\067\uff59\070\uff59\071\uff59\072" +
    "\uff59\073\uff59\074\uff59\075\uff59\076\uff59\077\uff59\100\uff59" +
    "\001\002\000\074\007\uff5f\014\uff5f\015\uff5f\016\uff5f\017" +
    "\uff5f\024\uff5f\026\uff5f\027\uff5f\030\uff5f\031\uff5f\032\uff5f" +
    "\033\uff5f\036\uff5f\037\uff5f\040\uff5f\041\uff5f\042\uff5f\043" +
    "\uff5f\066\uff5f\067\uff5f\070\uff5f\071\uff5f\072\uff5f\073\uff5f" +
    "\074\uff5f\075\uff5f\076\uff5f\077\uff5f\100\uff5f\001\002\000" +
    "\130\007\uff59\014\uff59\015\uff59\016\uff59\017\uff59\024\uff59" +
    "\026\uff59\027\uff59\030\uff59\031\uff59\032\uff59\033\uff59\036" +
    "\uff59\037\uff59\040\uff59\041\uff59\042\uff59\043\uff59\044\uff9b" +
    "\045\uff9b\046\uff9b\047\uff9b\050\uff9b\051\uff9b\055\uff9b\056" +
    "\uff9b\057\uff9b\060\uff9b\061\271\062\270\063\267\064\uff9b" +
    "\066\uff59\067\uff59\070\uff59\071\uff59\072\uff59\073\uff59\074" +
    "\uff59\075\uff59\076\uff59\077\uff59\100\uff59\001\002\000\074" +
    "\007\uff63\014\uff63\015\uff63\016\uff63\017\uff63\024\uff63\026" +
    "\uff63\027\uff63\030\uff63\031\uff63\032\uff63\033\uff63\036\uff63" +
    "\037\uff63\040\uff63\041\uff63\042\uff63\043\uff63\066\uff63\067" +
    "\uff63\070\uff63\071\uff63\072\uff63\073\uff63\074\uff63\075\uff63" +
    "\076\uff63\077\uff63\100\uff63\001\002\000\130\007\uff59\014" +
    "\uff59\015\uff59\016\uff59\017\uff59\024\uff59\026\uff59\027\uff59" +
    "\030\uff59\031\uff59\032\uff59\033\uff59\036\uff59\037\uff59\040" +
    "\uff59\041\uff59\042\uff59\043\uff59\044\uff98\045\uff98\046\uff98" +
    "\047\uff98\050\uff98\051\uff98\055\uff98\056\uff98\057\uff98\060" +
    "\uff98\061\271\062\270\063\267\064\uff98\066\uff59\067\uff59" +
    "\070\uff59\071\uff59\072\uff59\073\uff59\074\uff59\075\uff59\076" +
    "\uff59\077\uff59\100\uff59\001\002\000\074\007\uff60\014\uff60" +
    "\015\uff60\016\uff60\017\uff60\024\uff60\026\uff60\027\uff60\030" +
    "\uff60\031\uff60\032\uff60\033\uff60\036\uff60\037\uff60\040\uff60" +
    "\041\uff60\042\uff60\043\uff60\066\uff60\067\uff60\070\uff60\071" +
    "\uff60\072\uff60\073\uff60\074\uff60\075\uff60\076\uff60\077\uff60" +
    "\100\uff60\001\002\000\016\071\037\072\060\073\061\074" +
    "\012\075\206\076\024\001\002\000\004\052\311\001\002" +
    "\000\016\071\037\072\060\073\061\074\012\075\206\076" +
    "\024\001\002\000\004\005\313\001\002\000\140\005\uff95" +
    "\007\uff95\014\uff95\015\uff95\016\uff95\017\uff95\024\uff95\026" +
    "\uff95\027\uff95\030\uff95\031\uff95\032\uff95\033\uff95\035\uff95" +
    "\036\uff95\037\uff95\040\uff95\041\uff95\042\uff95\043\uff95\044" +
    "\uff95\045\uff95\046\uff95\047\uff95\050\uff95\051\uff95\052\uff95" +
    "\054\uff95\055\uff95\056\uff95\057\uff95\060\uff95\061\uff95\062" +
    "\uff95\063\uff95\064\uff95\066\uff95\067\uff95\070\uff95\071\uff95" +
    "\072\uff95\073\uff95\074\uff95\075\uff95\076\uff95\077\uff95\100" +
    "\uff95\001\002\000\016\014\ufffb\031\ufffb\036\ufffb\040\ufffb" +
    "\042\ufffb\070\ufffb\001\002\000\004\010\316\001\002\000" +
    "\016\011\323\012\317\020\321\021\320\022\322\023\324" +
    "\001\002\000\100\007\uffc4\014\uffc4\015\uffc4\016\uffc4\017" +
    "\uffc4\024\uffc4\026\uffc4\027\uffc4\031\uffc4\032\uffc4\033\uffc4" +
    "\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\051" +
    "\uffc4\052\uffc4\054\uffc4\066\uffc4\067\uffc4\070\uffc4\071\uffc4" +
    "\072\uffc4\073\uffc4\074\uffc4\075\uffc4\076\uffc4\077\uffc4\100" +
    "\uffc4\001\002\000\100\007\uffc1\014\uffc1\015\uffc1\016\uffc1" +
    "\017\uffc1\024\uffc1\026\uffc1\027\uffc1\031\uffc1\032\uffc1\033" +
    "\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1" +
    "\051\uffc1\052\uffc1\054\uffc1\066\uffc1\067\uffc1\070\uffc1\071" +
    "\uffc1\072\uffc1\073\uffc1\074\uffc1\075\uffc1\076\uffc1\077\uffc1" +
    "\100\uffc1\001\002\000\100\007\uffc3\014\uffc3\015\uffc3\016" +
    "\uffc3\017\uffc3\024\uffc3\026\uffc3\027\uffc3\031\uffc3\032\uffc3" +
    "\033\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043" +
    "\uffc3\051\uffc3\052\uffc3\054\uffc3\066\uffc3\067\uffc3\070\uffc3" +
    "\071\uffc3\072\uffc3\073\uffc3\074\uffc3\075\uffc3\076\uffc3\077" +
    "\uffc3\100\uffc3\001\002\000\100\007\uffc2\014\uffc2\015\uffc2" +
    "\016\uffc2\017\uffc2\024\uffc2\026\uffc2\027\uffc2\031\uffc2\032" +
    "\uffc2\033\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2" +
    "\043\uffc2\051\uffc2\052\uffc2\054\uffc2\066\uffc2\067\uffc2\070" +
    "\uffc2\071\uffc2\072\uffc2\073\uffc2\074\uffc2\075\uffc2\076\uffc2" +
    "\077\uffc2\100\uffc2\001\002\000\100\007\uffc5\014\uffc5\015" +
    "\uffc5\016\uffc5\017\uffc5\024\uffc5\026\uffc5\027\uffc5\031\uffc5" +
    "\032\uffc5\033\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042" +
    "\uffc5\043\uffc5\051\uffc5\052\uffc5\054\uffc5\066\uffc5\067\uffc5" +
    "\070\uffc5\071\uffc5\072\uffc5\073\uffc5\074\uffc5\075\uffc5\076" +
    "\uffc5\077\uffc5\100\uffc5\001\002\000\100\007\uffc0\014\uffc0" +
    "\015\uffc0\016\uffc0\017\uffc0\024\uffc0\026\uffc0\027\uffc0\031" +
    "\uffc0\032\uffc0\033\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0" +
    "\042\uffc0\043\uffc0\051\uffc0\052\uffc0\054\uffc0\066\uffc0\067" +
    "\uffc0\070\uffc0\071\uffc0\072\uffc0\073\uffc0\074\uffc0\075\uffc0" +
    "\076\uffc0\077\uffc0\100\uffc0\001\002\000\004\051\326\001" +
    "\002\000\006\071\331\072\330\001\002\000\004\034\332" +
    "\001\002\000\062\007\uff84\015\uff84\016\uff84\017\uff84\024" +
    "\uff84\026\uff84\027\uff84\032\uff84\033\uff84\034\uff84\036\uff84" +
    "\037\uff84\041\uff84\043\uff84\066\uff84\067\uff84\071\uff84\072" +
    "\uff84\073\uff84\074\uff84\075\uff84\076\uff84\077\uff84\100\uff84" +
    "\001\002\000\062\007\uff85\015\uff85\016\uff85\017\uff85\024" +
    "\uff85\026\uff85\027\uff85\032\uff85\033\uff85\034\uff85\036\uff85" +
    "\037\uff85\041\uff85\043\uff85\066\uff85\067\uff85\071\uff85\072" +
    "\uff85\073\uff85\074\uff85\075\uff85\076\uff85\077\uff85\100\uff85" +
    "\001\002\000\016\071\037\072\060\073\061\074\012\075" +
    "\063\076\024\001\002\000\032\035\334\044\145\045\147" +
    "\046\153\047\142\050\146\051\152\055\151\056\144\057" +
    "\143\060\141\064\150\001\002\000\016\055\335\056\337" +
    "\057\340\060\341\071\uff49\072\uff49\001\002\000\006\071" +
    "\uff4d\072\uff4d\001\002\000\006\071\331\072\330\001\002" +
    "\000\006\071\uff4c\072\uff4c\001\002\000\006\071\uff4b\072" +
    "\uff4b\001\002\000\006\071\uff4a\072\uff4a\001\002\000\060" +
    "\007\uff4f\015\uff4f\016\uff4f\017\uff4f\024\uff4f\026\uff4f\027" +
    "\uff4f\032\uff4f\033\uff4f\036\uff4f\037\uff4f\041\uff4f\043\uff4f" +
    "\066\uff4f\067\uff4f\071\uff4f\072\uff4f\073\uff4f\074\uff4f\075" +
    "\uff4f\076\uff4f\077\uff4f\100\uff4f\001\002\000\060\007\011" +
    "\015\032\016\023\017\056\024\034\026\033\027\013\032" +
    "\057\033\054\036\uffcf\037\040\041\053\043\071\066\026" +
    "\067\073\071\037\072\060\073\061\074\012\075\030\076" +
    "\024\077\076\100\074\001\002\000\004\036\345\001\002" +
    "\000\072\007\uff4e\014\uff4e\015\uff4e\016\uff4e\017\uff4e\024" +
    "\uff4e\026\uff4e\027\uff4e\031\uff4e\032\uff4e\033\uff4e\036\uff4e" +
    "\037\uff4e\040\uff4e\041\uff4e\042\uff4e\043\uff4e\066\uff4e\067" +
    "\uff4e\070\uff4e\071\uff4e\072\uff4e\073\uff4e\074\uff4e\075\uff4e" +
    "\076\uff4e\077\uff4e\100\uff4e\001\002\000\004\075\347\001" +
    "\002\000\004\042\uff46\001\002\000\004\042\351\001\002" +
    "\000\016\071\037\072\060\073\061\074\012\075\206\076" +
    "\024\001\002\000\062\007\uff45\014\uff45\015\uff45\016\uff45" +
    "\017\uff45\024\uff45\026\uff45\027\uff45\032\uff45\033\uff45\037" +
    "\uff45\041\uff45\042\uff45\043\uff45\066\uff45\067\uff45\071\uff45" +
    "\072\uff45\073\uff45\074\uff45\075\uff45\076\uff45\077\uff45\100" +
    "\uff45\001\002\000\062\007\011\014\uffcf\015\032\016\023" +
    "\017\056\024\034\026\033\027\013\032\057\033\054\037" +
    "\040\041\053\042\uffcf\043\071\066\026\067\073\071\037" +
    "\072\060\073\061\074\012\075\030\076\024\077\076\100" +
    "\074\001\002\000\006\014\uff44\042\uff44\001\002\000\006" +
    "\014\uff3d\042\356\001\002\000\020\031\363\071\037\072" +
    "\060\073\061\074\012\075\206\076\024\001\002\000\004" +
    "\014\360\001\002\000\004\041\361\001\002\000\072\007" +
    "\uff43\014\uff43\015\uff43\016\uff43\017\uff43\024\uff43\026\uff43" +
    "\027\uff43\031\uff43\032\uff43\033\uff43\036\uff43\037\uff43\040" +
    "\uff43\041\uff43\042\uff43\043\uff43\066\uff43\067\uff43\070\uff43" +
    "\071\uff43\072\uff43\073\uff43\074\uff43\075\uff43\076\uff43\077" +
    "\uff43\100\uff43\001\002\000\062\007\uff42\014\uff42\015\uff42" +
    "\016\uff42\017\uff42\024\uff42\026\uff42\027\uff42\032\uff42\033" +
    "\uff42\037\uff42\041\uff42\042\uff42\043\uff42\066\uff42\067\uff42" +
    "\071\uff42\072\uff42\073\uff42\074\uff42\075\uff42\076\uff42\077" +
    "\uff42\100\uff42\001\002\000\060\007\uff3f\014\uff3f\015\uff3f" +
    "\016\uff3f\017\uff3f\024\uff3f\026\uff3f\027\uff3f\032\uff3f\033" +
    "\uff3f\037\uff3f\041\uff3f\043\uff3f\066\uff3f\067\uff3f\071\uff3f" +
    "\072\uff3f\073\uff3f\074\uff3f\075\uff3f\076\uff3f\077\uff3f\100" +
    "\uff3f\001\002\000\060\007\011\014\uffcf\015\032\016\023" +
    "\017\056\024\034\026\033\027\013\032\057\033\054\037" +
    "\040\041\053\043\071\066\026\067\073\071\037\072\060" +
    "\073\061\074\012\075\030\076\024\077\076\100\074\001" +
    "\002\000\004\014\uff3e\001\002\000\062\007\011\014\uffcf" +
    "\015\032\016\023\017\056\024\034\026\033\027\013\032" +
    "\057\033\054\037\040\041\053\042\uffcf\043\071\066\026" +
    "\067\073\071\037\072\060\073\061\074\012\075\030\076" +
    "\024\077\076\100\074\001\002\000\006\014\uff41\042\uff41" +
    "\001\002\000\006\014\uff3d\042\356\001\002\000\004\014" +
    "\uff40\001\002\000\016\014\ufff9\031\ufff9\036\ufff9\040\ufff9" +
    "\042\ufff9\070\ufff9\001\002\000\010\004\u013f\010\u013e\052" +
    "\u0140\001\002\000\006\006\u0112\075\u0113\001\002\000\004" +
    "\075\u0101\001\002\000\004\010\377\001\002\000\016\011" +
    "\323\012\317\020\321\021\320\022\322\023\324\001\002" +
    "\000\072\007\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9\024" +
    "\uffc9\026\uffc9\027\uffc9\031\uffc9\032\uffc9\033\uffc9\036\uffc9" +
    "\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\066\uffc9\067" +
    "\uffc9\070\uffc9\071\uffc9\072\uffc9\073\uffc9\074\uffc9\075\uffc9" +
    "\076\uffc9\077\uffc9\100\uffc9\001\002\000\004\053\u0102\001" +
    "\002\000\006\054\uff6c\065\u0103\001\002\000\004\075\u010f" +
    "\001\002\000\006\052\u010d\054\uff6e\001\002\000\004\054" +
    "\u0106\001\002\000\004\010\u0107\001\002\000\016\011\323" +
    "\012\317\020\321\021\320\022\322\023\324\001\002\000" +
    "\060\007\uff6a\014\uff6a\015\uff6a\016\uff6a\017\uff6a\024\uff6a" +
    "\026\uff6a\027\uff6a\032\uff6a\033\uff6a\037\uff6a\041\uff6a\043" +
    "\uff6a\066\uff6a\067\uff6a\071\uff6a\072\uff6a\073\uff6a\074\uff6a" +
    "\075\uff6a\076\uff6a\077\uff6a\100\uff6a\001\002\000\060\007" +
    "\011\014\uffcf\015\032\016\023\017\056\024\034\026\033" +
    "\027\013\032\057\033\054\037\040\041\053\043\071\066" +
    "\026\067\073\071\037\072\060\073\061\074\012\075\030" +
    "\076\024\077\076\100\074\001\002\000\004\014\u010b\001" +
    "\002\000\004\066\u010c\001\002\000\072\007\uff69\014\uff69" +
    "\015\uff69\016\uff69\017\uff69\024\uff69\026\uff69\027\uff69\031" +
    "\uff69\032\uff69\033\uff69\036\uff69\037\uff69\040\uff69\041\uff69" +
    "\042\uff69\043\uff69\066\uff69\067\uff69\070\uff69\071\uff69\072" +
    "\uff69\073\uff69\074\uff69\075\uff69\076\uff69\077\uff69\100\uff69" +
    "\001\002\000\006\054\uff6c\065\u0103\001\002\000\004\054" +
    "\uff6d\001\002\000\004\010\u0110\001\002\000\016\011\323" +
    "\012\317\020\321\021\320\022\322\023\324\001\002\000" +
    "\006\052\uff6b\054\uff6b\001\002\000\004\053\u011b\001\002" +
    "\000\004\053\u0114\001\002\000\006\054\uff6c\065\u0103\001" +
    "\002\000\004\054\u0116\001\002\000\060\007\uff72\014\uff72" +
    "\015\uff72\016\uff72\017\uff72\024\uff72\026\uff72\027\uff72\032" +
    "\uff72\033\uff72\037\uff72\041\uff72\043\uff72\066\uff72\067\uff72" +
    "\071\uff72\072\uff72\073\uff72\074\uff72\075\uff72\076\uff72\077" +
    "\uff72\100\uff72\001\002\000\060\007\011\014\uffcf\015\032" +
    "\016\023\017\056\024\034\026\033\027\013\032\057\033" +
    "\054\037\040\041\053\043\071\066\026\067\073\071\037" +
    "\072\060\073\061\074\012\075\030\076\024\077\076\100" +
    "\074\001\002\000\004\014\u0119\001\002\000\004\026\u011a" +
    "\001\002\000\072\007\uff71\014\uff71\015\uff71\016\uff71\017" +
    "\uff71\024\uff71\026\uff71\027\uff71\031\uff71\032\uff71\033\uff71" +
    "\036\uff71\037\uff71\040\uff71\041\uff71\042\uff71\043\uff71\066" +
    "\uff71\067\uff71\070\uff71\071\uff71\072\uff71\073\uff71\074\uff71" +
    "\075\uff71\076\uff71\077\uff71\100\uff71\001\002\000\004\054" +
    "\u011c\001\002\000\054\007\uff7b\014\uff7b\015\uff7b\016\uff7b" +
    "\017\uff7b\024\uff7b\026\uff7b\027\uff7b\032\uff7b\033\uff7b\037" +
    "\uff7b\041\uff7b\066\uff7b\071\uff7b\072\uff7b\073\uff7b\074\uff7b" +
    "\075\uff7b\076\uff7b\077\uff7b\100\uff7b\001\002\000\054\007" +
    "\011\014\uffe1\015\032\016\023\017\056\024\034\026\033" +
    "\027\013\032\057\033\054\037\040\041\053\066\026\071" +
    "\037\072\060\073\061\074\012\075\030\076\024\077\u0120" +
    "\100\u011f\001\002\000\054\007\011\014\uffe1\015\032\016" +
    "\023\017\056\024\034\026\033\027\013\032\057\033\054" +
    "\037\040\041\053\066\026\071\037\072\060\073\061\074" +
    "\012\075\030\076\024\077\u0120\100\u011f\001\002\000\054" +
    "\007\011\014\uffe1\015\032\016\023\017\056\024\034\026" +
    "\033\027\013\032\057\033\054\037\040\041\053\066\026" +
    "\071\037\072\060\073\061\074\012\075\030\076\024\077" +
    "\u0120\100\u011f\001\002\000\054\007\011\014\uffe1\015\032" +
    "\016\023\017\056\024\034\026\033\027\013\032\057\033" +
    "\054\037\040\041\053\066\026\071\037\072\060\073\061" +
    "\074\012\075\030\076\024\077\u0120\100\u011f\001\002\000" +
    "\004\014\u0139\001\002\000\054\007\011\014\uffe1\015\032" +
    "\016\023\017\056\024\034\026\033\027\013\032\057\033" +
    "\054\037\040\041\053\066\026\071\037\072\060\073\061" +
    "\074\012\075\030\076\024\077\u0120\100\u011f\001\002\000" +
    "\054\007\011\014\uffe1\015\032\016\023\017\056\024\034" +
    "\026\033\027\013\032\057\033\054\037\040\041\053\066" +
    "\026\071\037\072\060\073\061\074\012\075\030\076\024" +
    "\077\u0120\100\u011f\001\002\000\054\007\011\014\uffe1\015" +
    "\032\016\023\017\056\024\034\026\033\027\013\032\057" +
    "\033\054\037\040\041\053\066\026\071\037\072\060\073" +
    "\061\074\012\075\030\076\024\077\u0120\100\u011f\001\002" +
    "\000\054\007\011\014\uffe1\015\032\016\023\017\056\024" +
    "\034\026\033\027\013\032\057\033\054\037\040\041\053" +
    "\066\026\071\037\072\060\073\061\074\012\075\030\076" +
    "\024\077\u0120\100\u011f\001\002\000\054\007\011\014\uffe1" +
    "\015\032\016\023\017\056\024\034\026\033\027\013\032" +
    "\057\033\054\037\040\041\053\066\026\071\037\072\060" +
    "\073\061\074\012\075\030\076\024\077\u0120\100\u011f\001" +
    "\002\000\054\007\011\014\uffe1\015\032\016\023\017\056" +
    "\024\034\026\033\027\013\032\057\033\054\037\040\041" +
    "\053\066\026\071\037\072\060\073\061\074\012\075\030" +
    "\076\024\077\u0120\100\u011f\001\002\000\004\014\uff79\001" +
    "\002\000\054\007\011\014\uffe1\015\032\016\023\017\056" +
    "\024\034\026\033\027\013\032\057\033\054\037\040\041" +
    "\053\066\026\071\037\072\060\073\061\074\012\075\030" +
    "\076\024\077\u0120\100\u011f\001\002\000\054\007\011\014" +
    "\uffe1\015\032\016\023\017\056\024\034\026\033\027\013" +
    "\032\057\033\054\037\040\041\053\066\026\071\037\072" +
    "\060\073\061\074\012\075\030\076\024\077\u0120\100\u011f" +
    "\001\002\000\054\007\011\014\uffe1\015\032\016\023\017" +
    "\056\024\034\026\033\027\013\032\057\033\054\037\040" +
    "\041\053\066\026\071\037\072\060\073\061\074\012\075" +
    "\030\076\024\077\u0120\100\u011f\001\002\000\054\007\011" +
    "\014\uffe1\015\032\016\023\017\056\024\034\026\033\027" +
    "\013\032\057\033\054\037\040\041\053\066\026\071\037" +
    "\072\060\073\061\074\012\075\030\076\024\077\u0120\100" +
    "\u011f\001\002\000\054\007\011\014\uffe1\015\032\016\023" +
    "\017\056\024\034\026\033\027\013\032\057\033\054\037" +
    "\040\041\053\066\026\071\037\072\060\073\061\074\012" +
    "\075\030\076\024\077\u0120\100\u011f\001\002\000\004\014" +
    "\uffe9\001\002\000\004\014\uffec\001\002\000\004\014\uffe8" +
    "\001\002\000\004\014\uffef\001\002\000\004\014\uffee\001" +
    "\002\000\004\014\uffe5\001\002\000\004\014\uffeb\001\002" +
    "\000\004\014\uffed\001\002\000\004\014\uffea\001\002\000" +
    "\004\014\uffe2\001\002\000\004\014\uffe7\001\002\000\004" +
    "\026\u013a\001\002\000\072\007\uff7a\014\uff7a\015\uff7a\016" +
    "\uff7a\017\uff7a\024\uff7a\026\uff7a\027\uff7a\031\uff7a\032\uff7a" +
    "\033\uff7a\036\uff7a\037\uff7a\040\uff7a\041\uff7a\042\uff7a\043" +
    "\uff7a\066\uff7a\067\uff7a\070\uff7a\071\uff7a\072\uff7a\073\uff7a" +
    "\074\uff7a\075\uff7a\076\uff7a\077\uff7a\100\uff7a\001\002\000" +
    "\004\014\uffe4\001\002\000\004\014\uffe3\001\002\000\004" +
    "\014\uffe6\001\002\000\016\011\323\012\317\020\321\021" +
    "\320\022\322\023\324\001\002\000\016\071\037\072\060" +
    "\073\061\074\012\075\063\076\024\001\002\000\004\075" +
    "\u0141\001\002\000\006\010\uffbb\052\u0140\001\002\000\004" +
    "\010\uffba\001\002\000\004\005\u0144\001\002\000\004\010" +
    "\u0145\001\002\000\016\011\323\012\317\020\321\021\320" +
    "\022\322\023\324\001\002\000\072\007\uff78\014\uff78\015" +
    "\uff78\016\uff78\017\uff78\024\uff78\026\uff78\027\uff78\031\uff78" +
    "\032\uff78\033\uff78\036\uff78\037\uff78\040\uff78\041\uff78\042" +
    "\uff78\043\uff78\066\uff78\067\uff78\070\uff78\071\uff78\072\uff78" +
    "\073\uff78\074\uff78\075\uff78\076\uff78\077\uff78\100\uff78\001" +
    "\002\000\074\007\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7" +
    "\024\uffc7\026\uffc7\027\uffc7\031\uffc7\032\uffc7\033\uffc7\036" +
    "\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\051\u0148" +
    "\066\uffc7\067\uffc7\070\uffc7\071\uffc7\072\uffc7\073\uffc7\074" +
    "\uffc7\075\uffc7\076\uffc7\077\uffc7\100\uffc7\001\002\000\020" +
    "\025\u0149\071\037\072\060\073\061\074\012\075\063\076" +
    "\024\001\002\000\072\007\uff7d\014\uff7d\015\uff7d\016\uff7d" +
    "\017\uff7d\024\uff7d\026\uff7d\027\uff7d\031\uff7d\032\uff7d\033" +
    "\uff7d\036\uff7d\037\uff7d\040\uff7d\041\uff7d\042\uff7d\043\uff7d" +
    "\066\uff7d\067\uff7d\070\uff7d\071\uff7d\072\uff7d\073\uff7d\074" +
    "\uff7d\075\uff7d\076\uff7d\077\uff7d\100\uff7d\001\002\000\104" +
    "\007\uff82\014\uff82\015\uff82\016\uff82\017\uff82\024\uff82\026" +
    "\uff82\027\uff82\031\uff82\032\uff82\033\uff82\036\uff82\037\uff82" +
    "\040\uff82\041\uff82\042\uff82\043\uff82\055\174\056\175\057" +
    "\176\060\177\064\173\066\uff82\067\uff82\070\uff82\071\uff82" +
    "\072\uff82\073\uff82\074\uff82\075\uff82\076\uff82\077\uff82\100" +
    "\uff82\001\002\000\104\007\uff81\014\uff81\015\uff81\016\uff81" +
    "\017\uff81\024\uff81\026\uff81\027\uff81\031\uff81\032\uff81\033" +
    "\uff81\036\uff81\037\uff81\040\uff81\041\uff81\042\uff81\043\uff81" +
    "\055\162\056\163\057\164\060\165\064\161\066\uff81\067" +
    "\uff81\070\uff81\071\uff81\072\uff81\073\uff81\074\uff81\075\uff81" +
    "\076\uff81\077\uff81\100\uff81\001\002\000\120\007\uff83\014" +
    "\uff83\015\uff83\016\uff83\017\uff83\024\uff83\026\uff83\027\uff83" +
    "\031\uff83\032\uff83\033\uff83\036\uff83\037\uff83\040\uff83\041" +
    "\uff83\042\uff83\043\uff83\044\145\045\147\046\153\047\142" +
    "\050\146\051\152\055\151\056\144\057\143\060\141\064" +
    "\150\066\uff83\067\uff83\070\uff83\071\uff83\072\uff83\073\uff83" +
    "\074\uff83\075\uff83\076\uff83\077\uff83\100\uff83\001\002\000" +
    "\004\013\u014e\001\002\000\004\002\uffff\001\002\000\016" +
    "\014\ufff6\031\ufff6\036\ufff6\040\ufff6\042\ufff6\070\ufff6\001" +
    "\002\000\016\014\ufffe\031\ufffe\036\ufffe\040\ufffe\042\ufffe" +
    "\070\ufffe\001\002\000\016\014\ufffd\031\ufffd\036\ufffd\040" +
    "\ufffd\042\ufffd\070\ufffd\001\002\000\016\014\ufff4\031\ufff4" +
    "\036\ufff4\040\ufff4\042\ufff4\070\ufff4\001\002\000\060\007" +
    "\011\015\032\016\023\017\056\024\034\026\033\027\013" +
    "\032\057\033\054\037\040\040\uffcf\041\053\043\071\066" +
    "\026\067\073\071\037\072\060\073\061\074\012\075\030" +
    "\076\024\077\076\100\074\001\002\000\004\040\u0155\001" +
    "\002\000\016\071\037\072\060\073\061\074\012\075\063" +
    "\076\024\001\002\000\072\007\uff47\014\uff47\015\uff47\016" +
    "\uff47\017\uff47\024\uff47\026\uff47\027\uff47\031\uff47\032\uff47" +
    "\033\uff47\036\uff47\037\uff47\040\uff47\041\uff47\042\uff47\043" +
    "\uff47\066\uff47\067\uff47\070\uff47\071\uff47\072\uff47\073\uff47" +
    "\074\uff47\075\uff47\076\uff47\077\uff47\100\uff47\001\002\000" +
    "\016\014\ufff8\031\ufff8\036\ufff8\040\ufff8\042\ufff8\070\ufff8" +
    "\001\002\000\016\011\323\012\317\020\321\021\320\022" +
    "\322\023\324\001\002\000\072\007\uffc8\014\uffc8\015\uffc8" +
    "\016\uffc8\017\uffc8\024\uffc8\026\uffc8\027\uffc8\031\uffc8\032" +
    "\uffc8\033\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8" +
    "\043\uffc8\066\uffc8\067\uffc8\070\uffc8\071\uffc8\072\uffc8\073" +
    "\uffc8\074\uffc8\075\uffc8\076\uffc8\077\uffc8\100\uffc8\001\002" +
    "\000\016\071\037\072\060\073\061\074\012\075\063\076" +
    "\024\001\002\000\032\044\145\045\147\046\153\047\142" +
    "\050\146\051\152\054\u015c\055\151\056\144\057\143\060" +
    "\141\064\150\001\002\000\072\007\uff73\014\uff73\015\uff73" +
    "\016\uff73\017\uff73\024\uff73\026\uff73\027\uff73\031\uff73\032" +
    "\uff73\033\uff73\036\uff73\037\uff73\040\uff73\041\uff73\042\uff73" +
    "\043\uff73\066\uff73\067\uff73\070\uff73\071\uff73\072\uff73\073" +
    "\uff73\074\uff73\075\uff73\076\uff73\077\uff73\100\uff73\001\002" +
    "\000\004\053\u015e\001\002\000\006\054\uff6c\065\u0103\001" +
    "\002\000\004\054\u0160\001\002\000\060\007\uff70\014\uff70" +
    "\015\uff70\016\uff70\017\uff70\024\uff70\026\uff70\027\uff70\032" +
    "\uff70\033\uff70\037\uff70\041\uff70\043\uff70\066\uff70\067\uff70" +
    "\071\uff70\072\uff70\073\uff70\074\uff70\075\uff70\076\uff70\077" +
    "\uff70\100\uff70\001\002\000\060\007\011\014\uffcf\015\032" +
    "\016\023\017\056\024\034\026\033\027\013\032\057\033" +
    "\054\037\040\041\053\043\071\066\026\067\073\071\037" +
    "\072\060\073\061\074\012\075\030\076\024\077\076\100" +
    "\074\001\002\000\004\014\u0163\001\002\000\004\026\u0164" +
    "\001\002\000\072\007\uff6f\014\uff6f\015\uff6f\016\uff6f\017" +
    "\uff6f\024\uff6f\026\uff6f\027\uff6f\031\uff6f\032\uff6f\033\uff6f" +
    "\036\uff6f\037\uff6f\040\uff6f\041\uff6f\042\uff6f\043\uff6f\066" +
    "\uff6f\067\uff6f\070\uff6f\071\uff6f\072\uff6f\073\uff6f\074\uff6f" +
    "\075\uff6f\076\uff6f\077\uff6f\100\uff6f\001\002\000\016\014" +
    "\ufffa\031\ufffa\036\ufffa\040\ufffa\042\ufffa\070\ufffa\001\002" +
    "\000\016\011\323\012\317\020\321\021\320\022\322\023" +
    "\324\001\002\000\016\071\037\072\060\073\061\074\012" +
    "\075\063\076\024\001\002\000\020\025\u0169\071\037\072" +
    "\060\073\061\074\012\075\063\076\024\001\002\000\072" +
    "\007\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6\024\uffb6\026" +
    "\uffb6\027\uffb6\031\uffb6\032\uffb6\033\uffb6\036\uffb6\037\uffb6" +
    "\040\uffb6\041\uffb6\042\uffb6\043\uffb6\066\uffb6\067\uffb6\070" +
    "\uffb6\071\uffb6\072\uffb6\073\uffb6\074\uffb6\075\uffb6\076\uffb6" +
    "\077\uffb6\100\uffb6\001\002\000\104\007\uffb7\014\uffb7\015" +
    "\uffb7\016\uffb7\017\uffb7\024\uffb7\026\uffb7\027\uffb7\031\uffb7" +
    "\032\uffb7\033\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\042" +
    "\uffb7\043\uffb7\055\174\056\175\057\176\060\177\064\173" +
    "\066\uffb7\067\uffb7\070\uffb7\071\uffb7\072\uffb7\073\uffb7\074" +
    "\uffb7\075\uffb7\076\uffb7\077\uffb7\100\uffb7\001\002\000\104" +
    "\007\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\024\uffb8\026" +
    "\uffb8\027\uffb8\031\uffb8\032\uffb8\033\uffb8\036\uffb8\037\uffb8" +
    "\040\uffb8\041\uffb8\042\uffb8\043\uffb8\055\162\056\163\057" +
    "\164\060\165\064\161\066\uffb8\067\uffb8\070\uffb8\071\uffb8" +
    "\072\uffb8\073\uffb8\074\uffb8\075\uffb8\076\uffb8\077\uffb8\100" +
    "\uffb8\001\002\000\120\007\uffb9\014\uffb9\015\uffb9\016\uffb9" +
    "\017\uffb9\024\uffb9\026\uffb9\027\uffb9\031\uffb9\032\uffb9\033" +
    "\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9" +
    "\044\145\045\147\046\153\047\142\050\146\051\152\055" +
    "\151\056\144\057\143\060\141\064\150\066\uffb9\067\uffb9" +
    "\070\uffb9\071\uffb9\072\uffb9\073\uffb9\074\uffb9\075\uffb9\076" +
    "\uffb9\077\uffb9\100\uffb9\001\002\000\004\005\u016e\001\002" +
    "\000\006\010\u016f\051\u0170\001\002\000\016\011\323\012" +
    "\317\020\321\021\320\022\322\023\324\001\002\000\016" +
    "\071\037\072\060\073\061\074\012\075\063\076\024\001" +
    "\002\000\120\007\uff74\014\uff74\015\uff74\016\uff74\017\uff74" +
    "\024\uff74\026\uff74\027\uff74\031\uff74\032\uff74\033\uff74\036" +
    "\uff74\037\uff74\040\uff74\041\uff74\042\uff74\043\uff74\044\145" +
    "\045\147\046\153\047\142\050\146\051\152\055\151\056" +
    "\144\057\143\060\141\064\150\066\uff74\067\uff74\070\uff74" +
    "\071\uff74\072\uff74\073\uff74\074\uff74\075\uff74\076\uff74\077" +
    "\uff74\100\uff74\001\002\000\072\007\uff77\014\uff77\015\uff77" +
    "\016\uff77\017\uff77\024\uff77\026\uff77\027\uff77\031\uff77\032" +
    "\uff77\033\uff77\036\uff77\037\uff77\040\uff77\041\uff77\042\uff77" +
    "\043\uff77\066\uff77\067\uff77\070\uff77\071\uff77\072\uff77\073" +
    "\uff77\074\uff77\075\uff77\076\uff77\077\uff77\100\uff77\001\002" +
    "\000\074\007\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6\024" +
    "\uffc6\026\uffc6\027\uffc6\031\uffc6\032\uffc6\033\uffc6\036\uffc6" +
    "\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\051\u0174\066" +
    "\uffc6\067\uffc6\070\uffc6\071\uffc6\072\uffc6\073\uffc6\074\uffc6" +
    "\075\uffc6\076\uffc6\077\uffc6\100\uffc6\001\002\000\020\025" +
    "\u0175\071\037\072\060\073\061\074\012\075\063\076\024" +
    "\001\002\000\072\007\uff7c\014\uff7c\015\uff7c\016\uff7c\017" +
    "\uff7c\024\uff7c\026\uff7c\027\uff7c\031\uff7c\032\uff7c\033\uff7c" +
    "\036\uff7c\037\uff7c\040\uff7c\041\uff7c\042\uff7c\043\uff7c\066" +
    "\uff7c\067\uff7c\070\uff7c\071\uff7c\072\uff7c\073\uff7c\074\uff7c" +
    "\075\uff7c\076\uff7c\077\uff7c\100\uff7c\001\002\000\104\007" +
    "\uff7f\014\uff7f\015\uff7f\016\uff7f\017\uff7f\024\uff7f\026\uff7f" +
    "\027\uff7f\031\uff7f\032\uff7f\033\uff7f\036\uff7f\037\uff7f\040" +
    "\uff7f\041\uff7f\042\uff7f\043\uff7f\055\174\056\175\057\176" +
    "\060\177\064\173\066\uff7f\067\uff7f\070\uff7f\071\uff7f\072" +
    "\uff7f\073\uff7f\074\uff7f\075\uff7f\076\uff7f\077\uff7f\100\uff7f" +
    "\001\002\000\104\007\uff7e\014\uff7e\015\uff7e\016\uff7e\017" +
    "\uff7e\024\uff7e\026\uff7e\027\uff7e\031\uff7e\032\uff7e\033\uff7e" +
    "\036\uff7e\037\uff7e\040\uff7e\041\uff7e\042\uff7e\043\uff7e\055" +
    "\162\056\163\057\164\060\165\064\161\066\uff7e\067\uff7e" +
    "\070\uff7e\071\uff7e\072\uff7e\073\uff7e\074\uff7e\075\uff7e\076" +
    "\uff7e\077\uff7e\100\uff7e\001\002\000\120\007\uff80\014\uff80" +
    "\015\uff80\016\uff80\017\uff80\024\uff80\026\uff80\027\uff80\031" +
    "\uff80\032\uff80\033\uff80\036\uff80\037\uff80\040\uff80\041\uff80" +
    "\042\uff80\043\uff80\044\145\045\147\046\153\047\142\050" +
    "\146\051\152\055\151\056\144\057\143\060\141\064\150" +
    "\066\uff80\067\uff80\070\uff80\071\uff80\072\uff80\073\uff80\074" +
    "\uff80\075\uff80\076\uff80\077\uff80\100\uff80\001\002\000\016" +
    "\014\ufffc\031\ufffc\036\ufffc\040\ufffc\042\ufffc\070\ufffc\001" +
    "\002\000\004\053\u017b\001\002\000\006\054\uff6c\065\u0103" +
    "\001\002\000\004\054\u017d\001\002\000\004\010\u017e\001" +
    "\002\000\016\011\323\012\317\020\321\021\320\022\322" +
    "\023\324\001\002\000\060\007\uff68\014\uff68\015\uff68\016" +
    "\uff68\017\uff68\024\uff68\026\uff68\027\uff68\032\uff68\033\uff68" +
    "\037\uff68\041\uff68\043\uff68\066\uff68\067\uff68\071\uff68\072" +
    "\uff68\073\uff68\074\uff68\075\uff68\076\uff68\077\uff68\100\uff68" +
    "\001\002\000\060\007\011\014\uffcf\015\032\016\023\017" +
    "\056\024\034\026\033\027\013\032\057\033\054\037\040" +
    "\041\053\043\071\066\026\067\073\071\037\072\060\073" +
    "\061\074\012\075\030\076\024\077\076\100\074\001\002" +
    "\000\004\014\u0182\001\002\000\004\066\u0183\001\002\000" +
    "\072\007\uff67\014\uff67\015\uff67\016\uff67\017\uff67\024\uff67" +
    "\026\uff67\027\uff67\031\uff67\032\uff67\033\uff67\036\uff67\037" +
    "\uff67\040\uff67\041\uff67\042\uff67\043\uff67\066\uff67\067\uff67" +
    "\070\uff67\071\uff67\072\uff67\073\uff67\074\uff67\075\uff67\076" +
    "\uff67\077\uff67\100\uff67\001\002\000\016\014\ufff1\031\ufff1" +
    "\036\ufff1\040\ufff1\042\ufff1\070\ufff1\001\002\000\016\014" +
    "\ufff7\031\ufff7\036\ufff7\040\ufff7\042\ufff7\070\ufff7\001\002" +
    "\000\016\014\ufff3\031\ufff3\036\ufff3\040\ufff3\042\ufff3\070" +
    "\ufff3\001\002\000\016\014\ufff2\031\ufff2\036\ufff2\040\ufff2" +
    "\042\ufff2\070\ufff2\001\002\000\016\014\ufff5\031\ufff5\036" +
    "\ufff5\040\ufff5\042\ufff5\070\ufff5\001\002\000\004\030\u018a" +
    "\001\002\000\064\007\uff66\014\uff66\015\uff66\016\uff66\017" +
    "\uff66\024\uff66\026\uff66\027\uff66\031\uff66\032\uff66\033\uff66" +
    "\037\uff66\041\uff66\043\uff66\066\uff66\067\uff66\070\uff66\071" +
    "\uff66\072\uff66\073\uff66\074\uff66\075\uff66\076\uff66\077\uff66" +
    "\100\uff66\001\002\000\064\007\011\014\uffcf\015\032\016" +
    "\023\017\056\024\034\026\033\027\013\031\uffcf\032\057" +
    "\033\054\037\040\041\053\043\071\066\026\067\073\070" +
    "\uffcf\071\037\072\060\073\061\074\012\075\030\076\024" +
    "\077\076\100\074\001\002\000\010\014\uff65\031\uff65\070" +
    "\uff65\001\002\000\010\014\uff52\031\uff52\070\u018f\001\002" +
    "\000\006\014\uff56\031\u0196\001\002\000\016\071\037\072" +
    "\060\073\061\074\012\075\063\076\024\001\002\000\004" +
    "\030\u0191\001\002\000\064\007\uff55\014\uff55\015\uff55\016" +
    "\uff55\017\uff55\024\uff55\026\uff55\027\uff55\031\uff55\032\uff55" +
    "\033\uff55\037\uff55\041\uff55\043\uff55\066\uff55\067\uff55\070" +
    "\uff55\071\uff55\072\uff55\073\uff55\074\uff55\075\uff55\076\uff55" +
    "\077\uff55\100\uff55\001\002\000\064\007\011\014\uffcf\015" +
    "\032\016\023\017\056\024\034\026\033\027\013\031\uffcf" +
    "\032\057\033\054\037\040\041\053\043\071\066\026\067" +
    "\073\070\uffcf\071\037\072\060\073\061\074\012\075\030" +
    "\076\024\077\076\100\074\001\002\000\010\014\uff54\031" +
    "\uff54\070\uff54\001\002\000\010\014\uff52\031\uff52\070\u018f" +
    "\001\002\000\006\014\uff53\031\uff53\001\002\000\060\007" +
    "\uff58\014\uff58\015\uff58\016\uff58\017\uff58\024\uff58\026\uff58" +
    "\027\uff58\032\uff58\033\uff58\037\uff58\041\uff58\043\uff58\066" +
    "\uff58\067\uff58\071\uff58\072\uff58\073\uff58\074\uff58\075\uff58" +
    "\076\uff58\077\uff58\100\uff58\001\002\000\004\014\u0198\001" +
    "\002\000\004\027\u0199\001\002\000\072\007\uff64\014\uff64" +
    "\015\uff64\016\uff64\017\uff64\024\uff64\026\uff64\027\uff64\031" +
    "\uff64\032\uff64\033\uff64\036\uff64\037\uff64\040\uff64\041\uff64" +
    "\042\uff64\043\uff64\066\uff64\067\uff64\070\uff64\071\uff64\072" +
    "\uff64\073\uff64\074\uff64\075\uff64\076\uff64\077\uff64\100\uff64" +
    "\001\002\000\060\007\011\014\uffcf\015\032\016\023\017" +
    "\056\024\034\026\033\027\013\032\057\033\054\037\040" +
    "\041\053\043\071\066\026\067\073\071\037\072\060\073" +
    "\061\074\012\075\030\076\024\077\076\100\074\001\002" +
    "\000\004\014\uff57\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0199\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\054\007\001\001" +
    "\000\054\003\047\005\043\006\042\007\026\012\050\014" +
    "\034\015\046\016\021\021\030\023\035\024\044\026\054" +
    "\030\015\031\045\035\014\036\020\037\041\041\013\042" +
    "\040\047\024\051\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\010\065\015\061\032\u0188\047\064\053" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\054" +
    "\003\u0187\005\043\006\042\007\026\012\050\014\034\015" +
    "\046\016\021\021\030\023\035\024\044\026\054\030\015" +
    "\031\045\035\014\036\020\037\041\041\013\042\040\047" +
    "\024\051\051\001\001\000\054\003\u0186\005\043\006\042" +
    "\007\026\012\050\014\034\015\046\016\021\021\030\023" +
    "\035\024\044\026\054\030\015\031\045\035\014\036\020" +
    "\037\041\041\013\042\040\047\024\051\051\001\001\000" +
    "\054\003\u0185\005\043\006\042\007\026\012\050\014\034" +
    "\015\046\016\021\021\030\023\035\024\044\026\054\030" +
    "\015\031\045\035\014\036\020\037\041\041\013\042\040" +
    "\047\024\051\051\001\001\000\002\001\001\000\054\003" +
    "\u0184\005\043\006\042\007\026\012\050\014\034\015\046" +
    "\016\021\021\030\023\035\024\044\026\054\030\015\031" +
    "\045\035\014\036\020\037\041\041\013\042\040\047\024" +
    "\051\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\003\u0183\005\043\006\042\007\026\012\050\014\034" +
    "\015\046\016\021\021\030\023\035\024\044\026\054\030" +
    "\015\031\045\035\014\036\020\037\041\041\013\042\040" +
    "\047\024\051\051\001\001\000\002\001\001\000\054\003" +
    "\u0178\005\043\006\042\007\026\012\050\014\034\015\046" +
    "\016\021\021\030\023\035\024\044\026\054\030\015\031" +
    "\045\035\014\036\020\037\041\041\013\042\040\047\024" +
    "\051\051\001\001\000\002\001\001\000\054\003\u0164\005" +
    "\043\006\042\007\026\012\050\014\034\015\046\016\021" +
    "\021\030\023\035\024\044\026\054\030\015\031\045\035" +
    "\014\036\020\037\041\041\013\042\040\047\024\051\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\054\003\u0156\005\043\006\042" +
    "\007\026\012\050\014\034\015\046\016\021\021\030\023" +
    "\035\024\044\026\054\030\015\031\045\035\014\036\020" +
    "\037\041\041\013\042\040\047\024\051\051\001\001\000" +
    "\002\001\001\000\004\071\u0152\001\001\000\002\001\001" +
    "\000\054\003\u0151\005\043\006\042\007\026\012\050\014" +
    "\034\015\046\016\021\021\030\023\035\024\044\026\054" +
    "\030\015\031\045\035\014\036\020\037\041\041\013\042" +
    "\040\047\024\051\051\001\001\000\054\003\u0150\005\043" +
    "\006\042\007\026\012\050\014\034\015\046\016\021\021" +
    "\030\023\035\024\044\026\054\030\015\031\045\035\014" +
    "\036\020\037\041\041\013\042\040\047\024\051\051\001" +
    "\001\000\054\003\u014f\005\043\006\042\007\026\012\050" +
    "\014\034\015\046\016\021\021\030\023\035\024\044\026" +
    "\054\030\015\031\045\035\014\036\020\037\041\041\013" +
    "\042\040\047\024\051\051\001\001\000\054\003\u014e\005" +
    "\043\006\042\007\026\012\050\014\034\015\046\016\021" +
    "\021\030\023\035\024\044\026\054\030\015\031\045\035" +
    "\014\036\020\037\041\041\013\042\040\047\024\051\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\375\001\001\000\054\003\371\005\043" +
    "\006\042\007\026\012\050\014\034\015\046\016\021\021" +
    "\030\023\035\024\044\026\054\030\015\031\045\035\014" +
    "\036\020\037\041\041\013\042\040\047\024\051\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\054\003\313" +
    "\005\043\006\042\007\026\012\050\014\034\015\046\016" +
    "\021\021\030\023\035\024\044\026\054\030\015\031\045" +
    "\035\014\036\020\037\041\041\013\042\040\047\024\051" +
    "\051\001\001\000\002\001\001\000\014\010\065\015\061" +
    "\032\066\047\064\053\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\067" +
    "\067\001\001\000\062\005\110\006\107\007\101\012\050" +
    "\014\034\015\046\016\076\021\102\023\104\024\111\025" +
    "\105\026\113\030\074\031\045\035\014\036\020\037\106" +
    "\041\013\042\040\045\071\046\077\047\100\051\112\052" +
    "\103\001\001\000\002\001\001\000\062\005\110\006\107" +
    "\007\101\012\050\014\034\015\046\016\076\021\102\023" +
    "\104\024\111\025\253\026\113\030\074\031\045\035\014" +
    "\036\020\037\106\041\013\042\040\045\071\046\077\047" +
    "\100\051\112\052\103\001\001\000\012\010\137\015\136" +
    "\047\064\053\063\001\001\000\062\005\110\006\107\007" +
    "\101\012\050\014\034\015\046\016\076\021\102\023\104" +
    "\024\111\025\135\026\113\030\074\031\045\035\014\036" +
    "\020\037\106\041\013\042\040\045\071\046\077\047\100" +
    "\051\112\052\103\001\001\000\062\005\110\006\107\007" +
    "\101\012\050\014\034\015\046\016\076\021\102\023\104" +
    "\024\111\025\134\026\113\030\074\031\045\035\014\036" +
    "\020\037\106\041\013\042\040\045\071\046\077\047\100" +
    "\051\112\052\103\001\001\000\062\005\110\006\107\007" +
    "\101\012\050\014\034\015\046\016\076\021\102\023\104" +
    "\024\111\025\133\026\113\030\074\031\045\035\014\036" +
    "\020\037\106\041\013\042\040\045\071\046\077\047\100" +
    "\051\112\052\103\001\001\000\062\005\110\006\107\007" +
    "\101\012\050\014\034\015\046\016\076\021\102\023\104" +
    "\024\111\025\132\026\113\030\074\031\045\035\014\036" +
    "\020\037\106\041\013\042\040\045\071\046\077\047\100" +
    "\051\112\052\103\001\001\000\062\005\110\006\107\007" +
    "\101\012\050\014\034\015\046\016\076\021\102\023\104" +
    "\024\111\025\131\026\113\030\074\031\045\035\014\036" +
    "\020\037\106\041\013\042\040\045\071\046\077\047\100" +
    "\051\112\052\103\001\001\000\054\003\130\005\043\006" +
    "\042\007\026\012\050\014\034\015\046\016\021\021\030" +
    "\023\035\024\044\026\054\030\015\031\045\035\014\036" +
    "\020\037\041\041\013\042\040\047\024\051\051\001\001" +
    "\000\062\005\110\006\107\007\101\012\050\014\034\015" +
    "\046\016\076\021\102\023\104\024\111\025\127\026\113" +
    "\030\074\031\045\035\014\036\020\037\106\041\013\042" +
    "\040\045\071\046\077\047\100\051\112\052\103\001\001" +
    "\000\062\005\110\006\107\007\101\012\050\014\034\015" +
    "\046\016\076\021\102\023\104\024\111\025\126\026\113" +
    "\030\074\031\045\035\014\036\020\037\106\041\013\042" +
    "\040\045\071\046\077\047\100\051\112\052\103\001\001" +
    "\000\062\005\110\006\107\007\101\012\050\014\034\015" +
    "\046\016\076\021\102\023\104\024\111\025\125\026\113" +
    "\030\074\031\045\035\014\036\020\037\106\041\013\042" +
    "\040\045\071\046\077\047\100\051\112\052\103\001\001" +
    "\000\062\005\110\006\107\007\101\012\050\014\034\015" +
    "\046\016\076\021\102\023\104\024\111\025\124\026\113" +
    "\030\074\031\045\035\014\036\020\037\106\041\013\042" +
    "\040\045\071\046\077\047\100\051\112\052\103\001\001" +
    "\000\002\001\001\000\062\005\110\006\107\007\101\012" +
    "\050\014\034\015\046\016\076\021\102\023\104\024\111" +
    "\025\121\026\113\030\074\031\045\035\014\036\020\037" +
    "\106\041\013\042\040\045\071\046\077\047\100\051\112" +
    "\052\103\001\001\000\062\005\110\006\107\007\101\012" +
    "\050\014\034\015\046\016\076\021\102\023\104\024\111" +
    "\025\120\026\113\030\074\031\045\035\014\036\020\037" +
    "\106\041\013\042\040\045\071\046\077\047\100\051\112" +
    "\052\103\001\001\000\062\005\110\006\107\007\101\012" +
    "\050\014\034\015\046\016\076\021\102\023\104\024\111" +
    "\025\117\026\113\030\074\031\045\035\014\036\020\037" +
    "\106\041\013\042\040\045\071\046\077\047\100\051\112" +
    "\052\103\001\001\000\062\005\110\006\107\007\101\012" +
    "\050\014\034\015\046\016\076\021\102\023\104\024\111" +
    "\025\116\026\113\030\074\031\045\035\014\036\020\037" +
    "\106\041\013\042\040\045\071\046\077\047\100\051\112" +
    "\052\103\001\001\000\062\005\110\006\107\007\101\012" +
    "\050\014\034\015\046\016\076\021\102\023\104\024\111" +
    "\025\115\026\113\030\074\031\045\035\014\036\020\037" +
    "\106\041\013\042\040\045\071\046\077\047\100\051\112" +
    "\052\103\001\001\000\062\005\110\006\107\007\101\012" +
    "\050\014\034\015\046\016\076\021\102\023\104\024\111" +
    "\025\114\026\113\030\074\031\045\035\014\036\020\037" +
    "\106\041\013\042\040\045\071\046\077\047\100\051\112" +
    "\052\103\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\010\250\015\136\047" +
    "\247\053\246\001\001\000\012\010\245\015\136\047\064" +
    "\053\063\001\001\000\012\010\244\015\136\047\243\053" +
    "\242\001\001\000\012\010\241\015\136\047\240\053\237" +
    "\001\001\000\012\010\236\015\136\047\064\053\063\001" +
    "\001\000\012\010\235\015\136\047\064\053\063\001\001" +
    "\000\012\010\234\015\136\047\064\053\063\001\001\000" +
    "\010\015\204\047\207\053\206\001\001\000\012\010\157" +
    "\015\136\047\156\053\155\001\001\000\012\010\154\015" +
    "\136\047\064\053\063\001\001\000\012\010\153\015\136" +
    "\047\064\053\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\010\171\015\136\047\064\053\063\001\001\000" +
    "\012\010\170\015\136\047\064\053\063\001\001\000\012" +
    "\010\167\015\136\047\064\053\063\001\001\000\012\010" +
    "\166\015\136\047\064\053\063\001\001\000\012\010\165" +
    "\015\136\047\064\053\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\010\203\015\136\047\064\053\063\001" +
    "\001\000\012\010\202\015\136\047\064\053\063\001\001" +
    "\000\012\010\201\015\136\047\064\053\063\001\001\000" +
    "\012\010\200\015\136\047\064\053\063\001\001\000\012" +
    "\010\177\015\136\047\064\053\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\010\230\015\136" +
    "\022\227\047\064\053\063\001\001\000\006\015\213\050" +
    "\212\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\213\050\225\001\001\000\006\015\213\050\224\001" +
    "\001\000\006\015\213\050\223\001\001\000\006\015\213" +
    "\050\222\001\001\000\006\015\213\050\221\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\010\230\015\136\022\232" +
    "\047\064\053\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\010\252\015\136\047\064\053\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\010\304\015\136\047\064\053\063" +
    "\001\001\000\012\010\302\015\136\047\064\053\063\001" +
    "\001\000\012\010\300\015\136\047\064\053\063\001\001" +
    "\000\012\010\276\015\136\047\064\053\063\001\001\000" +
    "\012\010\274\015\136\047\064\053\063\001\001\000\012" +
    "\010\264\015\136\047\064\053\063\001\001\000\004\013" +
    "\265\001\001\000\002\001\001\000\014\010\065\015\061" +
    "\032\273\047\064\053\063\001\001\000\014\010\065\015" +
    "\061\032\272\047\064\053\063\001\001\000\014\010\065" +
    "\015\061\032\271\047\064\053\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\275" +
    "\001\001\000\002\001\001\000\004\013\277\001\001\000" +
    "\002\001\001\000\004\013\301\001\001\000\002\001\001" +
    "\000\004\013\303\001\001\000\002\001\001\000\004\013" +
    "\305\001\001\000\002\001\001\000\004\015\307\001\001" +
    "\000\002\001\001\000\004\015\311\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\324\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\040\326\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\010\332\015\136\047\064\053\063\001\001\000" +
    "\002\001\001\000\004\044\335\001\001\000\002\001\001" +
    "\000\004\040\341\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\070\342\001\001\000\062" +
    "\005\110\006\107\007\101\012\050\014\034\015\046\016" +
    "\076\021\102\023\104\024\111\025\343\026\113\030\074" +
    "\031\045\035\014\036\020\037\106\041\013\042\040\045" +
    "\071\046\077\047\100\051\112\052\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\072" +
    "\347\001\001\000\002\001\001\000\004\015\351\001\001" +
    "\000\004\073\352\001\001\000\062\005\110\006\107\007" +
    "\101\012\050\014\034\015\046\016\076\021\102\023\104" +
    "\024\111\025\353\026\113\030\074\031\045\035\014\036" +
    "\020\037\106\041\013\042\040\045\071\046\077\047\100" +
    "\051\112\052\103\001\001\000\004\074\354\001\001\000" +
    "\004\043\356\001\001\000\004\015\361\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\075" +
    "\365\001\001\000\004\077\363\001\001\000\062\005\110" +
    "\006\107\007\101\012\050\014\034\015\046\016\076\021" +
    "\102\023\104\024\111\025\364\026\113\030\074\031\045" +
    "\035\014\036\020\037\106\041\013\042\040\045\071\046" +
    "\077\047\100\051\112\052\103\001\001\000\002\001\001" +
    "\000\062\005\110\006\107\007\101\012\050\014\034\015" +
    "\046\016\076\021\102\023\104\024\111\025\366\026\113" +
    "\030\074\031\045\035\014\036\020\037\106\041\013\042" +
    "\040\045\071\046\077\047\100\051\112\052\103\001\001" +
    "\000\004\076\367\001\001\000\004\043\370\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\377\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\017\u0103\027\u0104\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\u0107" +
    "\001\001\000\004\060\u0108\001\001\000\062\005\110\006" +
    "\107\007\101\012\050\014\034\015\046\016\076\021\102" +
    "\023\104\024\111\025\u0109\026\113\030\074\031\045\035" +
    "\014\036\020\037\106\041\013\042\040\045\071\046\077" +
    "\047\100\051\112\052\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\017\u0103\027\u010d" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\u0110\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\u0103\027\u0114\001\001\000\002\001" +
    "\001\000\004\056\u0116\001\001\000\062\005\110\006\107" +
    "\007\101\012\050\014\034\015\046\016\076\021\102\023" +
    "\104\024\111\025\u0117\026\113\030\074\031\045\035\014" +
    "\036\020\037\106\041\013\042\040\045\071\046\077\047" +
    "\100\051\112\052\103\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\055" +
    "\u011c\001\001\000\056\004\u0127\005\u0129\006\u0128\007\u0123" +
    "\012\050\014\034\015\046\016\u0121\020\u0120\021\u0124\023" +
    "\u0125\024\u012a\026\u012c\030\u011d\031\045\035\014\036\020" +
    "\037\u0126\041\013\042\040\047\u0122\051\u012b\001\001\000" +
    "\054\004\u013c\005\u0129\006\u0128\007\u0123\012\050\014\034" +
    "\015\046\016\u0121\021\u0124\023\u0125\024\u012a\026\u012c\030" +
    "\u011d\031\045\035\014\036\020\037\u0126\041\013\042\040" +
    "\047\u0122\051\u012b\001\001\000\054\004\u013b\005\u0129\006" +
    "\u0128\007\u0123\012\050\014\034\015\046\016\u0121\021\u0124" +
    "\023\u0125\024\u012a\026\u012c\030\u011d\031\045\035\014\036" +
    "\020\037\u0126\041\013\042\040\047\u0122\051\u012b\001\001" +
    "\000\054\004\u013a\005\u0129\006\u0128\007\u0123\012\050\014" +
    "\034\015\046\016\u0121\021\u0124\023\u0125\024\u012a\026\u012c" +
    "\030\u011d\031\045\035\014\036\020\037\u0126\041\013\042" +
    "\040\047\u0122\051\u012b\001\001\000\002\001\001\000\054" +
    "\004\u0137\005\u0129\006\u0128\007\u0123\012\050\014\034\015" +
    "\046\016\u0121\021\u0124\023\u0125\024\u012a\026\u012c\030\u011d" +
    "\031\045\035\014\036\020\037\u0126\041\013\042\040\047" +
    "\u0122\051\u012b\001\001\000\054\004\u0136\005\u0129\006\u0128" +
    "\007\u0123\012\050\014\034\015\046\016\u0121\021\u0124\023" +
    "\u0125\024\u012a\026\u012c\030\u011d\031\045\035\014\036\020" +
    "\037\u0126\041\013\042\040\047\u0122\051\u012b\001\001\000" +
    "\054\004\u0135\005\u0129\006\u0128\007\u0123\012\050\014\034" +
    "\015\046\016\u0121\021\u0124\023\u0125\024\u012a\026\u012c\030" +
    "\u011d\031\045\035\014\036\020\037\u0126\041\013\042\040" +
    "\047\u0122\051\u012b\001\001\000\054\004\u0134\005\u0129\006" +
    "\u0128\007\u0123\012\050\014\034\015\046\016\u0121\021\u0124" +
    "\023\u0125\024\u012a\026\u012c\030\u011d\031\045\035\014\036" +
    "\020\037\u0126\041\013\042\040\047\u0122\051\u012b\001\001" +
    "\000\054\004\u0133\005\u0129\006\u0128\007\u0123\012\050\014" +
    "\034\015\046\016\u0121\021\u0124\023\u0125\024\u012a\026\u012c" +
    "\030\u011d\031\045\035\014\036\020\037\u0126\041\013\042" +
    "\040\047\u0122\051\u012b\001\001\000\054\004\u0132\005\u0129" +
    "\006\u0128\007\u0123\012\050\014\034\015\046\016\u0121\021" +
    "\u0124\023\u0125\024\u012a\026\u012c\030\u011d\031\045\035\014" +
    "\036\020\037\u0126\041\013\042\040\047\u0122\051\u012b\001" +
    "\001\000\002\001\001\000\054\004\u0131\005\u0129\006\u0128" +
    "\007\u0123\012\050\014\034\015\046\016\u0121\021\u0124\023" +
    "\u0125\024\u012a\026\u012c\030\u011d\031\045\035\014\036\020" +
    "\037\u0126\041\013\042\040\047\u0122\051\u012b\001\001\000" +
    "\054\004\u0130\005\u0129\006\u0128\007\u0123\012\050\014\034" +
    "\015\046\016\u0121\021\u0124\023\u0125\024\u012a\026\u012c\030" +
    "\u011d\031\045\035\014\036\020\037\u0126\041\013\042\040" +
    "\047\u0122\051\u012b\001\001\000\054\004\u012f\005\u0129\006" +
    "\u0128\007\u0123\012\050\014\034\015\046\016\u0121\021\u0124" +
    "\023\u0125\024\u012a\026\u012c\030\u011d\031\045\035\014\036" +
    "\020\037\u0126\041\013\042\040\047\u0122\051\u012b\001\001" +
    "\000\054\004\u012e\005\u0129\006\u0128\007\u0123\012\050\014" +
    "\034\015\046\016\u0121\021\u0124\023\u0125\024\u012a\026\u012c" +
    "\030\u011d\031\045\035\014\036\020\037\u0126\041\013\042" +
    "\040\047\u0122\051\u012b\001\001\000\054\004\u012d\005\u0129" +
    "\006\u0128\007\u0123\012\050\014\034\015\046\016\u0121\021" +
    "\u0124\023\u0125\024\u012a\026\u012c\030\u011d\031\045\035\014" +
    "\036\020\037\u0126\041\013\042\040\047\u0122\051\u012b\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\u0146\001\001\000\014\010\230\015\136\022" +
    "\u0142\047\064\053\063\001\001\000\004\014\u0141\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\u0145\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\010\u014b\015\136\047\u014a\053" +
    "\u0149\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\062\005\110\006\107\007\101\012" +
    "\050\014\034\015\046\016\076\021\102\023\104\024\111" +
    "\025\u0153\026\113\030\074\031\045\035\014\036\020\037" +
    "\106\041\013\042\040\045\071\046\077\047\100\051\112" +
    "\052\103\001\001\000\002\001\001\000\014\010\065\015" +
    "\061\032\u0155\047\064\053\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\u0158\001\001\000\002\001" +
    "\001\000\012\010\u015a\015\136\047\064\053\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\017\u0103\027\u015e\001\001\000\002\001\001\000\004" +
    "\057\u0160\001\001\000\062\005\110\006\107\007\101\012" +
    "\050\014\034\015\046\016\076\021\102\023\104\024\111" +
    "\025\u0161\026\113\030\074\031\045\035\014\036\020\037" +
    "\106\041\013\042\040\045\071\046\077\047\100\051\112" +
    "\052\103\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\u0172\001\001" +
    "\000\014\010\230\015\136\022\u016c\047\064\053\063\001" +
    "\001\000\012\010\u016b\015\136\047\u016a\053\u0169\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\u0171\001\001\000\012\010\u0170\015\136\047\064\053" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\010\u0177\015\136\047\u0176\053\u0175\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\017\u0103\027\u017b\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\u017e\001\001\000\004\061\u017f\001" +
    "\001\000\062\005\110\006\107\007\101\012\050\014\034" +
    "\015\046\016\076\021\102\023\104\024\111\025\u0180\026" +
    "\113\030\074\031\045\035\014\036\020\037\106\041\013" +
    "\042\040\045\071\046\077\047\100\051\112\052\103\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\062\u018a\001\001\000\062\005\110\006\107\007\101\012" +
    "\050\014\034\015\046\016\076\021\102\023\104\024\111" +
    "\025\u018b\026\113\030\074\031\045\035\014\036\020\037" +
    "\106\041\013\042\040\045\071\046\077\047\100\051\112" +
    "\052\103\001\001\000\004\063\u018c\001\001\000\004\034" +
    "\u018d\001\001\000\004\033\u0196\001\001\000\014\010\065" +
    "\015\061\032\u018f\047\064\053\063\001\001\000\002\001" +
    "\001\000\004\065\u0191\001\001\000\062\005\110\006\107" +
    "\007\101\012\050\014\034\015\046\016\076\021\102\023" +
    "\104\024\111\025\u0192\026\113\030\074\031\045\035\014" +
    "\036\020\037\106\041\013\042\040\045\071\046\077\047" +
    "\100\051\112\052\103\001\001\000\004\066\u0193\001\001" +
    "\000\004\034\u0194\001\001\000\002\001\001\000\004\064" +
    "\u0199\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\062\005\110\006\107\007\101\012\050\014" +
    "\034\015\046\016\076\021\102\023\104\024\111\025\u019a" +
    "\026\113\030\074\031\045\035\014\036\020\037\106\041" +
    "\013\042\040\045\071\046\077\047\100\051\112\052\103" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public ArrayList al = new ArrayList();
    public ArrayList erroresS = new ArrayList();
    public ArrayList erroresS1 = new ArrayList();


    /**Metodo al que se llama automáticamente ante algún error sintactico.*/
    public void syntax_error(Symbol s){
        String lexema = s.value.toString();
        int fila = s.right+1;
        int columna = s.left+1;
        
        System.err.println("Error en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador '"
        +s.value + "' no reconocido." );


        erroresS.add("Error en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador '"
        +s.value + "' no reconocido.\n");
    }

    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de
    errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String lexema = s.value.toString();
        int fila = s.right+1;
        int columna = s.left+1;

        System.err.println("Error en la Línea " + (s.right+1)+ " Columna "+(s.left+1)+". Identificador '" +
        s.value + "' no reconocido.");
        
        erroresS1.add("Error en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador '"
        +s.value + "' no reconocido.\n");
    }

    /*public Nodo getRaiz(){
        return action_obj.raiz;
    }*/

    


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {


    //Nodo raiz=null;
    Sintactico sin = new Sintactico();
    ArrayList corchetes = new ArrayList();
    

  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // RETORNO ::= resReturn EXP 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		parser.al.add("\treturn "+val+";\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETORNO",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // SALIRF ::= exit resFor 
            {
              Object RESULT =null;
		parser.al.add("\tbreak;\n\t");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SALIRF",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // SALIRW ::= exit resWhile 
            {
              Object RESULT =null;
		parser.al.add("\tbreak;\n\t");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SALIRW",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // CUERPOSWITCH ::= 
            {
              Object RESULT =null;
		RESULT="";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOSWITCH",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // CUERPOSWITCH ::= resCase resElse NT$19 COD3 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int codleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int codright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object cod = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOSWITCH",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // NT$19 ::= 
            {
              Object RESULT =null;
parser.al.add("\tdefault:\n\t");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$19",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // CUERPOSWITCH ::= resCase VALOR NT$17 COD3 NT$18 CUERPOSWITCH 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int codleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int codright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object cod = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOSWITCH",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // NT$18 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int codleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int codright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object cod = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
parser.al.add("\tbreak;\n\t");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$18",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // NT$17 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
parser.al.add("\tcase "+val+":\n\t");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$17",59, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // SENTSWITCH ::= select resCase iden NT$14 resCase VALOR NT$15 COD3 NT$16 CUERPOSWITCH end select 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int codleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int codright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object cod = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		parser.al.add("\n\t}\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTSWITCH",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // NT$16 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int codleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int codright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object cod = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
parser.al.add("\tbreak;\n\t");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$16",58, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // NT$15 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
parser.al.add("\tcase "+val+":\n\t");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$15",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // NT$14 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
parser.al.add("\tswitch("+id+") {\n\t");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$14",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // SENTDOWHILE ::= resDo NT$13 COD3 loopUntil CONDICION 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int codleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int codright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object cod = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		parser.al.add("\t} while("+cond+");\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTDOWHILE",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // NT$13 ::= 
            {
              Object RESULT =null;
parser.al.add("\tdo{\n\t");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$13",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // SIGNO ::= 
            {
              Object RESULT =null;
		RESULT="";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNO",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // SIGNO ::= div 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNO",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // SIGNO ::= mul 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNO",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // SIGNO ::= menos 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNO",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // SIGNO ::= mas 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNO",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // SENTFOR ::= resFor iden as TIPO igual NUM resTo EXP step SIGNO NUM NT$12 COD3 next 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).value;
		int inicioleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int inicioright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Object inicio = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String signo = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int finright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object fin = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int sigleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int sigright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object sig = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int saltoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int saltoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object salto = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int codleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int codright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object cod = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		parser.al.add("\n\t}\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTFOR",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // NT$12 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int inicioleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int inicioright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object inicio = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String signo = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int finright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object fin = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int sigleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sigright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object sig = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int saltoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int saltoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object salto = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
/*int primero = Integer.parseInt(inicio.toString());
                                                                                            int segundo = Integer.parseInt(fin.toString());
                                                                                            if(primero < segundo){*/
                                                                                            parser.al.add("\t"+"for("+"int"+" "+id+" = "+inicio+"; "+id+" < "+fin+"; "+id+" = "+id+" + ("+sig+salto+") ){\n\t");
                                                                                            /*} else{
                                                                                            parser.al.add("\t"+"for("+"int"+" "+id+" = "+inicio+"; "+id+" > "+fin+"; "+id+" = "+id+" + ("+sig+salto+") ){\n\t");
                                                                                            }*/
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$12",54, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // SENTWHILE ::= resWhile CONDICION NT$11 COD3 end resWhile 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int codleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int codright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object cod = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		parser.al.add("\n\t}\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTWHILE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // NT$11 ::= 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
parser.al.add("\t"+"while("+cond+"){\n\t");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$11",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // SENTELSEIF ::= 
            {
              Object RESULT =null;
		RESULT="";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTELSEIF",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // SENTELSEIF ::= resElseIf CONDICION resThen NT$9 COD3 NT$10 SENTELSEIF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int codleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int codright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object cod = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTELSEIF",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // NT$10 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int codleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int codright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object cod = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
parser.al.add("\n\t}\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$10",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // NT$9 ::= 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
parser.al.add("\t"+"else if("+cond+"){\n\t");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$9",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // SENTELSE ::= 
            {
              Object RESULT =null;
		RESULT="";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTELSE",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // SENTELSE ::= resElse NT$8 COD3 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		parser.al.add("\n\t}\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTELSE",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // NT$8 ::= 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
parser.al.add("\t"+"else"+"{\n\t");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$8",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // OPLOG ::= 
            {
              Object RESULT =null;
		RESULT="";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPLOG",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // OPLOG ::= not CONDICION 
            {
              Object RESULT =null;
		int con2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int con2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object con2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=" ! "+con2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPLOG",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // OPLOG ::= or CONDICION 
            {
              Object RESULT =null;
		int con2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int con2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object con2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=" || "+con2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPLOG",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // OPLOG ::= and CONDICION 
            {
              Object RESULT =null;
		int con2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int con2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object con2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=" && "+con2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPLOG",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // CONDICION ::= VALOR 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // CONDICION ::= EXP igual EXP OPLOG 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"=="+val2+o;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // CONDICION ::= EXP menorMayor EXP OPLOG 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"!="+val2+o;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // CONDICION ::= EXP mayorIgual EXP OPLOG 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+">="+val2+o;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // CONDICION ::= EXP mayorq EXP OPLOG 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+">"+val2+o;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // CONDICION ::= EXP menorIgual EXP OPLOG 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"<="+val2+o;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // CONDICION ::= EXP menorq EXP OPLOG 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"<"+val2+o;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // SENTIF ::= resIf CONDICION resThen NT$6 COD3 NT$7 SENTELSEIF SENTELSE end resIf 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int codleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int codright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object cod = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int elsifleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int elsifright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object elsif = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int elsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int elsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object els = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		parser.al.add(elsif);parser.al.add(els);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTIF",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int codleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int codright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object cod = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
parser.al.add("\n\t}\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$7",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // NT$6 ::= 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
parser.al.add("\t"+"if("+cond+"){\n\t");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$6",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // FUNCION ::= func iden parentesisA LISTAPARAM parentesisC as TIPO NT$5 COD3 end func 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int codleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int codright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object cod = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		parser.al.add("\n\t}\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // NT$5 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
parser.al.add("\t"+tipo+" "+id+" ("+lp+"){\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$5",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // FUNCION ::= ACCESO func iden parentesisA LISTAPARAM parentesisC as TIPO NT$4 COD3 end func 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int accleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).left;
		int accright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).right;
		Object acc = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int codleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int codright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object cod = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		parser.al.add("\n\t}\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // NT$4 ::= 
            {
              Object RESULT =null;
		int accleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int accright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object acc = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
parser.al.add("\t"+acc+" "+tipo+" "+id+" ("+lp+"){\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$4",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // PARAMETRO ::= byval iden as TIPO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=tipo+" "+id;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETRO",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // LISTAPARAM ::= 
            {
              Object RESULT =null;
		RESULT="";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAPARAM",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // LISTAPARAM ::= PARAMETRO coma LISTAPARAM 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val+" , "+val1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAPARAM",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // LISTAPARAM ::= PARAMETRO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAPARAM",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // MET ::= sub iden parentesisA LISTAPARAM parentesisC NT$3 COD3 end sub 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int codleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int codright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object cod = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		parser.al.add("\t}\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MET",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // NT$3 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
parser.al.add("\t"+"void "+id+" ("+lp+"){\n\t");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$3",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // MET ::= ACCESO sub iden parentesisA LISTAPARAM parentesisC NT$2 COD3 end sub 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int accleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int accright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Object acc = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int codleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int codright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object cod = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		parser.al.add("\t}\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MET",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // NT$2 ::= 
            {
              Object RESULT =null;
		int accleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int accright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object acc = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
String a=acc+" static";parser.al.add("\t"+a+" void "+id+" ("+lp+"){\n\t");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$2",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // IMP ::= cwl parentesisA EXP parentesisC 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		parser.al.add("\t"+"System.out.println("+val+");\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMP",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // ASGARR ::= iden corA ARRLISTA corC igual EXP 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int exppleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exppright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object expp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		parser.al.add("\t"+id+val+" = "+expp+";\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASGARR",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // ARRLISTA ::= EXP coma ARRLISTA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT="["+val+"]"+val1;corchetes.add(RESULT);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARRLISTA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // ARRLISTA ::= EXP 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT="["+val+"]";corchetes.add(RESULT);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARRLISTA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // ARREGLOS ::= iden corA ARRLISTA corC as TIPO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		String cor="";for(int i=0;i<corchetes.size();i++){cor+="[]";};parser.al.add("\t"+tipo+" "+cor+" "+id+" = new "+tipo+" "+val+";\n");corchetes.clear();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // ARREGLOS ::= ACCESO iden corA ARRLISTA corC as TIPO 
            {
              Object RESULT =null;
		int accleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int accright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object acc = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		String cor="";for(int i=0;i<corchetes.size();i++){cor+="[]";};parser.al.add("\t"+acc+" "+tipo+" "+cor+" "+id+" = new "+tipo+" "+val+";\n");corchetes.clear();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // SENTENCIA ::= COD2 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // METMAIN ::= ACCESO sub main parentesisA parentesisC NT$1 SENTENCIA end sub 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		System.out.println("\n\t}");
                                   parser.al.add("\n\t}\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METMAIN",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // NT$1 ::= 
            {
              Object RESULT =null;
System.out.println("\t"+"public static void main(String[] args){\n\t");
                                             parser.al.add("\t"+"public static void main(String[] args){\n\t");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // DYA2 ::= iden as TIPO igual crl 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		if(tipo=="String"){parser.al.add("\t"+tipo+" "+id+" = sc.nextLine();\n");}else{parser.al.add("\t"+"int "+id+" = sc.nextInt();\n");};
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DYA2",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // DYA2 ::= ACCESO iden as TIPO igual crl 
            {
              Object RESULT =null;
		int accleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int accright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object acc = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		if(tipo=="String"){parser.al.add("\t"+acc+" "+tipo+" "+id+" = sc.nextLine();\n");}else{parser.al.add("\t"+acc+" int "+id+" = sc.nextInt();\n");};
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DYA2",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // DYA ::= iden as TIPO igual LLAMFUNC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object dato = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		parser.al.add("\t"+tipo+" "+id+" = "+dato+";\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DYA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // DYA ::= iden as TIPO igual LLAMARR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object dato = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		parser.al.add("\t"+tipo+" "+id+" = "+dato+";\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DYA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // DYA ::= iden as TIPO igual EXP 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object dato = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		parser.al.add("\t"+tipo+" "+id+" = "+dato+";\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DYA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // DYA ::= ACCESO iden as TIPO igual LLAMFUNC 
            {
              Object RESULT =null;
		int accleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int accright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object acc = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object dato = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		parser.al.add("\t"+acc+" "+tipo+" "+id+" = "+dato+";\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DYA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // DYA ::= ACCESO iden as TIPO igual LLAMARR 
            {
              Object RESULT =null;
		int accleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int accright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object acc = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object dato = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		parser.al.add("\t"+acc+" "+tipo+" "+id+" = "+dato+";\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DYA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // DYA ::= ACCESO iden as TIPO igual EXP 
            {
              Object RESULT =null;
		int accleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int accright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object acc = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object dato = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		parser.al.add("\t"+acc+" "+tipo+" "+id+" = "+dato+";\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DYA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // NUM ::= decimal 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NUM",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // NUM ::= entero 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NUM",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // VALOR ::= caracter 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // VALOR ::= iden 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // VALOR ::= bool 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // VALOR ::= cadena 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // VALOR ::= decimal 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // VALOR ::= entero 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // PARAMFUNC ::= 
            {
              Object RESULT =null;
		RESULT="";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMFUNC",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // PARAMFUNC ::= VALOR div PARAMFUNC 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"/"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMFUNC",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // PARAMFUNC ::= VALOR mul PARAMFUNC 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"*"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMFUNC",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // PARAMFUNC ::= VALOR menos PARAMFUNC 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"-"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMFUNC",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // PARAMFUNC ::= VALOR mas PARAMFUNC 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"+"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMFUNC",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // PARAMFUNC ::= VALOR coma PARAMFUNC 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+","+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMFUNC",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // PARAMFUNC ::= VALOR 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMFUNC",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // LLAMARR ::= VALOR corA ARRLISTA corC 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=val1+""+ar;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMARR",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // LLAMFUNC ::= VALOR parentesisA PARAMFUNC parentesisC 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int pfleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int pfright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object pf = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=val1+"("+pf+")";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMFUNC",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXP ::= iden corA VALOR coma VALOR corC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=id+"["+id1+"]"+id2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXP ::= EXP igual EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"=="+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXP ::= EXP menorMayor EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"!="+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXP ::= EXP mayorIgual EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+">="+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXP ::= EXP mayorq EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+">"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXP ::= EXP menorIgual EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"<="+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXP ::= EXP menorq EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"<"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXP ::= VALOR and2 EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+" + "+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXP ::= LLAMARR and2 EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"+"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXP ::= LLAMARR div EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"/"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXP ::= LLAMARR mul EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"*"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXP ::= LLAMARR menos EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"-"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXP ::= LLAMARR mas EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"+"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXP ::= EXP and2 LLAMARR 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"+"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXP ::= EXP div LLAMARR 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"/"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXP ::= EXP mul LLAMARR 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"*"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXP ::= EXP menos LLAMARR 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"-"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXP ::= EXP mas LLAMARR 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"+"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXP ::= LLAMFUNC and2 EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"+"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXP ::= LLAMFUNC div EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"/"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXP ::= LLAMFUNC mul EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"*"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXP ::= LLAMFUNC menos EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"-"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXP ::= LLAMFUNC mas EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"+"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXP ::= EXP and2 LLAMFUNC 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"+"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXP ::= EXP div LLAMFUNC 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"/"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXP ::= EXP mul LLAMFUNC 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"*"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXP ::= EXP menos LLAMFUNC 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"-"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXP ::= EXP mas LLAMFUNC 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"+"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXP ::= VALOR 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXP ::= EXP div EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"/"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXP ::= EXP mul EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"*"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXP ::= EXP menos EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"-"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXP ::= EXP mas EXP 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val1+"+"+val2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ASIGNACION ::= iden igual crl 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		parser.al.add("\t"+id+" = sc.nextInt();\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ASIGNACION ::= iden igual LLAMARR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object dato = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		parser.al.add("\t"+ id + " = " + dato +";\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ASIGNACION ::= iden igual LLAMFUNC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object dato = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		parser.al.add("\t"+ id + " = " + dato +";\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ASIGNACION ::= iden igual EXP 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object dato = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		parser.al.add("\t"+ id + " = " + dato +";\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // LISTAID ::= iden coma LISTAID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=id+","+id1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAID",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // LISTAID ::= iden 
            {
              Object RESULT =null;
		int id2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=id2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAID",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ACCESO ::= resStatic 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT="static";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESO",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ACCESO ::= dim 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT="private";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESO",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ACCESO ::= resPrivate 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT="private";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESO",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ACCESO ::= resPublic 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT="public";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESO",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // TIPO ::= resLong 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT="long";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // TIPO ::= resChar 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT="char";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // TIPO ::= resDouble 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT="double";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // TIPO ::= resBoolean 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT="boolean";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // TIPO ::= resString 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT="String";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // TIPO ::= resInteger 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT="int";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLARACION ::= iden as TIPO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		System.out.println("\t"+ tipo + " " + id +";"); 
                                        parser.al.add("\t"+ tipo + " " + id +";\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION ::= ACCESO iden as TIPO 
            {
              Object RESULT =null;
		int accleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int accright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object acc = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		System.out.println("\t"+ acc + " " + tipo + " " + id +";"); 
                                                   parser.al.add("\t"+ acc + " " + tipo + " " + id +";\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION ::= LISTAID as TIPO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		System.out.println("\t"+ tipo + " " + id +";"); 
                                        parser.al.add("\t"+ tipo + " " + id +";\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION ::= ACCESO LISTAID as TIPO 
            {
              Object RESULT =null;
		int accleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int accright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object acc = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		System.out.println("\t"+ acc + " " + tipo + " " + id +";"); 
                                                   parser.al.add("\t"+ acc + " " + tipo + " " + id +";\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CICLOS ::= SENTSWITCH 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLOS",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CICLOS ::= SENTDOWHILE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLOS",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CICLOS ::= SENTWHILE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLOS",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CICLOS ::= SENTFOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLOS",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CICLOS ::= SENTIF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLOS",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // COD3 ::= 
            {
              Object RESULT =null;
		RESULT="";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD3",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // COD3 ::= LLAMFUNC COD 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		parser.al.add("\t"+val+";\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD3",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // COD3 ::= RETORNO COD3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD3",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // COD3 ::= SALIRF COD3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD3",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // COD3 ::= SALIRW COD3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD3",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // COD3 ::= Comentario2 COD3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD3",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // COD3 ::= Comentario1 COD3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD3",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // COD3 ::= CICLOS COD3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD3",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // COD3 ::= FUNCION COD3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD3",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // COD3 ::= METMAIN COD3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD3",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // COD3 ::= MET COD3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD3",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // COD3 ::= DYA2 COD3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD3",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // COD3 ::= DYA COD3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD3",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // COD3 ::= IMP COD3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD3",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // COD3 ::= ASGARR COD3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD3",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // COD3 ::= ARREGLOS COD3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD3",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // COD3 ::= ASIGNACION COD3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD3",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // COD3 ::= DECLARACION COD3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD3",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // COD2 ::= 
            {
              Object RESULT =null;
		RESULT="";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD2",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // COD2 ::= LLAMFUNC COD2 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		parser.al.add("\t"+val+";\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD2",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // COD2 ::= Comentario2 COD2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD2",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // COD2 ::= Comentario1 COD2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD2",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // COD2 ::= CICLOS COD2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD2",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // COD2 ::= FUNCION COD2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD2",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // COD2 ::= METMAIN COD2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD2",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // COD2 ::= MET COD2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD2",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // COD2 ::= DYA2 COD2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD2",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // COD2 ::= DYA COD2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD2",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // COD2 ::= IMP COD2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD2",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // COD2 ::= ASGARR COD2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD2",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // COD2 ::= ARREGLOS COD2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD2",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // COD2 ::= ASIGNACION COD2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD2",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // COD2 ::= DECLARACION COD2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD2",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // COD ::= 
            {
              Object RESULT =null;
		RESULT="";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // COD ::= LLAMFUNC COD 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		parser.al.add("\t"+val+";\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // COD ::= Comentario2 COD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // COD ::= Comentario1 COD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // COD ::= CICLOS COD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // COD ::= FUNCION COD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // COD ::= MET COD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // COD ::= METMAIN COD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // COD ::= IMP COD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // COD ::= ASGARR COD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // COD ::= ARREGLOS COD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // COD ::= DYA2 COD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // COD ::= DYA COD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // COD ::= ASIGNACION COD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // COD ::= DECLARACION COD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COD",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= module iden NT$0 COD end module 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int codleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int codright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object cod = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		System.out.println("\n"+"}");
                              parser.al.add("\n"+"}");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
System.out.println("import java.util.Scanner;\n\n\n"+"public class "+ id + "{"+"\n\t"); 
                          parser.al.add("import java.util.Scanner;\n\n\n"+"public class "+ id + "{"+"\n\n");
                          parser.al.add("\t"+"static Scanner sc = new Scanner(System.in);\n");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

